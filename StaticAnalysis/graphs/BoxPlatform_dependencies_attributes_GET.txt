----------------------------------------------
       Endpoint dependencies per attribute       
       Number of api endpoints (nodes): 266
       Number of api endpoints (nodes) with inter-dependency: 228
       Number of dependent only api endpoints (nodes): 118
       Number of api endpoints (nodes) that only derive dependencies: 38
       Number of api endpoints (nodes) that are both dependent and derive dependencies: 72
       Number of dependencies (edges): 7578
       Number of dependencies per attribute: 13090
       Number of dependencies per parameter type (body/query/path): 7267/857/4966
----------------------------------------------
Find file for shared link  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Find file for shared link  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to file  [ label = "expires_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
Find file for shared link  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to file  [ label = "expired_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Add shared link to file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to folder  [ label = "expired_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Add shared link to folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
Find file for shared link  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to folder  [ label = "expires_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
Find file for shared link  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Find file for shared link  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to web link  [ label = "expired_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to web link  [ label = "expires_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Add shared link to web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Find file for shared link  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
Find file for shared link  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Find file for shared link  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Create collaboration  [ label = "allowed_invitee_roles : role"] type: string, parameter: body
Find file for shared link  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Find file for shared link  ->  Create folder  [ label = "access : access"] type: string, parameter: body
Find file for shared link  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
Find file for shared link  ->  Create legal hold policy  [ label = "expired_at : filter_started_at"] type: string, parameter: body
Find file for shared link  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
Find file for shared link  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Find file for shared link  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Find file for shared link  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Find file for shared link  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Find file for shared link  ->  Create legal hold policy  [ label = "expires_at : filter_started_at"] type: string, parameter: body
Find file for shared link  ->  Create legal hold policy  [ label = "disposition_at : filter_started_at"] type: string, parameter: body
Find file for shared link  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Find file for shared link  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Find file for shared link  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Create sign request  [ label = "version_number : etag"] type: int, parameter: body
Find file for shared link  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Find file for shared link  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Find file for shared link  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Find file for shared link  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Create task  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Create task  [ label = "expired_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Create task  [ label = "disposition_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Create task  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Create task  [ label = "expires_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Create user  [ label = "name : name"] type: string, parameter: body
Find file for shared link  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
Find file for shared link  ->  Create user  [ label = "type : role"] type: string, parameter: body
Find file for shared link  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Find file for shared link  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Find file for shared link  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Find file for shared link  ->  Download file  [ label = "access_token : access_token"] type: string, parameter: query
Find file for shared link  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Find metadata template by instance ID  [ label = "$id : metadata_instance_id"] type: string, parameter: query
Find file for shared link  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Find file for shared link  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Get file thumbnail  [ label = "representation : extension"] type: string, parameter: path
Find file for shared link  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Find file for shared link  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Find file for shared link  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Find file for shared link  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Find file for shared link  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Find file for shared link  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Find file for shared link  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Find file for shared link  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Find file for shared link  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Find file for shared link  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Find file for shared link  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Find file for shared link  ->  List file version retentions  [ label = "version_number : file_version_id"] type: int, parameter: query
Find file for shared link  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Find file for shared link  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Find file for shared link  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Find file for shared link  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Find file for shared link  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Find file for shared link  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Find file for shared link  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Find file for shared link  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Find file for shared link  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Find file for shared link  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Find file for shared link  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Find file for shared link  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Find file for shared link  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Find file for shared link  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Find file for shared link  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Find file for shared link  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Find file for shared link  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Find file for shared link  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Find file for shared link  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Update all Box Skill cards on file  [ label = "state : status"] type: string, parameter: body
Find file for shared link  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Find file for shared link  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Find file for shared link  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Update collaboration  [ label = "allowed_invitee_roles : role"] type: string, parameter: body
Find file for shared link  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Find file for shared link  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "expired_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "expires_at : expires_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "access : access"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "expired_at : expires_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "expires_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "type : access"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "expires_at : disposition_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "disposition_at : disposition_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "tags : tags"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "expired_at : disposition_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "disposition_at : expires_at"] type: string, parameter: body
Find file for shared link  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
Find file for shared link  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update folder  [ label = "expired_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update folder  [ label = "access : access"] type: string, parameter: body
Find file for shared link  ->  Update folder  [ label = "tags : tags"] type: string, parameter: body
Find file for shared link  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Update folder  [ label = "expires_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Find file for shared link  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Find file for shared link  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Find file for shared link  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
Find file for shared link  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on file  [ label = "expired_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Find file for shared link  ->  Update shared link on file  [ label = "expires_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on folder  [ label = "expired_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on folder  [ label = "expires_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
Find file for shared link  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Find file for shared link  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on web link  [ label = "expires_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Find file for shared link  ->  Update shared link on web link  [ label = "expired_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
Find file for shared link  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update task  [ label = "expires_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Update task  [ label = "disposition_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Find file for shared link  ->  Update task  [ label = "expired_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Find file for shared link  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Find file for shared link  ->  Update user  [ label = "name : name"] type: string, parameter: body
Find file for shared link  ->  Update user  [ label = "type : role"] type: string, parameter: body
Find file for shared link  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Find file for shared link  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
Find file for shared link  ->  Update web link  [ label = "expired_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update web link  [ label = "expires_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Find file for shared link  ->  Update web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Find file for shared link  ->  Update web link  [ label = "access : access"] type: string, parameter: body
Find file for shared link  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Find file for shared link  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Find folder for shared link  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to file  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Add shared link to folder  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to web link  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Find folder for shared link  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Find folder for shared link  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
Find folder for shared link  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Find folder for shared link  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Create collaboration  [ label = "allowed_invitee_roles : role"] type: string, parameter: body
Find folder for shared link  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Find folder for shared link  ->  Create folder  [ label = "sync_state : sync_state"] type: string, parameter: body
Find folder for shared link  ->  Create folder  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Find folder for shared link  ->  Create folder  [ label = "access : access"] type: string, parameter: body
Find folder for shared link  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Find folder for shared link  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Find folder for shared link  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Find folder for shared link  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
Find folder for shared link  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
Find folder for shared link  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Find folder for shared link  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Find folder for shared link  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Find folder for shared link  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Find folder for shared link  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Find folder for shared link  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Find folder for shared link  ->  Create task  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Find folder for shared link  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Find folder for shared link  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Find folder for shared link  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Find folder for shared link  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
Find folder for shared link  ->  Create task  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Find folder for shared link  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Create user  [ label = "type : role"] type: string, parameter: body
Find folder for shared link  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
Find folder for shared link  ->  Create user  [ label = "name : name"] type: string, parameter: body
Find folder for shared link  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Find folder for shared link  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Find folder for shared link  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Find folder for shared link  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Find metadata template by instance ID  [ label = "$id : metadata_instance_id"] type: string, parameter: query
Find folder for shared link  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Find folder for shared link  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
Find folder for shared link  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Find folder for shared link  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Find folder for shared link  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Find folder for shared link  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Find folder for shared link  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Find folder for shared link  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Find folder for shared link  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Find folder for shared link  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Find folder for shared link  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Find folder for shared link  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Find folder for shared link  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
Find folder for shared link  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Find folder for shared link  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Find folder for shared link  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
Find folder for shared link  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Find folder for shared link  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Find folder for shared link  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Find folder for shared link  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
Find folder for shared link  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Find folder for shared link  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Find folder for shared link  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Find folder for shared link  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Find folder for shared link  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Find folder for shared link  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Find folder for shared link  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Find folder for shared link  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Find folder for shared link  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Find folder for shared link  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Find folder for shared link  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Find folder for shared link  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Find folder for shared link  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Find folder for shared link  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Find folder for shared link  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Find folder for shared link  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Find folder for shared link  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Update collaboration  [ label = "allowed_invitee_roles : role"] type: string, parameter: body
Find folder for shared link  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Find folder for shared link  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "allowed_shared_link_access_levels : can_download"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "access : access"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "tags : tags"] type: string, parameter: body
Find folder for shared link  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Find folder for shared link  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
Find folder for shared link  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update folder  [ label = "tags : tags"] type: string, parameter: body
Find folder for shared link  ->  Update folder  [ label = "description : description"] type: string, parameter: body
Find folder for shared link  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Update folder  [ label = "sync_state : sync_state"] type: string, parameter: body
Find folder for shared link  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update folder  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Find folder for shared link  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update folder  [ label = "access : access"] type: string, parameter: body
Find folder for shared link  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Find folder for shared link  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Find folder for shared link  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Find folder for shared link  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Find folder for shared link  ->  Update shared link on file  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Find folder for shared link  ->  Update shared link on folder  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on web link  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Find folder for shared link  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Find folder for shared link  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Find folder for shared link  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Find folder for shared link  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
Find folder for shared link  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Find folder for shared link  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Find folder for shared link  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Find folder for shared link  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Find folder for shared link  ->  Update user  [ label = "type : role"] type: string, parameter: body
Find folder for shared link  ->  Update user  [ label = "name : name"] type: string, parameter: body
Find folder for shared link  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
Find folder for shared link  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Find folder for shared link  ->  Update web link  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Find folder for shared link  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update web link  [ label = "access : access"] type: string, parameter: body
Find folder for shared link  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find folder for shared link  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Find folder for shared link  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Find folder for shared link  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Find metadata template by instance ID  ->  Assign retention policy  [ label = "type : type"] type: string, parameter: body
Find metadata template by instance ID  ->  Create metadata cascade policy  [ label = "templateKey : templateKey"] type: string, parameter: body
Find metadata template by instance ID  ->  Create metadata template  [ label = "description : description"] type: string, parameter: body
Find metadata template by instance ID  ->  Create metadata template  [ label = "type : type"] type: string, parameter: body
Find metadata template by instance ID  ->  Create metadata template  [ label = "templateKey : templateKey"] type: string, parameter: body
Find metadata template by instance ID  ->  Create metadata template  [ label = "key : key"] type: string, parameter: body
Find metadata template by instance ID  ->  Create metadata template  [ label = "displayName : displayName"] type: string, parameter: body
Find metadata template by instance ID  ->  List retention policy assignments  [ label = "type : type"] type: string, parameter: query
Find web link for shared link  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Find web link for shared link  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
Find web link for shared link  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Find web link for shared link  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
Find web link for shared link  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Find web link for shared link  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Find web link for shared link  ->  Create folder  [ label = "access : access"] type: string, parameter: body
Find web link for shared link  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Find web link for shared link  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Find web link for shared link  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Find web link for shared link  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Find web link for shared link  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Find web link for shared link  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Find web link for shared link  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Find web link for shared link  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Find web link for shared link  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Find web link for shared link  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Find web link for shared link  ->  Create task  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Find web link for shared link  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Find web link for shared link  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Find web link for shared link  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
Find web link for shared link  ->  Create user  [ label = "name : name"] type: string, parameter: body
Find web link for shared link  ->  Create user  [ label = "type : role"] type: string, parameter: body
Find web link for shared link  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Find web link for shared link  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Find web link for shared link  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Find web link for shared link  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Find web link for shared link  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Find web link for shared link  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Find web link for shared link  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Find web link for shared link  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Find web link for shared link  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Find web link for shared link  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Find web link for shared link  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Find web link for shared link  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Find web link for shared link  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Find web link for shared link  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Find web link for shared link  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Find web link for shared link  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Find web link for shared link  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Find web link for shared link  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Find web link for shared link  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Find web link for shared link  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Find web link for shared link  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Find web link for shared link  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Find web link for shared link  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Find web link for shared link  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Find web link for shared link  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Find web link for shared link  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Find web link for shared link  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Find web link for shared link  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Find web link for shared link  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Find web link for shared link  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Find web link for shared link  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Find web link for shared link  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Find web link for shared link  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Find web link for shared link  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Find web link for shared link  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Find web link for shared link  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Find web link for shared link  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Find web link for shared link  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
Find web link for shared link  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update file  [ label = "access : access"] type: string, parameter: body
Find web link for shared link  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Find web link for shared link  ->  Update file  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Find web link for shared link  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Find web link for shared link  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Find web link for shared link  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
Find web link for shared link  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Update folder  [ label = "access : access"] type: string, parameter: body
Find web link for shared link  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Find web link for shared link  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Find web link for shared link  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Find web link for shared link  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Find web link for shared link  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Find web link for shared link  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Find web link for shared link  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
Find web link for shared link  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Find web link for shared link  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Find web link for shared link  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Find web link for shared link  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Find web link for shared link  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Find web link for shared link  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Find web link for shared link  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Find web link for shared link  ->  Update user  [ label = "name : name"] type: string, parameter: body
Find web link for shared link  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
Find web link for shared link  ->  Update user  [ label = "type : role"] type: string, parameter: body
Find web link for shared link  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Find web link for shared link  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Update web link  [ label = "access : access"] type: string, parameter: body
Find web link for shared link  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Find web link for shared link  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Add classification to file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Add classification to folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Add or update user avatar  [ label = "folder_id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Add shared link to file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Add shared link to folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Add shared link to web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Apply watermark to file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Apply watermark to folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get Box Sign template by ID  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Copy file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Create Box Skill cards on file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Create email alias  [ label = "folder_id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Create metadata instance on file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Create metadata instance on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Create sign request  [ label = "date_value : date_value"] type: string, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "instructions : email_message"] type: string, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "email_message : email_message"] type: string, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "document_tag_id : document_tag_id"] type: int, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "email_subject : email_subject"] type: string, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "text_value : text_value"] type: string, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "content_type : text_value"] type: string, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "role : role"] type: string, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "document_tag_id : embed_url_external_user_id"] type: int, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "folder_id : id"] type: int, parameter: body
Get Box Sign template by ID  ->  Create sign request  [ label = "type : text_value"] type: string, parameter: body
Get Box Sign template by ID  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Create upload session for existing file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get Box Sign template by ID  ->  Create zip download  [ label = "folder_id : id"] type: int, parameter: body
Get Box Sign template by ID  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Delete file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Delete folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Delete folder lock  [ label = "folder_id : folder_lock_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Delete user  [ label = "folder_id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Delete user avatar  [ label = "folder_id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Download file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get classification on file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get classification on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get collaboration  [ label = "document_tag_id : collaboration_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get comment  [ label = "folder_id : comment_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get file information  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get file thumbnail  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get file version  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get file version  [ label = "document_tag_id : file_version_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get folder information  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get metadata instance on file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get metadata instance on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get shared link for file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get shared link for folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get shared link for web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get task  [ label = "folder_id : task_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get task assignment  [ label = "folder_id : task_assignment_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get trashed file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get trashed folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get trashed web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get user  [ label = "folder_id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get user avatar  [ label = "folder_id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get watermark for folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get watermark on file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List Box Skill cards on file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get Box Sign template by ID  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get Box Sign template by ID  ->  List Slack integration mappings  [ label = "folder_id : box_item_id"] type: int, parameter: query
Get Box Sign template by ID  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get Box Sign template by ID  ->  List Slack integration mappings  [ label = "folder_id : partner_item_id"] type: int, parameter: query
Get Box Sign template by ID  ->  List all file versions  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List file collaborations  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List file comments  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get Box Sign template by ID  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List folder collaborations  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get Box Sign template by ID  ->  List folder locks  [ label = "folder_id : folder_id"] type: int, parameter: query
Get Box Sign template by ID  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List items in folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get Box Sign template by ID  ->  List metadata instances on file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List metadata instances on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List task assignments  [ label = "folder_id : task_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List tasks on file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List user's email aliases  [ label = "folder_id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List user's groups  [ label = "folder_id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get Box Sign template by ID  ->  List workflows  [ label = "folder_id : folder_id"] type: int, parameter: query
Get Box Sign template by ID  ->  Permanently remove file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Permanently remove folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Permanently remove web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Promote file version  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove Box Skill cards from file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove classification from file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove classification from folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove collaboration  [ label = "document_tag_id : collaboration_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove comment  [ label = "folder_id : comment_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove email alias  [ label = "folder_id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove file version  [ label = "document_tag_id : file_version_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove file version  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove metadata instance from file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove metadata instance from folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove shared link from file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove shared link from folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove shared link from web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove task  [ label = "folder_id : task_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove watermark from file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove watermark from folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Remove web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Restore file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Restore file version  [ label = "document_tag_id : file_version_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Restore file version  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Restore folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Restore web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get Box Sign template by ID  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Starts workflow based on request body  [ label = "folder_id : workflow_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Transfer owned folders  [ label = "folder_id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Unassign task  [ label = "folder_id : task_assignment_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update Box Skill cards on file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get Box Sign template by ID  ->  Update classification on file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update classification on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update collaboration  [ label = "document_tag_id : collaboration_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update comment  [ label = "folder_id : comment_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update metadata instance on file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update metadata instance on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update shared link on file  [ label = "folder_id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update shared link on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update shared link on web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update task  [ label = "folder_id : task_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update task assignment  [ label = "folder_id : task_assignment_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update user  [ label = "folder_id : user_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get Box Sign template by ID  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get Box Sign template by ID  ->  Upload file version  [ label = "folder_id : file_id"] type: int, parameter: path
Get allowed collaboration domain  ->  Add domain to list of allowed collaboration domains  [ label = "domain : domain"] type: string, parameter: body
Get allowed collaboration domain  ->  Add initial classifications  [ label = "type : scope"] type: string, parameter: body
Get allowed collaboration domain  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get allowed collaboration domain  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get allowed collaboration domain  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get allowed collaboration domain  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get allowed collaboration domain  ->  Create metadata cascade policy  [ label = "type : scope"] type: string, parameter: body
Get allowed collaboration domain  ->  Create metadata template  [ label = "type : scope"] type: string, parameter: body
Get allowed collaboration domain  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get allowed collaboration domain  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get allowed collaboration domain  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get allowed collaboration domain  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get allowed collaboration domain  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get allowed collaboration domain  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get allowed collaboration domain  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get allowed collaboration domain  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get allowed collaboration domain  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get allowed collaboration domain  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get allowed collaboration domain  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get allowed collaboration domain  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get classification on file  ->  Add classification to file  [ label = "Box__Security__Classification__Key : Box__Security__Classification__Key"] type: string, parameter: body
Get classification on file  ->  Add classification to folder  [ label = "Box__Security__Classification__Key : Box__Security__Classification__Key"] type: string, parameter: body
Get classification on file  ->  Add initial classifications  [ label = "$template : templateKey"] type: string, parameter: body
Get classification on file  ->  Add initial classifications  [ label = "Box__Security__Classification__Key : key"] type: string, parameter: body
Get classification on folder  ->  Add classification to file  [ label = "Box__Security__Classification__Key : Box__Security__Classification__Key"] type: string, parameter: body
Get classification on folder  ->  Add classification to folder  [ label = "Box__Security__Classification__Key : Box__Security__Classification__Key"] type: string, parameter: body
Get classification on folder  ->  Add initial classifications  [ label = "$template : templateKey"] type: string, parameter: body
Get classification on folder  ->  Add initial classifications  [ label = "Box__Security__Classification__Key : key"] type: string, parameter: body
Get collaboration  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get collaboration  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
Get collaboration  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
Get collaboration  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
Get collaboration  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get collaboration  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Assign task  [ label = "invite_email : login"] type: string, parameter: body
Get collaboration  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get collaboration  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
Get collaboration  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get collaboration  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Create collaboration  [ label = "role : role"] type: string, parameter: body
Get collaboration  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Create collaboration  [ label = "invite_email : login"] type: string, parameter: body
Get collaboration  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get collaboration  ->  Create folder  [ label = "access : access"] type: string, parameter: body
Get collaboration  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get collaboration  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
Get collaboration  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Get collaboration  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Get collaboration  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
Get collaboration  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get collaboration  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get collaboration  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get collaboration  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get collaboration  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get collaboration  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get collaboration  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Get collaboration  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get collaboration  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get collaboration  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get collaboration  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get collaboration  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get collaboration  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get collaboration  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
Get collaboration  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get collaboration  ->  Create user invite  [ label = "invite_email : login"] type: string, parameter: body
Get collaboration  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get collaboration  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get collaboration  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get collaboration  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get collaboration  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get collaboration  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get collaboration  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get collaboration  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get collaboration  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get collaboration  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get collaboration  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get collaboration  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get collaboration  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get collaboration  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get collaboration  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get collaboration  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get collaboration  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get collaboration  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get collaboration  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get collaboration  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get collaboration  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get collaboration  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get collaboration  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get collaboration  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get collaboration  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get collaboration  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get collaboration  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get collaboration  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get collaboration  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get collaboration  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get collaboration  ->  Starts workflow based on request body  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get collaboration  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get collaboration  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get collaboration  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get collaboration  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get collaboration  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Update collaboration  [ label = "role : role"] type: string, parameter: body
Get collaboration  ->  Update collaboration  [ label = "status : status"] type: string, parameter: body
Get collaboration  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get collaboration  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "access : access"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
Get collaboration  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Get collaboration  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
Get collaboration  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update folder  [ label = "access : access"] type: string, parameter: body
Get collaboration  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get collaboration  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get collaboration  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get collaboration  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get collaboration  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
Get collaboration  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get collaboration  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
Get collaboration  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
Get collaboration  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get collaboration  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get collaboration  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get collaboration  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Get collaboration  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get collaboration  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get collaboration  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get collaboration  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get collaboration  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get collaboration  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get collaboration  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
Get collaboration  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get collaboration  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get collaboration  ->  Update web link  [ label = "access : access"] type: string, parameter: body
Get collaboration  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get collaboration  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get collaboration  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get collaboration  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get comment  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get comment  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get comment  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get comment  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get comment  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get comment  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get comment  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get comment  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get comment  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get comment  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get comment  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get comment  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get comment  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get comment  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get comment  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get comment  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get comment  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get comment  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get comment  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get comment  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get comment  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get comment  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get comment  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get comment  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get comment  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get comment  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get comment  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get comment  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get comment  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get comment  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get comment  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get comment  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get comment  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get comment  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get comment  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get comment  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get comment  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get comment  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get comment  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get comment  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get comment  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get comment  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get comment  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get comment  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get current user  ->  Add initial classifications  [ label = "type : scope"] type: string, parameter: body
Get current user  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get current user  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get current user  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get current user  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get current user  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get current user  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get current user  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get current user  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Copy file request  [ label = "status : status"] type: string, parameter: body
Get current user  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get current user  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get current user  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get current user  ->  Create metadata cascade policy  [ label = "type : scope"] type: string, parameter: body
Get current user  ->  Create metadata template  [ label = "type : scope"] type: string, parameter: body
Get current user  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get current user  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get current user  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get current user  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get current user  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get current user  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get current user  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get current user  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get current user  ->  Create user  [ label = "phone : phone"] type: int, parameter: body
Get current user  ->  Create user  [ label = "address : address"] type: string, parameter: body
Get current user  ->  Create user  [ label = "status : status"] type: string, parameter: body
Get current user  ->  Create user  [ label = "type : type"] type: string, parameter: body
Get current user  ->  Create user  [ label = "value : value"] type: string, parameter: body
Get current user  ->  Create user  [ label = "job_title : job_title"] type: string, parameter: body
Get current user  ->  Create user  [ label = "external_app_user_id : external_app_user_id"] type: string, parameter: body
Get current user  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get current user  ->  Create user  [ label = "timezone : timezone"] type: string, parameter: body
Get current user  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get current user  ->  Create user  [ label = "language : language"] type: string, parameter: body
Get current user  ->  List enterprise users  [ label = "external_app_user_id : external_app_user_id"] type: string, parameter: query
Get current user  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get current user  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get current user  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get current user  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get current user  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get current user  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get current user  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get current user  ->  Update file request  [ label = "status : status"] type: string, parameter: body
Get current user  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get current user  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get current user  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get current user  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get current user  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get current user  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get current user  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get current user  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get current user  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get current user  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get current user  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get current user  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get current user  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get current user  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get current user  ->  Update user  [ label = "timezone : timezone"] type: string, parameter: body
Get current user  ->  Update user  [ label = "type : type"] type: string, parameter: body
Get current user  ->  Update user  [ label = "job_title : job_title"] type: string, parameter: body
Get current user  ->  Update user  [ label = "language : language"] type: string, parameter: body
Get current user  ->  Update user  [ label = "external_app_user_id : external_app_user_id"] type: string, parameter: body
Get current user  ->  Update user  [ label = "phone : phone"] type: int, parameter: body
Get current user  ->  Update user  [ label = "email : email"] type: string, parameter: body
Get current user  ->  Update user  [ label = "status : status"] type: string, parameter: body
Get current user  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get current user  ->  Update user  [ label = "value : value"] type: string, parameter: body
Get current user  ->  Update user  [ label = "address : address"] type: string, parameter: body
Get current user  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get current user  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get current user  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get device pin  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get device pin  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get device pin  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get device pin  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get device pin  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get device pin  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get device pin  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get device pin  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get device pin  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get device pin  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get device pin  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get device pin  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get device pin  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get device pin  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get device pin  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get device pin  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get device pin  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get file information  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file information  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to file  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to file  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
Get file information  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
Get file information  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Add shared link to folder  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to folder  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file information  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
Get file information  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to web link  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to web link  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get file information  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get file information  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
Get file information  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get file information  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Create collaboration  [ label = "allowed_invitee_roles : role"] type: string, parameter: body
Get file information  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get file information  ->  Create folder  [ label = "access : access"] type: string, parameter: body
Get file information  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get file information  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get file information  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Get file information  ->  Create legal hold policy  [ label = "expires_at : filter_started_at"] type: string, parameter: body
Get file information  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
Get file information  ->  Create legal hold policy  [ label = "disposition_at : filter_started_at"] type: string, parameter: body
Get file information  ->  Create legal hold policy  [ label = "expired_at : filter_started_at"] type: string, parameter: body
Get file information  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Get file information  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
Get file information  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get file information  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get file information  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Create sign request  [ label = "version_number : etag"] type: int, parameter: body
Get file information  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get file information  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get file information  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get file information  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get file information  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Create task  [ label = "expired_at : due_at"] type: string, parameter: body
Get file information  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get file information  ->  Create task  [ label = "expires_at : due_at"] type: string, parameter: body
Get file information  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get file information  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Get file information  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get file information  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get file information  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Create task  [ label = "disposition_at : due_at"] type: string, parameter: body
Get file information  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get file information  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get file information  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
Get file information  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get file information  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get file information  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file information  ->  Download file  [ label = "access_token : access_token"] type: string, parameter: query
Get file information  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Find metadata template by instance ID  [ label = "$id : metadata_instance_id"] type: string, parameter: query
Get file information  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get file information  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Get file thumbnail  [ label = "representation : extension"] type: string, parameter: path
Get file information  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file information  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get file information  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file information  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file information  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get file information  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file information  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file information  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get file information  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get file information  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get file information  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get file information  ->  List file version retentions  [ label = "version_number : file_version_id"] type: int, parameter: query
Get file information  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get file information  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get file information  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get file information  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get file information  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get file information  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get file information  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get file information  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file information  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get file information  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get file information  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file information  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get file information  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file information  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file information  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get file information  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get file information  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get file information  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file information  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get file information  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get file information  ->  Update all Box Skill cards on file  [ label = "state : status"] type: string, parameter: body
Get file information  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Update collaboration  [ label = "allowed_invitee_roles : role"] type: string, parameter: body
Get file information  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get file information  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Update file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "tags : tags"] type: string, parameter: body
Get file information  ->  Update file  [ label = "expired_at : disposition_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "disposition_at : disposition_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "expires_at : disposition_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "expired_at : expires_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "expires_at : expires_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "access : access"] type: string, parameter: body
Get file information  ->  Update file  [ label = "type : access"] type: string, parameter: body
Get file information  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
Get file information  ->  Update file  [ label = "disposition_at : expires_at"] type: string, parameter: body
Get file information  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
Get file information  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Update folder  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update folder  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update folder  [ label = "tags : tags"] type: string, parameter: body
Get file information  ->  Update folder  [ label = "access : access"] type: string, parameter: body
Get file information  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get file information  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get file information  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get file information  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
Get file information  ->  Update shared link on file  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get file information  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on file  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on folder  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
Get file information  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file information  ->  Update shared link on folder  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file information  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on web link  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
Get file information  ->  Update shared link on web link  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get file information  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Get file information  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get file information  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get file information  ->  Update task  [ label = "expired_at : due_at"] type: string, parameter: body
Get file information  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get file information  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get file information  ->  Update task  [ label = "disposition_at : due_at"] type: string, parameter: body
Get file information  ->  Update task  [ label = "expires_at : due_at"] type: string, parameter: body
Get file information  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get file information  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file information  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get file information  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
Get file information  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get file information  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get file information  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update web link  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update web link  [ label = "access : access"] type: string, parameter: body
Get file information  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file information  ->  Update web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update web link  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file information  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get file information  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file request  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file request  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Copy file request  [ label = "status : status"] type: string, parameter: body
Get file request  ->  Copy file request  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Copy file request  [ label = "created_at : expires_at"] type: string, parameter: body
Get file request  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Copy file request  [ label = "expires_at : expires_at"] type: string, parameter: body
Get file request  ->  Copy file request  [ label = "updated_at : expires_at"] type: string, parameter: body
Get file request  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get file request  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get file request  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get file request  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get file request  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get file request  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get file request  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get file request  ->  Create user  [ label = "status : status"] type: string, parameter: body
Get file request  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get file request  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get file request  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get file request  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file request  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get file request  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file request  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get file request  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file request  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file request  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get file request  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file request  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file request  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get file request  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get file request  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get file request  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get file request  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get file request  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get file request  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get file request  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get file request  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get file request  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get file request  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file request  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get file request  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get file request  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file request  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get file request  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file request  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file request  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get file request  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get file request  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file request  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get file request  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Update file request  [ label = "status : status"] type: string, parameter: body
Get file request  ->  Update file request  [ label = "updated_at : expires_at"] type: string, parameter: body
Get file request  ->  Update file request  [ label = "expires_at : expires_at"] type: string, parameter: body
Get file request  ->  Update file request  [ label = "created_at : expires_at"] type: string, parameter: body
Get file request  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get file request  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get file request  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get file request  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get file request  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get file request  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file request  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file request  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get file request  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file request  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get file request  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get file request  ->  Update user  [ label = "status : status"] type: string, parameter: body
Get file request  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get file request  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file request  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file version  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to file  [ label = "restored_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to folder  [ label = "restored_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version  ->  Add shared link to web link  [ label = "restored_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get file version  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get file version  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get file version  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get file version  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get file version  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Get file version  ->  Create legal hold policy  [ label = "restored_at : filter_started_at"] type: string, parameter: body
Get file version  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get file version  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Get file version  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get file version  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get file version  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get file version  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get file version  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get file version  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Create sign request  [ label = "version_number : etag"] type: int, parameter: body
Get file version  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get file version  ->  Create task  [ label = "restored_at : due_at"] type: string, parameter: body
Get file version  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Get file version  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get file version  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get file version  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get file version  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get file version  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get file version  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get file version  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get file version  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file version  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get file version  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get file version  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file version  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get file version  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file version  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get file version  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get file version  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  List file version retentions  [ label = "version_number : file_version_id"] type: int, parameter: query
Get file version  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get file version  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get file version  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get file version  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get file version  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get file version  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get file version  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get file version  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get file version  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get file version  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get file version  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get file version  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get file version  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file version  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get file version  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get file version  ->  Update file  [ label = "restored_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "restored_at : disposition_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "restored_at : expires_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update folder  [ label = "restored_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get file version  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get file version  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get file version  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get file version  ->  Update shared link on file  [ label = "restored_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get file version  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on folder  [ label = "restored_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update shared link on web link  [ label = "restored_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get file version  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Get file version  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get file version  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get file version  ->  Update task  [ label = "restored_at : due_at"] type: string, parameter: body
Get file version  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get file version  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file version  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get file version  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get file version  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get file version  ->  Update web link  [ label = "restored_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file version legal hold  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version legal hold  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Add shared link to web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get file version legal hold  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
Get file version legal hold  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get file version legal hold  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get file version legal hold  ->  Create folder  [ label = "access : access"] type: string, parameter: body
Get file version legal hold  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Create legal hold policy  [ label = "deleted_at : filter_started_at"] type: string, parameter: body
Get file version legal hold  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get file version legal hold  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
Get file version legal hold  ->  Create legal hold policy  [ label = "assigned_at : filter_started_at"] type: string, parameter: body
Get file version legal hold  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get file version legal hold  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Get file version legal hold  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
Get file version legal hold  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Get file version legal hold  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get file version legal hold  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get file version legal hold  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get file version legal hold  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get file version legal hold  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get file version legal hold  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Create task  [ label = "assigned_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Create task  [ label = "deleted_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get file version legal hold  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get file version legal hold  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
Get file version legal hold  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get file version legal hold  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get file version legal hold  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file version legal hold  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get file version legal hold  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version legal hold  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get file version legal hold  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file version legal hold  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version legal hold  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get file version legal hold  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file version legal hold  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version legal hold  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get file version legal hold  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get file version legal hold  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get file version legal hold  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get file version legal hold  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get file version legal hold  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get file version legal hold  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get file version legal hold  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get file version legal hold  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get file version legal hold  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get file version legal hold  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get file version legal hold  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version legal hold  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get file version legal hold  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get file version legal hold  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version legal hold  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get file version legal hold  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version legal hold  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version legal hold  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get file version legal hold  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get file version legal hold  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get file version legal hold  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file version legal hold  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get file version legal hold  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get file version legal hold  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get file version legal hold  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "deleted_at : disposition_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "deleted_at : expires_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "assigned_at : disposition_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "access : access"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "assigned_at : expires_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get file version legal hold  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
Get file version legal hold  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
Get file version legal hold  ->  Update folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update folder  [ label = "access : access"] type: string, parameter: body
Get file version legal hold  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get file version legal hold  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get file version legal hold  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get file version legal hold  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file version legal hold  ->  Update shared link on web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version legal hold  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Update task  [ label = "deleted_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Update task  [ label = "assigned_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get file version legal hold  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get file version legal hold  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file version legal hold  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get file version legal hold  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
Get file version legal hold  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get file version legal hold  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get file version legal hold  ->  Update web link  [ label = "access : access"] type: string, parameter: body
Get file version legal hold  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file version legal hold  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get file version legal hold  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get file version legal hold  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file versions under retention  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file versions under retention  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get file versions under retention  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get file versions under retention  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get file versions under retention  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get file versions under retention  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get file versions under retention  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get file versions under retention  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get file versions under retention  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get file versions under retention  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get file versions under retention  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get file versions under retention  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get file versions under retention  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get file versions under retention  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get file versions under retention  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get file versions under retention  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file versions under retention  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get file versions under retention  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file versions under retention  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get file versions under retention  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file versions under retention  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file versions under retention  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get file versions under retention  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get file versions under retention  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file versions under retention  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get file versions under retention  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get file versions under retention  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get file versions under retention  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get file versions under retention  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get file versions under retention  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get file versions under retention  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get file versions under retention  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get file versions under retention  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get file versions under retention  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file versions under retention  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get file versions under retention  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get file versions under retention  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get file versions under retention  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file versions under retention  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get file versions under retention  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file versions under retention  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file versions under retention  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get file versions under retention  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get file versions under retention  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get file versions under retention  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get file versions under retention  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file versions under retention  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get file versions under retention  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get file versions under retention  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get file versions under retention  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get file versions under retention  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get file versions under retention  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get file versions under retention  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get file versions under retention  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file versions under retention  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get file versions under retention  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get file versions under retention  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get file versions under retention  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get file versions under retention  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get file versions under retention  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get files under retention  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get files under retention  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get files under retention  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get files under retention  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get files under retention  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get files under retention  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get files under retention  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get files under retention  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get files under retention  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get files under retention  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get files under retention  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get files under retention  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get files under retention  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get files under retention  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get files under retention  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get files under retention  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get files under retention  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get files under retention  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get files under retention  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get files under retention  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get files under retention  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get files under retention  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get files under retention  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get files under retention  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get files under retention  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get files under retention  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get files under retention  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get files under retention  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get files under retention  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get files under retention  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get files under retention  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get files under retention  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get files under retention  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get files under retention  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get files under retention  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get files under retention  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get files under retention  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get files under retention  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get files under retention  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get files under retention  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get files under retention  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get files under retention  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get files under retention  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get files under retention  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get files under retention  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get files under retention  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get files under retention  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get files under retention  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get files under retention  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get files under retention  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get files under retention  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get files under retention  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get files under retention  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get files under retention  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get files under retention  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get files under retention  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get files under retention  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get files under retention  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get files under retention  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get files under retention  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get folder information  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
Get folder information  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to file  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get folder information  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to folder  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get folder information  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
Get folder information  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to web link  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get folder information  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get folder information  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
Get folder information  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get folder information  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
Get folder information  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get folder information  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Create collaboration  [ label = "allowed_invitee_roles : role"] type: string, parameter: body
Get folder information  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get folder information  ->  Create folder  [ label = "sync_state : sync_state"] type: string, parameter: body
Get folder information  ->  Create folder  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get folder information  ->  Create folder  [ label = "access : access"] type: string, parameter: body
Get folder information  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get folder information  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get folder information  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Get folder information  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
Get folder information  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Get folder information  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
Get folder information  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get folder information  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get folder information  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get folder information  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get folder information  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get folder information  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Get folder information  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get folder information  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get folder information  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get folder information  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get folder information  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get folder information  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get folder information  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get folder information  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
Get folder information  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get folder information  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get folder information  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get folder information  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Find metadata template by instance ID  [ label = "$id : metadata_instance_id"] type: string, parameter: query
Get folder information  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get folder information  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get folder information  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get folder information  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get folder information  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get folder information  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get folder information  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get folder information  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get folder information  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get folder information  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get folder information  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get folder information  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
Get folder information  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get folder information  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get folder information  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
Get folder information  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get folder information  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get folder information  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get folder information  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
Get folder information  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get folder information  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get folder information  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get folder information  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get folder information  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get folder information  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get folder information  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get folder information  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get folder information  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get folder information  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get folder information  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get folder information  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get folder information  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get folder information  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get folder information  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get folder information  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get folder information  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Update collaboration  [ label = "allowed_invitee_roles : role"] type: string, parameter: body
Get folder information  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get folder information  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "allowed_shared_link_access_levels : can_download"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "tags : tags"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "access : access"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
Get folder information  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
Get folder information  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
Get folder information  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update folder  [ label = "access : access"] type: string, parameter: body
Get folder information  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update folder  [ label = "description : description"] type: string, parameter: body
Get folder information  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update folder  [ label = "sync_state : sync_state"] type: string, parameter: body
Get folder information  ->  Update folder  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get folder information  ->  Update folder  [ label = "tags : tags"] type: string, parameter: body
Get folder information  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get folder information  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get folder information  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get folder information  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
Get folder information  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get folder information  ->  Update shared link on file  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get folder information  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
Get folder information  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get folder information  ->  Update shared link on folder  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get folder information  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
Get folder information  ->  Update shared link on web link  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get folder information  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get folder information  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Get folder information  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get folder information  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get folder information  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get folder information  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get folder information  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get folder information  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get folder information  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get folder information  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get folder information  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get folder information  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get folder information  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
Get folder information  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update web link  [ label = "access : access"] type: string, parameter: body
Get folder information  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get folder information  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get folder information  ->  Update web link  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get folder information  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get folder information  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get group  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get group  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get group  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get group  ->  Create group  [ label = "member_viewability_level : description"] type: string, parameter: body
Get group  ->  Create group  [ label = "member_viewability_level : member_viewability_level"] type: string, parameter: body
Get group  ->  Create group  [ label = "invitability_level : member_viewability_level"] type: string, parameter: body
Get group  ->  Create group  [ label = "external_sync_identifier : external_sync_identifier"] type: string, parameter: body
Get group  ->  Create group  [ label = "invitability_level : description"] type: string, parameter: body
Get group  ->  Create group  [ label = "provenance : provenance"] type: string, parameter: body
Get group  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get group  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get group  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get group  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get group  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get group  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get group  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get group  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get group  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get group  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get group  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get group  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get group  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get group  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get group  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get group  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get group  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get group  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get group  ->  Update group  [ label = "invitability_level : description"] type: string, parameter: body
Get group  ->  Update group  [ label = "external_sync_identifier : external_sync_identifier"] type: string, parameter: body
Get group  ->  Update group  [ label = "member_viewability_level : description"] type: string, parameter: body
Get group  ->  Update group  [ label = "invitability_level : member_viewability_level"] type: string, parameter: body
Get group  ->  Update group  [ label = "provenance : provenance"] type: string, parameter: body
Get group  ->  Update group  [ label = "member_viewability_level : member_viewability_level"] type: string, parameter: body
Get group  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get group  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get group  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get group  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Add user to group  [ label = "role : role"] type: string, parameter: body
Get group membership  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get group membership  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get group membership  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get group membership  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get group membership  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get group membership  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get group membership  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get group membership  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get group membership  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get group membership  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get group membership  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get group membership  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get group membership  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get group membership  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get group membership  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get group membership  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get group membership  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get group membership  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get group membership  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get group membership  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Update group membership  [ label = "role : role"] type: string, parameter: body
Get group membership  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get group membership  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get group membership  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get group membership  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get group membership  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get group membership  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get group membership  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get group membership  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get group membership  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get group membership  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to file  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to file  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to folder  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to folder  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to web link  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Add shared link to web link  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get legal hold policy  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Copy file request  [ label = "status : status"] type: string, parameter: body
Get legal hold policy  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get legal hold policy  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Create legal hold policy  [ label = "filter_ended_at : filter_started_at"] type: string, parameter: body
Get legal hold policy  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get legal hold policy  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get legal hold policy  ->  Create legal hold policy  [ label = "deleted_at : filter_started_at"] type: string, parameter: body
Get legal hold policy  ->  Create legal hold policy  [ label = "filter_started_at : filter_started_at"] type: string, parameter: body
Get legal hold policy  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get legal hold policy  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get legal hold policy  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get legal hold policy  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get legal hold policy  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get legal hold policy  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get legal hold policy  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get legal hold policy  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Create task  [ label = "deleted_at : due_at"] type: string, parameter: body
Get legal hold policy  ->  Create task  [ label = "filter_started_at : due_at"] type: string, parameter: body
Get legal hold policy  ->  Create task  [ label = "filter_ended_at : due_at"] type: string, parameter: body
Get legal hold policy  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get legal hold policy  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get legal hold policy  ->  Create user  [ label = "status : status"] type: string, parameter: body
Get legal hold policy  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get legal hold policy  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get legal hold policy  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Update file  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Update file  [ label = "deleted_at : disposition_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "filter_started_at : expires_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "filter_ended_at : disposition_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "deleted_at : expires_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "filter_started_at : disposition_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "filter_ended_at : expires_at"] type: string, parameter: body
Get legal hold policy  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update file request  [ label = "status : status"] type: string, parameter: body
Get legal hold policy  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update folder  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update folder  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get legal hold policy  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get legal hold policy  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get legal hold policy  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get legal hold policy  ->  Update shared link on file  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on file  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on folder  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on folder  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on web link  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update shared link on web link  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update task  [ label = "deleted_at : due_at"] type: string, parameter: body
Get legal hold policy  ->  Update task  [ label = "filter_ended_at : due_at"] type: string, parameter: body
Get legal hold policy  ->  Update task  [ label = "filter_started_at : due_at"] type: string, parameter: body
Get legal hold policy  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get legal hold policy  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get legal hold policy  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get legal hold policy  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get legal hold policy  ->  Update user  [ label = "status : status"] type: string, parameter: body
Get legal hold policy  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update web link  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy  ->  Update web link  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get legal hold policy assignment  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
Get legal hold policy assignment  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Create folder  [ label = "access : access"] type: string, parameter: body
Get legal hold policy assignment  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create legal hold policy  [ label = "assigned_at : filter_started_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create legal hold policy  [ label = "deleted_at : filter_started_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get legal hold policy assignment  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get legal hold policy assignment  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get legal hold policy assignment  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get legal hold policy assignment  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get legal hold policy assignment  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Create task  [ label = "assigned_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create task  [ label = "deleted_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get legal hold policy assignment  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
Get legal hold policy assignment  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get legal hold policy assignment  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get legal hold policy assignment  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get legal hold policy assignment  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get legal hold policy assignment  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get legal hold policy assignment  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get legal hold policy assignment  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get legal hold policy assignment  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get legal hold policy assignment  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get legal hold policy assignment  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get legal hold policy assignment  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get legal hold policy assignment  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get legal hold policy assignment  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get legal hold policy assignment  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get legal hold policy assignment  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get legal hold policy assignment  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update file  [ label = "access : access"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "assigned_at : expires_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "deleted_at : expires_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "assigned_at : disposition_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "deleted_at : disposition_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
Get legal hold policy assignment  ->  Update folder  [ label = "access : access"] type: string, parameter: body
Get legal hold policy assignment  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get legal hold policy assignment  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get legal hold policy assignment  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get legal hold policy assignment  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update task  [ label = "deleted_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update task  [ label = "assigned_at : due_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get legal hold policy assignment  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get legal hold policy assignment  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
Get legal hold policy assignment  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get legal hold policy assignment  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update web link  [ label = "access : access"] type: string, parameter: body
Get legal hold policy assignment  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get legal hold policy assignment  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get legal hold policy assignment  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get metadata cascade policy  ->  Add initial classifications  [ label = "type : scope"] type: string, parameter: body
Get metadata cascade policy  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get metadata cascade policy  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get metadata cascade policy  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get metadata cascade policy  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get metadata cascade policy  ->  Create metadata cascade policy  [ label = "id : folder_id"] type: string, parameter: body
Get metadata cascade policy  ->  Create metadata cascade policy  [ label = "type : scope"] type: string, parameter: body
Get metadata cascade policy  ->  Create metadata cascade policy  [ label = "templateKey : templateKey"] type: string, parameter: body
Get metadata cascade policy  ->  Create metadata instance on file  [ label = "scope : scope"] type: string, parameter: path
Get metadata cascade policy  ->  Create metadata instance on folder  [ label = "scope : scope"] type: string, parameter: path
Get metadata cascade policy  ->  Create metadata template  [ label = "type : scope"] type: string, parameter: body
Get metadata cascade policy  ->  Create metadata template  [ label = "templateKey : templateKey"] type: string, parameter: body
Get metadata cascade policy  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get metadata cascade policy  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get metadata cascade policy  ->  Force-apply metadata cascade policy to folder  [ label = "id : metadata_cascade_policy_id"] type: string, parameter: path
Get metadata cascade policy  ->  Get metadata instance on file  [ label = "scope : scope"] type: string, parameter: path
Get metadata cascade policy  ->  Get metadata instance on folder  [ label = "scope : scope"] type: string, parameter: path
Get metadata cascade policy  ->  Get metadata template by name  [ label = "scope : scope"] type: string, parameter: path
Get metadata cascade policy  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get metadata cascade policy  ->  List metadata query indices  [ label = "scope : scope"] type: string, parameter: query
Get metadata cascade policy  ->  Remove metadata cascade policy  [ label = "id : metadata_cascade_policy_id"] type: string, parameter: path
Get metadata cascade policy  ->  Remove metadata instance from file  [ label = "scope : scope"] type: string, parameter: path
Get metadata cascade policy  ->  Remove metadata instance from folder  [ label = "scope : scope"] type: string, parameter: path
Get metadata cascade policy  ->  Remove metadata template  [ label = "scope : scope"] type: string, parameter: path
Get metadata cascade policy  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get metadata cascade policy  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get metadata cascade policy  ->  Update metadata instance on file  [ label = "scope : scope"] type: string, parameter: path
Get metadata cascade policy  ->  Update metadata instance on folder  [ label = "scope : scope"] type: string, parameter: path
Get metadata cascade policy  ->  Update metadata template  [ label = "scope : scope"] type: string, parameter: path
Get metadata instance on file  ->  Find metadata template by instance ID  [ label = "$id : metadata_instance_id"] type: string, parameter: query
Get metadata instance on folder  ->  Find metadata template by instance ID  [ label = "$id : metadata_instance_id"] type: string, parameter: query
Get metadata template by ID  ->  Assign retention policy  [ label = "type : type"] type: string, parameter: body
Get metadata template by ID  ->  Create metadata cascade policy  [ label = "templateKey : templateKey"] type: string, parameter: body
Get metadata template by ID  ->  Create metadata template  [ label = "key : key"] type: string, parameter: body
Get metadata template by ID  ->  Create metadata template  [ label = "templateKey : templateKey"] type: string, parameter: body
Get metadata template by ID  ->  Create metadata template  [ label = "type : type"] type: string, parameter: body
Get metadata template by ID  ->  Create metadata template  [ label = "displayName : displayName"] type: string, parameter: body
Get metadata template by ID  ->  Create metadata template  [ label = "description : description"] type: string, parameter: body
Get metadata template by ID  ->  List retention policy assignments  [ label = "type : type"] type: string, parameter: query
Get metadata template by name  ->  Assign retention policy  [ label = "type : type"] type: string, parameter: body
Get metadata template by name  ->  Create metadata cascade policy  [ label = "templateKey : templateKey"] type: string, parameter: body
Get metadata template by name  ->  Create metadata template  [ label = "key : key"] type: string, parameter: body
Get metadata template by name  ->  Create metadata template  [ label = "displayName : displayName"] type: string, parameter: body
Get metadata template by name  ->  Create metadata template  [ label = "templateKey : templateKey"] type: string, parameter: body
Get metadata template by name  ->  Create metadata template  [ label = "description : description"] type: string, parameter: body
Get metadata template by name  ->  Create metadata template  [ label = "type : type"] type: string, parameter: body
Get metadata template by name  ->  List retention policy assignments  [ label = "type : type"] type: string, parameter: query
Get retention on file  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get retention on file  ->  Add shared link to file  [ label = "applied_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Add shared link to file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Add shared link to folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Add shared link to folder  [ label = "applied_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Add shared link to web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Add shared link to web link  [ label = "applied_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention on file  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get retention on file  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get retention on file  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get retention on file  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get retention on file  ->  Create legal hold policy  [ label = "applied_at : filter_started_at"] type: string, parameter: body
Get retention on file  ->  Create legal hold policy  [ label = "disposition_at : filter_started_at"] type: string, parameter: body
Get retention on file  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Create retention policy  [ label = "disposition_action : disposition_action"] type: string, parameter: body
Get retention on file  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Create retention policy  [ label = "policy_name : policy_name"] type: string, parameter: body
Get retention on file  ->  Create retention policy  [ label = "retention_length : retention_length"] type: int, parameter: body
Get retention on file  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get retention on file  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get retention on file  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get retention on file  ->  Create task  [ label = "applied_at : due_at"] type: string, parameter: body
Get retention on file  ->  Create task  [ label = "disposition_at : due_at"] type: string, parameter: body
Get retention on file  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get retention on file  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get retention on file  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get retention on file  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get retention on file  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get retention on file  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get retention on file  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get retention on file  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention on file  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get retention on file  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get retention on file  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention on file  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get retention on file  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get retention on file  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention on file  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get retention on file  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get retention on file  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get retention on file  ->  List file version retentions  [ label = "disposition_action : disposition_action"] type: string, parameter: query
Get retention on file  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get retention on file  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get retention on file  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get retention on file  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get retention on file  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get retention on file  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get retention on file  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention on file  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get retention on file  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get retention on file  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get retention on file  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention on file  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get retention on file  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention on file  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention on file  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get retention on file  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get retention on file  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get retention on file  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get retention on file  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get retention on file  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get retention on file  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get retention on file  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get retention on file  ->  Update file  [ label = "applied_at : disposition_at"] type: string, parameter: body
Get retention on file  ->  Update file  [ label = "applied_at : expires_at"] type: string, parameter: body
Get retention on file  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get retention on file  ->  Update file  [ label = "disposition_at : disposition_at"] type: string, parameter: body
Get retention on file  ->  Update file  [ label = "disposition_at : expires_at"] type: string, parameter: body
Get retention on file  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Update file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Update file  [ label = "applied_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Update folder  [ label = "applied_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Update folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get retention on file  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Update retention policy  [ label = "retention_length : retention_length"] type: int, parameter: body
Get retention on file  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get retention on file  ->  Update retention policy  [ label = "policy_name : policy_name"] type: string, parameter: body
Get retention on file  ->  Update retention policy  [ label = "disposition_action : disposition_action"] type: string, parameter: body
Get retention on file  ->  Update shared link on file  [ label = "applied_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get retention on file  ->  Update shared link on file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention on file  ->  Update shared link on folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Update shared link on folder  [ label = "applied_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Update shared link on web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Update shared link on web link  [ label = "applied_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention on file  ->  Update task  [ label = "disposition_at : due_at"] type: string, parameter: body
Get retention on file  ->  Update task  [ label = "applied_at : due_at"] type: string, parameter: body
Get retention on file  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get retention on file  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get retention on file  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get retention on file  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention on file  ->  Update web link  [ label = "applied_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Update web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get retention on file  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get retention on file  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get retention policy  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get retention policy  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Copy file request  [ label = "status : status"] type: string, parameter: body
Get retention policy  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get retention policy  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get retention policy  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get retention policy  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get retention policy  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Create retention policy  [ label = "disposition_action : disposition_action"] type: string, parameter: body
Get retention policy  ->  Create retention policy  [ label = "retention_length : retention_length"] type: int, parameter: body
Get retention policy  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get retention policy  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get retention policy  ->  Create retention policy  [ label = "description : description"] type: string, parameter: body
Get retention policy  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get retention policy  ->  Create retention policy  [ label = "policy_name : policy_name"] type: string, parameter: body
Get retention policy  ->  Create retention policy  [ label = "policy_type : policy_type"] type: string, parameter: body
Get retention policy  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get retention policy  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get retention policy  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get retention policy  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get retention policy  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get retention policy  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get retention policy  ->  Create user  [ label = "status : status"] type: string, parameter: body
Get retention policy  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get retention policy  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get retention policy  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get retention policy  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get retention policy  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get retention policy  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get retention policy  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get retention policy  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get retention policy  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get retention policy  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get retention policy  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get retention policy  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  List file version retentions  [ label = "disposition_action : disposition_action"] type: string, parameter: query
Get retention policy  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get retention policy  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  List retention policies  [ label = "policy_type : policy_type"] type: string, parameter: query
Get retention policy  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get retention policy  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get retention policy  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get retention policy  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get retention policy  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get retention policy  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get retention policy  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get retention policy  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get retention policy  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get retention policy  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get retention policy  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get retention policy  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get retention policy  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get retention policy  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get retention policy  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get retention policy  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get retention policy  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Update file request  [ label = "status : status"] type: string, parameter: body
Get retention policy  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get retention policy  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get retention policy  ->  Update retention policy  [ label = "retention_type : retention_type"] type: string, parameter: body
Get retention policy  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get retention policy  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get retention policy  ->  Update retention policy  [ label = "policy_name : policy_name"] type: string, parameter: body
Get retention policy  ->  Update retention policy  [ label = "description : description"] type: string, parameter: body
Get retention policy  ->  Update retention policy  [ label = "disposition_action : disposition_action"] type: string, parameter: body
Get retention policy  ->  Update retention policy  [ label = "retention_length : retention_length"] type: int, parameter: body
Get retention policy  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get retention policy  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get retention policy  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get retention policy  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get retention policy  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get retention policy  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get retention policy  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get retention policy  ->  Update user  [ label = "status : status"] type: string, parameter: body
Get retention policy  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get retention policy  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get retention policy assignment  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Add shared link to file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get retention policy assignment  ->  Add shared link to folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get retention policy assignment  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy assignment  ->  Add shared link to web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get retention policy assignment  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Assign retention policy  [ label = "type : type"] type: string, parameter: body
Get retention policy assignment  ->  Assign retention policy  [ label = "value : value"] type: string, parameter: body
Get retention policy assignment  ->  Assign retention policy  [ label = "field : field"] type: string, parameter: body
Get retention policy assignment  ->  Assign retention policy  [ label = "start_date_field : start_date_field"] type: string, parameter: body
Get retention policy assignment  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get retention policy assignment  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get retention policy assignment  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get retention policy assignment  ->  Create legal hold policy  [ label = "assigned_at : filter_started_at"] type: string, parameter: body
Get retention policy assignment  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Create retention policy  [ label = "retention_length : retention_length"] type: int, parameter: body
Get retention policy assignment  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get retention policy assignment  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get retention policy assignment  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get retention policy assignment  ->  Create retention policy  [ label = "policy_name : policy_name"] type: string, parameter: body
Get retention policy assignment  ->  Create retention policy  [ label = "disposition_action : disposition_action"] type: string, parameter: body
Get retention policy assignment  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get retention policy assignment  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get retention policy assignment  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Create task  [ label = "assigned_at : due_at"] type: string, parameter: body
Get retention policy assignment  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get retention policy assignment  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get retention policy assignment  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get retention policy assignment  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get retention policy assignment  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get retention policy assignment  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get retention policy assignment  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get retention policy assignment  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy assignment  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get retention policy assignment  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get retention policy assignment  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy assignment  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get retention policy assignment  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get retention policy assignment  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy assignment  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get retention policy assignment  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get retention policy assignment  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  List file version retentions  [ label = "disposition_action : disposition_action"] type: string, parameter: query
Get retention policy assignment  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get retention policy assignment  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  List retention policy assignments  [ label = "type : type"] type: string, parameter: query
Get retention policy assignment  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get retention policy assignment  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get retention policy assignment  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get retention policy assignment  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get retention policy assignment  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get retention policy assignment  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy assignment  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy assignment  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy assignment  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get retention policy assignment  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get retention policy assignment  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get retention policy assignment  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get retention policy assignment  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Update file  [ label = "assigned_at : disposition_at"] type: string, parameter: body
Get retention policy assignment  ->  Update file  [ label = "assigned_at : expires_at"] type: string, parameter: body
Get retention policy assignment  ->  Update file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get retention policy assignment  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Update folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get retention policy assignment  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get retention policy assignment  ->  Update retention policy  [ label = "retention_length : retention_length"] type: int, parameter: body
Get retention policy assignment  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get retention policy assignment  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get retention policy assignment  ->  Update retention policy  [ label = "disposition_action : disposition_action"] type: string, parameter: body
Get retention policy assignment  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get retention policy assignment  ->  Update retention policy  [ label = "policy_name : policy_name"] type: string, parameter: body
Get retention policy assignment  ->  Update shared link on file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get retention policy assignment  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get retention policy assignment  ->  Update shared link on folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get retention policy assignment  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get retention policy assignment  ->  Update shared link on web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get retention policy assignment  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy assignment  ->  Update task  [ label = "assigned_at : due_at"] type: string, parameter: body
Get retention policy assignment  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get retention policy assignment  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get retention policy assignment  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get retention policy assignment  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get retention policy assignment  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get retention policy assignment  ->  Update web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get retention policy assignment  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get retention policy assignment  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get shared link for file  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to file  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
Get shared link for file  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to file  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
Get shared link for file  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to folder  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to folder  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for file  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
Get shared link for file  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to web link  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to web link  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get shared link for file  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
Get shared link for file  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get shared link for file  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Create collaboration  [ label = "allowed_invitee_roles : role"] type: string, parameter: body
Get shared link for file  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get shared link for file  ->  Create folder  [ label = "access : access"] type: string, parameter: body
Get shared link for file  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Get shared link for file  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get shared link for file  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Get shared link for file  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
Get shared link for file  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
Get shared link for file  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get shared link for file  ->  Create legal hold policy  [ label = "disposition_at : filter_started_at"] type: string, parameter: body
Get shared link for file  ->  Create legal hold policy  [ label = "expires_at : filter_started_at"] type: string, parameter: body
Get shared link for file  ->  Create legal hold policy  [ label = "expired_at : filter_started_at"] type: string, parameter: body
Get shared link for file  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get shared link for file  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get shared link for file  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get shared link for file  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get shared link for file  ->  Create sign request  [ label = "version_number : etag"] type: int, parameter: body
Get shared link for file  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get shared link for file  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Create task  [ label = "expires_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Create task  [ label = "expired_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Create task  [ label = "disposition_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get shared link for file  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get shared link for file  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
Get shared link for file  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get shared link for file  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get shared link for file  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get shared link for file  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Download file  [ label = "access_token : access_token"] type: string, parameter: query
Get shared link for file  ->  Find metadata template by instance ID  [ label = "$id : metadata_instance_id"] type: string, parameter: query
Get shared link for file  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get shared link for file  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Get file thumbnail  [ label = "representation : extension"] type: string, parameter: path
Get shared link for file  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for file  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get shared link for file  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get shared link for file  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for file  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get shared link for file  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get shared link for file  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for file  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get shared link for file  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get shared link for file  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get shared link for file  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get shared link for file  ->  List file version retentions  [ label = "version_number : file_version_id"] type: int, parameter: query
Get shared link for file  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get shared link for file  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get shared link for file  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get shared link for file  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get shared link for file  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get shared link for file  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get shared link for file  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get shared link for file  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for file  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get shared link for file  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get shared link for file  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for file  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get shared link for file  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for file  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for file  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get shared link for file  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get shared link for file  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get shared link for file  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get shared link for file  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get shared link for file  ->  Update all Box Skill cards on file  [ label = "state : status"] type: string, parameter: body
Get shared link for file  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get shared link for file  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Update collaboration  [ label = "allowed_invitee_roles : role"] type: string, parameter: body
Get shared link for file  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get shared link for file  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "expired_at : expires_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "disposition_at : disposition_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "expires_at : expires_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "access : access"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "type : access"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Update file  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "expires_at : disposition_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "disposition_at : expires_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "expired_at : disposition_at"] type: string, parameter: body
Get shared link for file  ->  Update file  [ label = "tags : tags"] type: string, parameter: body
Get shared link for file  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
Get shared link for file  ->  Update folder  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update folder  [ label = "tags : tags"] type: string, parameter: body
Get shared link for file  ->  Update folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update folder  [ label = "access : access"] type: string, parameter: body
Get shared link for file  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update folder  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get shared link for file  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get shared link for file  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get shared link for file  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
Get shared link for file  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on file  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for file  ->  Update shared link on file  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
Get shared link for file  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on folder  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on folder  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for file  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on web link  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
Get shared link for file  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for file  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update shared link on web link  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Update task  [ label = "disposition_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Update task  [ label = "expires_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get shared link for file  ->  Update task  [ label = "expired_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get shared link for file  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get shared link for file  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get shared link for file  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
Get shared link for file  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get shared link for file  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get shared link for file  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for file  ->  Update web link  [ label = "expired_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update web link  [ label = "access : access"] type: string, parameter: body
Get shared link for file  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update web link  [ label = "expires_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
Get shared link for file  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get shared link for file  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get shared link for folder  ->  Add shared link to file  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to folder  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for folder  ->  Add shared link to web link  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
Get shared link for folder  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get shared link for folder  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
Get shared link for folder  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get shared link for folder  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Create collaboration  [ label = "allowed_invitee_roles : role"] type: string, parameter: body
Get shared link for folder  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get shared link for folder  ->  Create folder  [ label = "access : access"] type: string, parameter: body
Get shared link for folder  ->  Create folder  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get shared link for folder  ->  Create folder  [ label = "sync_state : sync_state"] type: string, parameter: body
Get shared link for folder  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get shared link for folder  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Get shared link for folder  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Get shared link for folder  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
Get shared link for folder  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
Get shared link for folder  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get shared link for folder  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get shared link for folder  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get shared link for folder  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get shared link for folder  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get shared link for folder  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get shared link for folder  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get shared link for folder  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get shared link for folder  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get shared link for folder  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Get shared link for folder  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get shared link for folder  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get shared link for folder  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get shared link for folder  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
Get shared link for folder  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get shared link for folder  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get shared link for folder  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get shared link for folder  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get shared link for folder  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Find metadata template by instance ID  [ label = "$id : metadata_instance_id"] type: string, parameter: query
Get shared link for folder  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get shared link for folder  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
Get shared link for folder  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for folder  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get shared link for folder  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get shared link for folder  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for folder  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get shared link for folder  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get shared link for folder  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for folder  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get shared link for folder  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get shared link for folder  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get shared link for folder  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
Get shared link for folder  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get shared link for folder  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get shared link for folder  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
Get shared link for folder  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get shared link for folder  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get shared link for folder  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get shared link for folder  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
Get shared link for folder  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get shared link for folder  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get shared link for folder  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get shared link for folder  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for folder  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get shared link for folder  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get shared link for folder  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for folder  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get shared link for folder  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for folder  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for folder  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get shared link for folder  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get shared link for folder  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get shared link for folder  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get shared link for folder  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get shared link for folder  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get shared link for folder  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Update collaboration  [ label = "allowed_invitee_roles : role"] type: string, parameter: body
Get shared link for folder  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get shared link for folder  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "allowed_shared_link_access_levels : can_download"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "tags : tags"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "access : access"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
Get shared link for folder  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update folder  [ label = "sync_state : sync_state"] type: string, parameter: body
Get shared link for folder  ->  Update folder  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get shared link for folder  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update folder  [ label = "access : access"] type: string, parameter: body
Get shared link for folder  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update folder  [ label = "tags : tags"] type: string, parameter: body
Get shared link for folder  ->  Update folder  [ label = "description : description"] type: string, parameter: body
Get shared link for folder  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get shared link for folder  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get shared link for folder  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for folder  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on file  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on folder  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for folder  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for folder  ->  Update shared link on web link  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Get shared link for folder  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get shared link for folder  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get shared link for folder  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get shared link for folder  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get shared link for folder  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get shared link for folder  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get shared link for folder  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get shared link for folder  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get shared link for folder  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get shared link for folder  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get shared link for folder  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
Get shared link for folder  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for folder  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update web link  [ label = "allowed_shared_link_access_levels : access"] type: string, parameter: body
Get shared link for folder  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update web link  [ label = "access : access"] type: string, parameter: body
Get shared link for folder  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get shared link for folder  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get shared link for folder  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get shared link for web link  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for web link  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
Get shared link for web link  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
Get shared link for web link  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get shared link for web link  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get shared link for web link  ->  Create folder  [ label = "access : access"] type: string, parameter: body
Get shared link for web link  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get shared link for web link  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Get shared link for web link  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get shared link for web link  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Get shared link for web link  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get shared link for web link  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get shared link for web link  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get shared link for web link  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get shared link for web link  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get shared link for web link  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get shared link for web link  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get shared link for web link  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get shared link for web link  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Get shared link for web link  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get shared link for web link  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
Get shared link for web link  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get shared link for web link  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get shared link for web link  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get shared link for web link  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get shared link for web link  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get shared link for web link  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get shared link for web link  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get shared link for web link  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for web link  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get shared link for web link  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get shared link for web link  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for web link  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get shared link for web link  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get shared link for web link  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get shared link for web link  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get shared link for web link  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get shared link for web link  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get shared link for web link  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get shared link for web link  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get shared link for web link  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get shared link for web link  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get shared link for web link  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for web link  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get shared link for web link  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get shared link for web link  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for web link  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get shared link for web link  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for web link  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for web link  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get shared link for web link  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get shared link for web link  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get shared link for web link  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get shared link for web link  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get shared link for web link  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Get shared link for web link  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Get shared link for web link  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get shared link for web link  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get shared link for web link  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
Get shared link for web link  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update file  [ label = "access : access"] type: string, parameter: body
Get shared link for web link  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get shared link for web link  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Get shared link for web link  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Get shared link for web link  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get shared link for web link  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
Get shared link for web link  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update folder  [ label = "access : access"] type: string, parameter: body
Get shared link for web link  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get shared link for web link  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get shared link for web link  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get shared link for web link  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get shared link for web link  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get shared link for web link  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get shared link for web link  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for web link  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
Get shared link for web link  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get shared link for web link  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get shared link for web link  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get shared link for web link  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Get shared link for web link  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get shared link for web link  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get shared link for web link  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get shared link for web link  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get shared link for web link  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
Get shared link for web link  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get shared link for web link  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update web link  [ label = "access : access"] type: string, parameter: body
Get shared link for web link  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get shared link for web link  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get shared link for web link  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get shield information barrier report by ID  ->  Add changed status of shield information barrier with specified ID  [ label = "status : status"] type: string, parameter: body
Get shield information barrier report by ID  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier report by ID  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get shield information barrier report by ID  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier report by ID  ->  Create shield information barrier  [ label = "updated_at : updated_at"] type: string, parameter: body
Get shield information barrier report by ID  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Create shield information barrier  [ label = "updated_at : enabled_at"] type: string, parameter: body
Get shield information barrier report by ID  ->  Create shield information barrier  [ label = "created_at : created_at"] type: string, parameter: body
Get shield information barrier report by ID  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get shield information barrier report by ID  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Create shield information barrier report  [ label = "type : type"] type: string, parameter: body
Get shield information barrier report by ID  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Create shield information barrier segment  [ label = "type : type"] type: string, parameter: body
Get shield information barrier report by ID  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get shield information barrier report by ID  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Create shield information barrier segment restriction  [ label = "type : type"] type: string, parameter: body
Get shield information barrier report by ID  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get shield information barrier report by ID  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get shield information barrier report by ID  ->  List pending collaborations  [ label = "status : status"] type: string, parameter: query
Get shield information barrier report by ID  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get shield information barrier report by ID  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier report by ID  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get shield information barrier report by ID  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Create shield information barrier  [ label = "updated_at : enabled_at"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Create shield information barrier  [ label = "updated_at : updated_at"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Create shield information barrier  [ label = "created_at : created_at"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Create shield information barrier report  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Create shield information barrier segment  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Create shield information barrier segment restriction  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get shield information barrier segment member by ID  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment member by ID  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment member by ID  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Add changed status of shield information barrier with specified ID  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Create shield information barrier  [ label = "updated_at : enabled_at"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Create shield information barrier  [ label = "created_at : created_at"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Create shield information barrier  [ label = "updated_at : updated_at"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Create shield information barrier report  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Create shield information barrier segment  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Create shield information barrier segment restriction  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Get shield information barrier with specified ID  [ label = "id : shield_information_barrier_id"] type: int, parameter: path
Get shield information barrier segment restriction by ID  ->  List shield information barrier reports  [ label = "id : shield_information_barrier_id"] type: int, parameter: query
Get shield information barrier segment restriction by ID  ->  List shield information barrier segments  [ label = "id : shield_information_barrier_id"] type: int, parameter: query
Get shield information barrier segment restriction by ID  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get shield information barrier segment restriction by ID  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment restriction by ID  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment restriction by ID  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier  [ label = "updated_at : updated_at"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier  [ label = "created_at : created_at"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier  [ label = "updated_at : enabled_at"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier report  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier segment  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier segment  [ label = "name : name"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Create shield information barrier segment restriction  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get shield information barrier segment with specified ID  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get shield information barrier segment with specified ID  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Update shield information barrier segment with specified ID  [ label = "name : name"] type: string, parameter: body
Get shield information barrier segment with specified ID  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Add changed status of shield information barrier with specified ID  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Add initial classifications  [ label = "type : scope"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Create metadata cascade policy  [ label = "type : scope"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create metadata template  [ label = "type : scope"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier  [ label = "updated_at : enabled_at"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier  [ label = "created_at : created_at"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier  [ label = "status : status"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier  [ label = "updated_at : updated_at"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier  [ label = "enabled_at : enabled_at"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier  [ label = "enabled_at : updated_at"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier report  [ label = "type : type"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier segment  [ label = "type : type"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Create shield information barrier segment restriction  [ label = "type : type"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get shield information barrier with specified ID  ->  List shield information barrier reports  [ label = "id : shield_information_barrier_id"] type: int, parameter: query
Get shield information barrier with specified ID  ->  List shield information barrier segments  [ label = "id : shield_information_barrier_id"] type: int, parameter: query
Get shield information barrier with specified ID  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get shield information barrier with specified ID  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get shield information barrier with specified ID  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get shield information barrier with specified ID  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get sign request by ID  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get sign request by ID  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get sign request by ID  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get sign request by ID  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Copy file request  [ label = "external_id : file_request_id"] type: int, parameter: path
Get sign request by ID  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get sign request by ID  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Create sign request  [ label = "embed_url : redirect_url"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "auto_expire_at : date_value"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "role : role"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "email_message : email_message"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "verification_phone_number : verification_phone_number"] type: int, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "date_value : date_value"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "text_value : text_value"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "embed_url_external_user_id : embed_url_external_user_id"] type: int, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "password : password"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "declined_redirect_url : declined_redirect_url"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "external_id : external_id"] type: int, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "type : text_value"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "finalized_at : date_value"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "email : email"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "document_tag_id : document_tag_id"] type: int, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "template_id : template_id"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "email_subject : email_subject"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "embed_url_external_user_id : document_tag_id"] type: int, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "redirect_url : redirect_url"] type: string, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "document_tag_id : embed_url_external_user_id"] type: int, parameter: body
Get sign request by ID  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get sign request by ID  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Delete file request  [ label = "external_id : file_request_id"] type: int, parameter: path
Get sign request by ID  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get sign request by ID  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get sign request by ID  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get sign request by ID  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Get collaboration  [ label = "document_tag_id : collaboration_id"] type: int, parameter: path
Get sign request by ID  ->  Get collaboration  [ label = "embed_url_external_user_id : collaboration_id"] type: int, parameter: path
Get sign request by ID  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get sign request by ID  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Get file request  [ label = "external_id : file_request_id"] type: int, parameter: path
Get sign request by ID  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Get file version  [ label = "document_tag_id : file_version_id"] type: int, parameter: path
Get sign request by ID  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Get file version  [ label = "embed_url_external_user_id : file_version_id"] type: int, parameter: path
Get sign request by ID  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get sign request by ID  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get sign request by ID  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get sign request by ID  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get sign request by ID  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get sign request by ID  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get sign request by ID  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get sign request by ID  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get sign request by ID  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get sign request by ID  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get sign request by ID  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get sign request by ID  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get sign request by ID  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get sign request by ID  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get sign request by ID  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  List trashed items  [ label = "name : sort"] type: string, parameter: query
Get sign request by ID  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get sign request by ID  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get sign request by ID  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get sign request by ID  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get sign request by ID  ->  Preflight check before upload  [ label = "external_id : id"] type: int, parameter: body
Get sign request by ID  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Remove collaboration  [ label = "document_tag_id : collaboration_id"] type: int, parameter: path
Get sign request by ID  ->  Remove collaboration  [ label = "embed_url_external_user_id : collaboration_id"] type: int, parameter: path
Get sign request by ID  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get sign request by ID  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get sign request by ID  ->  Remove file version  [ label = "embed_url_external_user_id : file_version_id"] type: int, parameter: path
Get sign request by ID  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Remove file version  [ label = "document_tag_id : file_version_id"] type: int, parameter: path
Get sign request by ID  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get sign request by ID  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get sign request by ID  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get sign request by ID  ->  Restore file  [ label = "external_id : id"] type: int, parameter: body
Get sign request by ID  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Restore file version  [ label = "document_tag_id : file_version_id"] type: int, parameter: path
Get sign request by ID  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Restore file version  [ label = "embed_url_external_user_id : file_version_id"] type: int, parameter: path
Get sign request by ID  ->  Restore folder  [ label = "external_id : id"] type: int, parameter: body
Get sign request by ID  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Restore web link  [ label = "external_id : id"] type: int, parameter: body
Get sign request by ID  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get sign request by ID  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get sign request by ID  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get sign request by ID  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get sign request by ID  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get sign request by ID  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get sign request by ID  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Update collaboration  [ label = "document_tag_id : collaboration_id"] type: int, parameter: path
Get sign request by ID  ->  Update collaboration  [ label = "embed_url_external_user_id : collaboration_id"] type: int, parameter: path
Get sign request by ID  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get sign request by ID  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Update file  [ label = "external_id : id"] type: int, parameter: body
Get sign request by ID  ->  Update file request  [ label = "external_id : file_request_id"] type: int, parameter: path
Get sign request by ID  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get sign request by ID  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get sign request by ID  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get sign request by ID  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get sign request by ID  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get sign request by ID  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get sign request by ID  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get sign request by ID  ->  Update web link  [ label = "external_id : id"] type: int, parameter: body
Get sign request by ID  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get sign request by ID  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get storage policy  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get storage policy  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get storage policy  ->  Update storage policy assignment  [ label = "type : type"] type: string, parameter: body
Get storage policy assignment  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get storage policy assignment  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get storage policy assignment  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get storage policy assignment  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get storage policy assignment  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get storage policy assignment  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get storage policy assignment  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get storage policy assignment  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get storage policy assignment  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get storage policy assignment  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get storage policy assignment  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get storage policy assignment  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get storage policy assignment  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get storage policy assignment  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get storage policy assignment  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get storage policy assignment  ->  Update storage policy assignment  [ label = "type : type"] type: string, parameter: body
Get storage policy assignment  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get task  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get task  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to file  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Add shared link to file  [ label = "due_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to file  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to folder  [ label = "due_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to folder  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to folder  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Add shared link to folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to web link  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to web link  [ label = "due_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to web link  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get task  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get task  ->  Assign task  [ label = "type : type"] type: string, parameter: body
Get task  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get task  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get task  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get task  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get task  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get task  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get task  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get task  ->  Create legal hold policy  [ label = "assigned_at : filter_started_at"] type: string, parameter: body
Get task  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get task  ->  Create legal hold policy  [ label = "reminded_at : filter_started_at"] type: string, parameter: body
Get task  ->  Create legal hold policy  [ label = "due_at : filter_started_at"] type: string, parameter: body
Get task  ->  Create legal hold policy  [ label = "completed_at : filter_started_at"] type: string, parameter: body
Get task  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get task  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get task  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get task  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get task  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get task  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get task  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get task  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get task  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get task  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get task  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get task  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get task  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get task  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get task  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get task  ->  Create task  [ label = "completion_rule : completion_rule"] type: string, parameter: body
Get task  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get task  ->  Create task  [ label = "reminded_at : due_at"] type: string, parameter: body
Get task  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get task  ->  Create task  [ label = "completed_at : due_at"] type: string, parameter: body
Get task  ->  Create task  [ label = "assigned_at : due_at"] type: string, parameter: body
Get task  ->  Create task  [ label = "action : action"] type: string, parameter: body
Get task  ->  Create task  [ label = "due_at : due_at"] type: string, parameter: body
Get task  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get task  ->  Create task  [ label = "message : message"] type: string, parameter: body
Get task  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get task  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get task  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get task  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get task  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get task  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get task  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get task  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get task  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get task  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get task  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get task  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get task  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get task  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get task  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get task  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get task  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get task  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get task  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get task  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get task  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get task  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get task  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get task  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get task  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get task  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get task  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get task  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get task  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get task  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get task  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get task  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get task  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get task  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get task  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get task  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get task  ->  Update file  [ label = "reminded_at : expires_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get task  ->  Update file  [ label = "due_at : unshared_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Update file  [ label = "assigned_at : disposition_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "completed_at : expires_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "assigned_at : expires_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "reminded_at : disposition_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get task  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "completed_at : disposition_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "due_at : disposition_at"] type: string, parameter: body
Get task  ->  Update file  [ label = "due_at : expires_at"] type: string, parameter: body
Get task  ->  Update folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get task  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get task  ->  Update folder  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task  ->  Update folder  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get task  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Update folder  [ label = "due_at : unshared_at"] type: string, parameter: body
Get task  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get task  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get task  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get task  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get task  ->  Update shared link on file  [ label = "due_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on file  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on file  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get task  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task  ->  Update shared link on folder  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on folder  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on folder  [ label = "due_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on web link  [ label = "due_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on web link  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task  ->  Update shared link on web link  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get task  ->  Update task  [ label = "action : action"] type: string, parameter: body
Get task  ->  Update task  [ label = "completion_rule : completion_rule"] type: string, parameter: body
Get task  ->  Update task  [ label = "due_at : due_at"] type: string, parameter: body
Get task  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get task  ->  Update task  [ label = "assigned_at : due_at"] type: string, parameter: body
Get task  ->  Update task  [ label = "reminded_at : due_at"] type: string, parameter: body
Get task  ->  Update task  [ label = "completed_at : due_at"] type: string, parameter: body
Get task  ->  Update task  [ label = "message : message"] type: string, parameter: body
Get task  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get task  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get task  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get task  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get task  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get task  ->  Update web link  [ label = "due_at : unshared_at"] type: string, parameter: body
Get task  ->  Update web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task  ->  Update web link  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task  ->  Update web link  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get task  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get task assignment  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Add shared link to file  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Add shared link to file  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Add shared link to file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Add shared link to folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Add shared link to folder  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Add shared link to folder  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Add shared link to web link  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Add shared link to web link  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task assignment  ->  Add shared link to web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get task assignment  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get task assignment  ->  Create legal hold policy  [ label = "reminded_at : filter_started_at"] type: string, parameter: body
Get task assignment  ->  Create legal hold policy  [ label = "completed_at : filter_started_at"] type: string, parameter: body
Get task assignment  ->  Create legal hold policy  [ label = "assigned_at : filter_started_at"] type: string, parameter: body
Get task assignment  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get task assignment  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get task assignment  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get task assignment  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get task assignment  ->  Create task  [ label = "completed_at : due_at"] type: string, parameter: body
Get task assignment  ->  Create task  [ label = "assigned_at : due_at"] type: string, parameter: body
Get task assignment  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Create task  [ label = "reminded_at : due_at"] type: string, parameter: body
Get task assignment  ->  Create task  [ label = "message : message"] type: string, parameter: body
Get task assignment  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get task assignment  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get task assignment  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get task assignment  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get task assignment  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get task assignment  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get task assignment  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task assignment  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get task assignment  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task assignment  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get task assignment  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get task assignment  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task assignment  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get task assignment  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get task assignment  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get task assignment  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get task assignment  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get task assignment  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get task assignment  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get task assignment  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get task assignment  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get task assignment  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get task assignment  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task assignment  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get task assignment  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get task assignment  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task assignment  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get task assignment  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task assignment  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task assignment  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get task assignment  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get task assignment  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get task assignment  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get task assignment  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get task assignment  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get task assignment  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Update file  [ label = "assigned_at : disposition_at"] type: string, parameter: body
Get task assignment  ->  Update file  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update file  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Update file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update file  [ label = "assigned_at : expires_at"] type: string, parameter: body
Get task assignment  ->  Update file  [ label = "reminded_at : disposition_at"] type: string, parameter: body
Get task assignment  ->  Update file  [ label = "completed_at : disposition_at"] type: string, parameter: body
Get task assignment  ->  Update file  [ label = "reminded_at : expires_at"] type: string, parameter: body
Get task assignment  ->  Update file  [ label = "completed_at : expires_at"] type: string, parameter: body
Get task assignment  ->  Update folder  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update folder  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Update folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get task assignment  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get task assignment  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get task assignment  ->  Update shared link on file  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update shared link on file  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get task assignment  ->  Update shared link on file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update shared link on folder  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update shared link on folder  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update shared link on folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get task assignment  ->  Update shared link on web link  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update shared link on web link  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update shared link on web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task assignment  ->  Update task  [ label = "assigned_at : due_at"] type: string, parameter: body
Get task assignment  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get task assignment  ->  Update task  [ label = "completed_at : due_at"] type: string, parameter: body
Get task assignment  ->  Update task  [ label = "message : message"] type: string, parameter: body
Get task assignment  ->  Update task  [ label = "reminded_at : due_at"] type: string, parameter: body
Get task assignment  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get task assignment  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get task assignment  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get task assignment  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get task assignment  ->  Update web link  [ label = "reminded_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update web link  [ label = "completed_at : unshared_at"] type: string, parameter: body
Get task assignment  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get task assignment  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get task assignment  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get terms of service  ->  Add initial classifications  [ label = "type : scope"] type: string, parameter: body
Get terms of service  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get terms of service  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get terms of service  ->  Create metadata cascade policy  [ label = "type : scope"] type: string, parameter: body
Get terms of service  ->  Create metadata template  [ label = "type : scope"] type: string, parameter: body
Get terms of service  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get terms of service  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get terms of service  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get terms of service  ->  Create terms of service  [ label = "tos_type : tos_type"] type: string, parameter: body
Get terms of service  ->  Create terms of service  [ label = "status : status"] type: string, parameter: body
Get terms of service  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get terms of service  ->  List enterprise users  [ label = "tos_type : user_type"] type: string, parameter: query
Get terms of service  ->  List terms of services  [ label = "tos_type : tos_type"] type: string, parameter: query
Get terms of service  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get terms of service  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get terms of service  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get terms of service  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get terms of service  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get terms of service  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get terms of service  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get terms of service  ->  Update terms of service  [ label = "status : status"] type: string, parameter: body
Get terms of service  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get terms of service  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get trashed file  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed file  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Get trashed file  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get trashed file  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get trashed file  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Get trashed file  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
Get trashed file  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get trashed file  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Get trashed file  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
Get trashed file  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get trashed file  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get trashed file  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get trashed file  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get trashed file  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get trashed file  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get trashed file  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get trashed file  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Get trashed file  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get trashed file  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get trashed file  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get trashed file  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get trashed file  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get trashed file  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get trashed file  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get trashed file  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get trashed file  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get trashed file  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed file  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get trashed file  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get trashed file  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed file  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get trashed file  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get trashed file  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed file  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get trashed file  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get trashed file  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get trashed file  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get trashed file  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get trashed file  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get trashed file  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get trashed file  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get trashed file  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get trashed file  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get trashed file  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get trashed file  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed file  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get trashed file  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get trashed file  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed file  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get trashed file  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed file  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed file  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get trashed file  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get trashed file  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Starts workflow based on request body  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get trashed file  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get trashed file  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get trashed file  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get trashed file  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get trashed file  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
Get trashed file  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get trashed file  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get trashed file  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get trashed file  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed file  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed file  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed file  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get trashed file  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get trashed file  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get trashed file  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get trashed file  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get trashed file  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get trashed file  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Get trashed file  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get trashed file  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get trashed file  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get trashed file  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get trashed file  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed file  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed file  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get trashed file  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get trashed folder  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed folder  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get trashed folder  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Get trashed folder  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get trashed folder  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Get trashed folder  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
Get trashed folder  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
Get trashed folder  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get trashed folder  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get trashed folder  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get trashed folder  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get trashed folder  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get trashed folder  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get trashed folder  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get trashed folder  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get trashed folder  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get trashed folder  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get trashed folder  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Get trashed folder  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get trashed folder  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get trashed folder  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get trashed folder  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get trashed folder  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get trashed folder  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get trashed folder  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get trashed folder  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed folder  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get trashed folder  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get trashed folder  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed folder  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get trashed folder  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get trashed folder  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed folder  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get trashed folder  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get trashed folder  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get trashed folder  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get trashed folder  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get trashed folder  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get trashed folder  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get trashed folder  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get trashed folder  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get trashed folder  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get trashed folder  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed folder  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get trashed folder  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get trashed folder  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed folder  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get trashed folder  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed folder  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed folder  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get trashed folder  ->  Starts workflow based on request body  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get trashed folder  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get trashed folder  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get trashed folder  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get trashed folder  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update folder  [ label = "description : description"] type: string, parameter: body
Get trashed folder  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get trashed folder  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get trashed folder  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get trashed folder  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get trashed folder  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed folder  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed folder  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed folder  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get trashed folder  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get trashed folder  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Get trashed folder  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
Get trashed folder  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get trashed folder  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Get trashed folder  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get trashed folder  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get trashed folder  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get trashed folder  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get trashed folder  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get trashed folder  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed folder  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed folder  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get trashed web link  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed web link  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get trashed web link  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get trashed web link  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get trashed web link  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Get trashed web link  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Get trashed web link  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get trashed web link  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get trashed web link  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get trashed web link  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get trashed web link  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get trashed web link  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Get trashed web link  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get trashed web link  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get trashed web link  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get trashed web link  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get trashed web link  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get trashed web link  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get trashed web link  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get trashed web link  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get trashed web link  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get trashed web link  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed web link  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get trashed web link  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get trashed web link  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get trashed web link  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get trashed web link  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed web link  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get trashed web link  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get trashed web link  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get trashed web link  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get trashed web link  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get trashed web link  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get trashed web link  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get trashed web link  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get trashed web link  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get trashed web link  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get trashed web link  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed web link  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get trashed web link  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get trashed web link  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed web link  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get trashed web link  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed web link  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed web link  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get trashed web link  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Starts workflow based on request body  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get trashed web link  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get trashed web link  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get trashed web link  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Get trashed web link  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get trashed web link  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get trashed web link  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get trashed web link  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Get trashed web link  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get trashed web link  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Get trashed web link  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Get trashed web link  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get trashed web link  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get trashed web link  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get trashed web link  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get trashed web link  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get trashed web link  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get trashed web link  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed web link  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get trashed web link  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get trashed web link  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get trashed web link  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get trashed web link  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Get trashed web link  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get trashed web link  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get trashed web link  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get trashed web link  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get trashed web link  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get trashed web link  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get trashed web link  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get upload session  ->  Add shared link to file  [ label = "session_expires_at : unshared_at"] type: string, parameter: body
Get upload session  ->  Add shared link to folder  [ label = "session_expires_at : unshared_at"] type: string, parameter: body
Get upload session  ->  Add shared link to web link  [ label = "session_expires_at : unshared_at"] type: string, parameter: body
Get upload session  ->  Create legal hold policy  [ label = "session_expires_at : filter_started_at"] type: string, parameter: body
Get upload session  ->  Create task  [ label = "session_expires_at : due_at"] type: string, parameter: body
Get upload session  ->  Update file  [ label = "session_expires_at : expires_at"] type: string, parameter: body
Get upload session  ->  Update file  [ label = "session_expires_at : unshared_at"] type: string, parameter: body
Get upload session  ->  Update file  [ label = "session_expires_at : disposition_at"] type: string, parameter: body
Get upload session  ->  Update folder  [ label = "session_expires_at : unshared_at"] type: string, parameter: body
Get upload session  ->  Update shared link on file  [ label = "session_expires_at : unshared_at"] type: string, parameter: body
Get upload session  ->  Update shared link on folder  [ label = "session_expires_at : unshared_at"] type: string, parameter: body
Get upload session  ->  Update shared link on web link  [ label = "session_expires_at : unshared_at"] type: string, parameter: body
Get upload session  ->  Update task  [ label = "session_expires_at : due_at"] type: string, parameter: body
Get upload session  ->  Update web link  [ label = "session_expires_at : unshared_at"] type: string, parameter: body
Get user  ->  Add initial classifications  [ label = "type : scope"] type: string, parameter: body
Get user  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get user  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get user  ->  Copy file request  [ label = "status : status"] type: string, parameter: body
Get user  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get user  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get user  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get user  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get user  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get user  ->  Create metadata cascade policy  [ label = "type : scope"] type: string, parameter: body
Get user  ->  Create metadata template  [ label = "type : scope"] type: string, parameter: body
Get user  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get user  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get user  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get user  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get user  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get user  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get user  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get user  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get user  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get user  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get user  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get user  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get user  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get user  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get user  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get user  ->  Create user  [ label = "value : value"] type: string, parameter: body
Get user  ->  Create user  [ label = "type : type"] type: string, parameter: body
Get user  ->  Create user  [ label = "status : status"] type: string, parameter: body
Get user  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get user  ->  Create user  [ label = "timezone : timezone"] type: string, parameter: body
Get user  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get user  ->  Create user  [ label = "address : address"] type: string, parameter: body
Get user  ->  Create user  [ label = "job_title : job_title"] type: string, parameter: body
Get user  ->  Create user  [ label = "language : language"] type: string, parameter: body
Get user  ->  Create user  [ label = "external_app_user_id : external_app_user_id"] type: string, parameter: body
Get user  ->  Create user  [ label = "phone : phone"] type: int, parameter: body
Get user  ->  List enterprise users  [ label = "external_app_user_id : external_app_user_id"] type: string, parameter: query
Get user  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get user  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get user  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get user  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get user  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get user  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get user  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get user  ->  Update file request  [ label = "status : status"] type: string, parameter: body
Get user  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get user  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get user  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get user  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get user  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get user  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get user  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get user  ->  Update user  [ label = "job_title : job_title"] type: string, parameter: body
Get user  ->  Update user  [ label = "timezone : timezone"] type: string, parameter: body
Get user  ->  Update user  [ label = "external_app_user_id : external_app_user_id"] type: string, parameter: body
Get user  ->  Update user  [ label = "phone : phone"] type: int, parameter: body
Get user  ->  Update user  [ label = "status : status"] type: string, parameter: body
Get user  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get user  ->  Update user  [ label = "email : email"] type: string, parameter: body
Get user  ->  Update user  [ label = "language : language"] type: string, parameter: body
Get user  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get user  ->  Update user  [ label = "address : address"] type: string, parameter: body
Get user  ->  Update user  [ label = "type : type"] type: string, parameter: body
Get user  ->  Update user  [ label = "value : value"] type: string, parameter: body
Get user  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Add initial classifications  [ label = "type : scope"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create metadata cascade policy  [ label = "type : scope"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create metadata template  [ label = "type : scope"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get user exempt from collaboration domain restrictions  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user exempt from collaboration domain restrictions  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Add changed status of shield information barrier with specified ID  [ label = "status : status"] type: string, parameter: body
Get user invite status  ->  Add initial classifications  [ label = "type : scope"] type: string, parameter: body
Get user invite status  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get user invite status  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get user invite status  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get user invite status  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get user invite status  ->  Create metadata cascade policy  [ label = "type : scope"] type: string, parameter: body
Get user invite status  ->  Create metadata template  [ label = "type : scope"] type: string, parameter: body
Get user invite status  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get user invite status  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get user invite status  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get user invite status  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get user invite status  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get user invite status  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get user invite status  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get user invite status  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get user invite status  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get user invite status  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get user invite status  ->  List pending collaborations  [ label = "status : status"] type: string, parameter: query
Get user invite status  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get user invite status  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get user invite status  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get user invite status  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get user invite status  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get user invite status  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get user invite status  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get user invite status  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get user invite status  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get user invite status  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get user invite status  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get user invite status  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get user invite status  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get user invite status  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get user invite status  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get watermark for folder  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get watermark for folder  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get watermark for folder  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get watermark for folder  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get watermark for folder  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get watermark for folder  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get watermark for folder  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get watermark for folder  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get watermark for folder  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get watermark for folder  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark for folder  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get watermark on file  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get watermark on file  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get watermark on file  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get watermark on file  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get watermark on file  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get watermark on file  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get watermark on file  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get watermark on file  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get watermark on file  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get watermark on file  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get watermark on file  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get web link  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Get web link  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get web link  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get web link  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
Get web link  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get web link  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get web link  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get web link  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
Get web link  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get web link  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get web link  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get web link  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get web link  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Get web link  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get web link  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get web link  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
Get web link  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get web link  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
Get web link  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get web link  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Get web link  ->  Create folder  [ label = "access : access"] type: string, parameter: body
Get web link  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Get web link  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get web link  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Get web link  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Get web link  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get web link  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get web link  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Get web link  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Get web link  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Get web link  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get web link  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Get web link  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get web link  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Get web link  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get web link  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
Get web link  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get web link  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Get web link  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Get web link  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Get web link  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Get web link  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Get web link  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Get web link  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get web link  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Get web link  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Get web link  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Get web link  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Get web link  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Get web link  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Get web link  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Get web link  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Get web link  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get web link  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Get web link  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Get web link  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Get web link  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Get web link  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get web link  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Get web link  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Get web link  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Get web link  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Get web link  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Get web link  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Get web link  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Get web link  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Get web link  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Get web link  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Get web link  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Get web link  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Get web link  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get web link  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Get web link  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
Get web link  ->  Update file  [ label = "access : access"] type: string, parameter: body
Get web link  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Get web link  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Get web link  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get web link  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Get web link  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Get web link  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
Get web link  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update folder  [ label = "access : access"] type: string, parameter: body
Get web link  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get web link  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get web link  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get web link  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get web link  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Get web link  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
Get web link  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
Get web link  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Get web link  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Get web link  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
Get web link  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Get web link  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get web link  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Get web link  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Get web link  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Get web link  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Get web link  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get web link  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get web link  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Get web link  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
Get web link  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Get web link  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Get web link  ->  Update web link  [ label = "access : access"] type: string, parameter: body
Get web link  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Get web link  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Get webhook  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get webhook  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get webhook  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get webhook  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Get webhook  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Get webhook  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Get webhook  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Get webhook  ->  Create task  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Create task  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Create user  [ label = "name : name"] type: string, parameter: body
Get webhook  ->  Create user  [ label = "type : role"] type: string, parameter: body
Get webhook  ->  Create webhook  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Create webhook  [ label = "triggers : triggers"] type: string, parameter: body
Get webhook  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Create webhook  [ label = "address : address"] type: string, parameter: body
Get webhook  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Get webhook  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Get webhook  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Search for content  [ label = "type : type"] type: string, parameter: query
Get webhook  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Get webhook  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Get webhook  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Get webhook  ->  Update file  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get webhook  ->  Update file  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get webhook  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Get webhook  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Get webhook  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Get webhook  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Get webhook  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get webhook  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Get webhook  ->  Update user  [ label = "name : name"] type: string, parameter: body
Get webhook  ->  Update user  [ label = "type : role"] type: string, parameter: body
Get webhook  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Get webhook  ->  Update webhook  [ label = "id : id"] type: int, parameter: body
Get webhook  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Get webhook  ->  Update webhook  [ label = "address : address"] type: string, parameter: body
Get webhook  ->  Update webhook  [ label = "triggers : triggers"] type: string, parameter: body
Get zip download status  ->  Update all Box Skill cards on file  [ label = "state : status"] type: string, parameter: body
List Box Sign templates  ->  Add classification to file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Add classification to folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Add or update user avatar  [ label = "folder_id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Add shared link to file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Add shared link to folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Add shared link to web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Apply watermark to file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Apply watermark to folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List Box Sign templates  ->  Copy file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Create Box Skill cards on file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Create email alias  [ label = "folder_id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Create metadata instance on file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Create metadata instance on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Create sign request  [ label = "type : text_value"] type: string, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "email_message : email_message"] type: string, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "role : role"] type: string, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "document_tag_id : embed_url_external_user_id"] type: int, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "document_tag_id : document_tag_id"] type: int, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "email_subject : email_subject"] type: string, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "content_type : text_value"] type: string, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "folder_id : id"] type: int, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "date_value : date_value"] type: string, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "text_value : text_value"] type: string, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "instructions : email_message"] type: string, parameter: body
List Box Sign templates  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Create task  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Create upload session for existing file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Create zip download  [ label = "folder_id : id"] type: int, parameter: body
List Box Sign templates  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List Box Sign templates  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Delete file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Delete folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List Box Sign templates  ->  Delete folder lock  [ label = "folder_id : folder_lock_id"] type: int, parameter: path
List Box Sign templates  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Delete user  [ label = "folder_id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Delete user avatar  [ label = "folder_id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Download file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get classification on file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Get classification on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Get collaboration  [ label = "document_tag_id : collaboration_id"] type: int, parameter: path
List Box Sign templates  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List Box Sign templates  ->  Get comment  [ label = "folder_id : comment_id"] type: int, parameter: path
List Box Sign templates  ->  Get file information  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get file thumbnail  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get file version  [ label = "document_tag_id : file_version_id"] type: int, parameter: path
List Box Sign templates  ->  Get file version  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get file versions under retention  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  Get file versions under retention  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  Get files under retention  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  Get files under retention  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Get folder information  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Get metadata instance on file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Get metadata instance on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get shared link for file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get shared link for folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Get shared link for web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Get task  [ label = "folder_id : task_id"] type: int, parameter: path
List Box Sign templates  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List Box Sign templates  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List Box Sign templates  ->  Get task assignment  [ label = "folder_id : task_assignment_id"] type: int, parameter: path
List Box Sign templates  ->  Get trashed file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Get trashed folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Get trashed web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Get user  [ label = "folder_id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Get user avatar  [ label = "folder_id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Get watermark for folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Get watermark on file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Get web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  List Box Skill cards on file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  List Slack integration mappings  [ label = "folder_id : box_item_id"] type: int, parameter: query
List Box Sign templates  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
List Box Sign templates  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List Box Sign templates  ->  List Slack integration mappings  [ label = "folder_id : partner_item_id"] type: int, parameter: query
List Box Sign templates  ->  List Slack integration mappings  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List Box Sign templates  ->  List Slack integration mappings  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List all file versions  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  List all global metadata templates  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List all global metadata templates  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List all legal hold policies  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List all legal hold policies  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List all metadata templates for enterprise  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List all metadata templates for enterprise  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List all webhooks  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List all webhooks  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List allowed collaboration domains  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List allowed collaboration domains  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List current file versions for legal hold policy assignment  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List current file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List enterprise device pins  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List enterprise device pins  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List enterprise users  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List enterprise users  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  List file collaborations  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  List file collaborations  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List file collaborations  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List file comments  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  List file version legal holds  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List file version legal holds  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List file version retentions  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List Box Sign templates  ->  List file version retentions  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  List folder collaborations  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List Box Sign templates  ->  List folder locks  [ label = "folder_id : folder_id"] type: int, parameter: query
List Box Sign templates  ->  List items in folder  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  List items in folder  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List items in folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  List legal hold policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List Box Sign templates  ->  List legal hold policy assignments  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List metadata cascade policies  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List metadata cascade policies  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List metadata instances on file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  List metadata instances on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  List previous file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List previous file versions for legal hold policy assignment  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List recently accessed items  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List recently accessed items  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List retention policies  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List retention policies  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List retention policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List retention policy assignments  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List shield information barrier reports  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List shield information barrier reports  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List shield information barrier segment members  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List shield information barrier segment members  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List shield information barrier segment restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List shield information barrier segment restrictions  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List shield information barrier segments  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List shield information barrier segments  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List shield information barriers  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List shield information barriers  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List sign requests  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List sign requests  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List storage policies  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List storage policies  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List storage policy assignments  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List storage policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List Box Sign templates  ->  List task assignments  [ label = "folder_id : task_id"] type: int, parameter: path
List Box Sign templates  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  List tasks on file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  List trashed items  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List trashed items  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List user's email aliases  [ label = "folder_id : user_id"] type: int, parameter: path
List Box Sign templates  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List Box Sign templates  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List Box Sign templates  ->  List user's groups  [ label = "folder_id : user_id"] type: int, parameter: path
List Box Sign templates  ->  List users exempt from collaboration domain restrictions  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List users exempt from collaboration domain restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List Box Sign templates  ->  List workflows  [ label = "next_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  List workflows  [ label = "folder_id : folder_id"] type: int, parameter: query
List Box Sign templates  ->  List workflows  [ label = "prev_marker : marker"] type: string, parameter: query
List Box Sign templates  ->  Permanently remove file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Permanently remove folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Permanently remove web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Promote file version  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Remove Box Skill cards from file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Remove classification from file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Remove classification from folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Remove collaboration  [ label = "document_tag_id : collaboration_id"] type: int, parameter: path
List Box Sign templates  ->  Remove comment  [ label = "folder_id : comment_id"] type: int, parameter: path
List Box Sign templates  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List Box Sign templates  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Remove email alias  [ label = "folder_id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Remove file version  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Remove file version  [ label = "document_tag_id : file_version_id"] type: int, parameter: path
List Box Sign templates  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Remove metadata instance from file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Remove metadata instance from folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Remove shared link from file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Remove shared link from folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Remove shared link from web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Remove task  [ label = "folder_id : task_id"] type: int, parameter: path
List Box Sign templates  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List Box Sign templates  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Remove watermark from file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Remove watermark from folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Remove web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Restore file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Restore file version  [ label = "document_tag_id : file_version_id"] type: int, parameter: path
List Box Sign templates  ->  Restore file version  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Restore folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Restore web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List Box Sign templates  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List Box Sign templates  ->  Starts workflow based on request body  [ label = "folder_id : workflow_id"] type: int, parameter: path
List Box Sign templates  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Transfer owned folders  [ label = "folder_id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Unassign task  [ label = "folder_id : task_assignment_id"] type: int, parameter: path
List Box Sign templates  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List Box Sign templates  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Update Box Skill cards on file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List Box Sign templates  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Update classification on file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Update classification on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Update collaboration  [ label = "document_tag_id : collaboration_id"] type: int, parameter: path
List Box Sign templates  ->  Update comment  [ label = "folder_id : comment_id"] type: int, parameter: path
List Box Sign templates  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List Box Sign templates  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Update file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Update file  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Update folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Update metadata instance on file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Update metadata instance on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Update shared link on file  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Update shared link on folder  [ label = "folder_id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List Box Sign templates  ->  Update shared link on web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List Box Sign templates  ->  Update task  [ label = "folder_id : task_id"] type: int, parameter: path
List Box Sign templates  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List Box Sign templates  ->  Update task assignment  [ label = "folder_id : task_assignment_id"] type: int, parameter: path
List Box Sign templates  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Update user  [ label = "folder_id : user_id"] type: int, parameter: path
List Box Sign templates  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Update web link  [ label = "folder_id : web_link_id"] type: int, parameter: path
List Box Sign templates  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List Box Sign templates  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List Box Sign templates  ->  Upload file version  [ label = "folder_id : file_id"] type: int, parameter: path
List Box Skill cards on file  ->  Create Box Skill cards on file  [ label = "id : id"] type: string, parameter: body
List Box Skill cards on file  ->  Create Box Skill cards on file  [ label = "text : text"] type: string, parameter: body
List Box Skill cards on file  ->  Create Box Skill cards on file  [ label = "skill_card_type : skill_card_type"] type: string, parameter: body
List Box Skill cards on file  ->  Create Box Skill cards on file  [ label = "created_at : created_at"] type: string, parameter: body
List Box Skill cards on file  ->  Create Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List Box Skill cards on file  ->  Create Box Skill cards on file  [ label = "message : message"] type: string, parameter: body
List Box Skill cards on file  ->  Create Box Skill cards on file  [ label = "code : code"] type: string, parameter: body
List Box Skill cards on file  ->  Create metadata instance on file  [ label = "$template : template_key"] type: string, parameter: path
List Box Skill cards on file  ->  Create metadata instance on folder  [ label = "$template : template_key"] type: string, parameter: path
List Box Skill cards on file  ->  Find metadata template by instance ID  [ label = "$id : metadata_instance_id"] type: string, parameter: query
List Box Skill cards on file  ->  Get metadata instance on file  [ label = "$template : template_key"] type: string, parameter: path
List Box Skill cards on file  ->  Get metadata instance on folder  [ label = "$template : template_key"] type: string, parameter: path
List Box Skill cards on file  ->  Get metadata template by name  [ label = "$template : template_key"] type: string, parameter: path
List Box Skill cards on file  ->  List metadata query indices  [ label = "$template : template_key"] type: string, parameter: query
List Box Skill cards on file  ->  Remove metadata instance from file  [ label = "$template : template_key"] type: string, parameter: path
List Box Skill cards on file  ->  Remove metadata instance from folder  [ label = "$template : template_key"] type: string, parameter: path
List Box Skill cards on file  ->  Remove metadata template  [ label = "$template : template_key"] type: string, parameter: path
List Box Skill cards on file  ->  Update all Box Skill cards on file  [ label = "skill_card_type : skill_card_type"] type: string, parameter: body
List Box Skill cards on file  ->  Update all Box Skill cards on file  [ label = "id : id"] type: string, parameter: body
List Box Skill cards on file  ->  Update all Box Skill cards on file  [ label = "code : code"] type: string, parameter: body
List Box Skill cards on file  ->  Update all Box Skill cards on file  [ label = "message : message"] type: string, parameter: body
List Box Skill cards on file  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List Box Skill cards on file  ->  Update all Box Skill cards on file  [ label = "text : text"] type: string, parameter: body
List Box Skill cards on file  ->  Update all Box Skill cards on file  [ label = "created_at : created_at"] type: string, parameter: body
List Box Skill cards on file  ->  Update metadata instance on file  [ label = "$template : template_key"] type: string, parameter: path
List Box Skill cards on file  ->  Update metadata instance on folder  [ label = "$template : template_key"] type: string, parameter: path
List Box Skill cards on file  ->  Update metadata template  [ label = "$template : template_key"] type: string, parameter: path
List Slack integration mappings  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List Slack integration mappings  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List Slack integration mappings  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Create Slack integration mapping  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Create Slack integration mapping  [ label = "slack_workspace_id : slack_workspace_id"] type: string, parameter: body
List Slack integration mappings  ->  Create Slack integration mapping  [ label = "slack_org_id : slack_org_id"] type: string, parameter: body
List Slack integration mappings  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List Slack integration mappings  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List Slack integration mappings  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List Slack integration mappings  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List Slack integration mappings  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List Slack integration mappings  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List Slack integration mappings  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
List Slack integration mappings  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List Slack integration mappings  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List Slack integration mappings  ->  Create task  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List Slack integration mappings  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Create user  [ label = "type : role"] type: string, parameter: body
List Slack integration mappings  ->  Create user  [ label = "name : name"] type: string, parameter: body
List Slack integration mappings  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List Slack integration mappings  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List Slack integration mappings  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List Slack integration mappings  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List Slack integration mappings  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List Slack integration mappings  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List Slack integration mappings  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List Slack integration mappings  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List Slack integration mappings  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List Slack integration mappings  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List Slack integration mappings  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List Slack integration mappings  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List Slack integration mappings  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List Slack integration mappings  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List Slack integration mappings  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List Slack integration mappings  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List Slack integration mappings  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List Slack integration mappings  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List Slack integration mappings  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List Slack integration mappings  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List Slack integration mappings  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List Slack integration mappings  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List Slack integration mappings  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List Slack integration mappings  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List Slack integration mappings  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List Slack integration mappings  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List Slack integration mappings  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List Slack integration mappings  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List Slack integration mappings  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List Slack integration mappings  ->  Update file  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List Slack integration mappings  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List Slack integration mappings  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List Slack integration mappings  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List Slack integration mappings  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List Slack integration mappings  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List Slack integration mappings  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List Slack integration mappings  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List Slack integration mappings  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List Slack integration mappings  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List Slack integration mappings  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List Slack integration mappings  ->  Update user  [ label = "name : name"] type: string, parameter: body
List Slack integration mappings  ->  Update user  [ label = "type : role"] type: string, parameter: body
List Slack integration mappings  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List Slack integration mappings  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List Slack integration mappings  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List Slack integration mappings  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List all classifications  ->  Add classification to file  [ label = "key : Box__Security__Classification__Key"] type: string, parameter: body
List all classifications  ->  Add classification to folder  [ label = "key : Box__Security__Classification__Key"] type: string, parameter: body
List all classifications  ->  Add initial classifications  [ label = "displayName : displayName"] type: string, parameter: body
List all classifications  ->  Add initial classifications  [ label = "type : type"] type: string, parameter: body
List all classifications  ->  Add initial classifications  [ label = "classificationDefinition : classificationDefinition"] type: string, parameter: body
List all classifications  ->  Add initial classifications  [ label = "key : key"] type: string, parameter: body
List all classifications  ->  Add initial classifications  [ label = "templateKey : templateKey"] type: string, parameter: body
List all classifications  ->  Assign retention policy  [ label = "type : type"] type: string, parameter: body
List all classifications  ->  List retention policy assignments  [ label = "type : type"] type: string, parameter: query
List all collections  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List all collections  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List all collections  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List all collections  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List all collections  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List all collections  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List all collections  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List all collections  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List all collections  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List all collections  ->  Create task  [ label = "id : id"] type: int, parameter: body
List all collections  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List all collections  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List all collections  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List all collections  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List all collections  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List all collections  ->  Update file  [ label = "id : id"] type: int, parameter: body
List all collections  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List all collections  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List all file versions  ->  Add shared link to file  [ label = "restored_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to folder  [ label = "restored_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List all file versions  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Add shared link to web link  [ label = "restored_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List all file versions  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List all file versions  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List all file versions  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List all file versions  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List all file versions  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
List all file versions  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
List all file versions  ->  Create legal hold policy  [ label = "restored_at : filter_started_at"] type: string, parameter: body
List all file versions  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List all file versions  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List all file versions  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List all file versions  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List all file versions  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List all file versions  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List all file versions  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
List all file versions  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
List all file versions  ->  Create task  [ label = "restored_at : due_at"] type: string, parameter: body
List all file versions  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List all file versions  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List all file versions  ->  Create task  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List all file versions  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Create user  [ label = "name : name"] type: string, parameter: body
List all file versions  ->  Create user  [ label = "type : role"] type: string, parameter: body
List all file versions  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List all file versions  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List all file versions  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List all file versions  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List all file versions  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List all file versions  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List all file versions  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List all file versions  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List all file versions  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List all file versions  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List all file versions  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List all file versions  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List all file versions  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List all file versions  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List all file versions  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List all file versions  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List all file versions  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List all file versions  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List all file versions  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List all file versions  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List all file versions  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List all file versions  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List all file versions  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List all file versions  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List all file versions  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List all file versions  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List all file versions  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List all file versions  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List all file versions  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List all file versions  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List all file versions  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List all file versions  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List all file versions  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List all file versions  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List all file versions  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List all file versions  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List all file versions  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "restored_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "restored_at : disposition_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List all file versions  ->  Update file  [ label = "restored_at : expires_at"] type: string, parameter: body
List all file versions  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update folder  [ label = "restored_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List all file versions  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List all file versions  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List all file versions  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List all file versions  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on file  [ label = "restored_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List all file versions  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on folder  [ label = "restored_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List all file versions  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on web link  [ label = "restored_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List all file versions  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List all file versions  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
List all file versions  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List all file versions  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List all file versions  ->  Update task  [ label = "restored_at : due_at"] type: string, parameter: body
List all file versions  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
List all file versions  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List all file versions  ->  Update user  [ label = "type : role"] type: string, parameter: body
List all file versions  ->  Update user  [ label = "name : name"] type: string, parameter: body
List all file versions  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List all file versions  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List all file versions  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update web link  [ label = "restored_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all file versions  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List all global metadata templates  ->  Assign retention policy  [ label = "type : type"] type: string, parameter: body
List all global metadata templates  ->  Create metadata cascade policy  [ label = "templateKey : templateKey"] type: string, parameter: body
List all global metadata templates  ->  Create metadata template  [ label = "key : key"] type: string, parameter: body
List all global metadata templates  ->  Create metadata template  [ label = "displayName : displayName"] type: string, parameter: body
List all global metadata templates  ->  Create metadata template  [ label = "templateKey : templateKey"] type: string, parameter: body
List all global metadata templates  ->  Create metadata template  [ label = "description : description"] type: string, parameter: body
List all global metadata templates  ->  Create metadata template  [ label = "type : type"] type: string, parameter: body
List all global metadata templates  ->  List retention policy assignments  [ label = "type : type"] type: string, parameter: query
List all legal hold policies  ->  Add shared link to file  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to file  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to folder  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to folder  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to web link  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Add shared link to web link  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List all legal hold policies  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Copy file request  [ label = "status : status"] type: string, parameter: body
List all legal hold policies  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List all legal hold policies  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Create legal hold policy  [ label = "filter_started_at : filter_started_at"] type: string, parameter: body
List all legal hold policies  ->  Create legal hold policy  [ label = "deleted_at : filter_started_at"] type: string, parameter: body
List all legal hold policies  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List all legal hold policies  ->  Create legal hold policy  [ label = "filter_ended_at : filter_started_at"] type: string, parameter: body
List all legal hold policies  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List all legal hold policies  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List all legal hold policies  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List all legal hold policies  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List all legal hold policies  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List all legal hold policies  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List all legal hold policies  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Create task  [ label = "deleted_at : due_at"] type: string, parameter: body
List all legal hold policies  ->  Create task  [ label = "filter_ended_at : due_at"] type: string, parameter: body
List all legal hold policies  ->  Create task  [ label = "filter_started_at : due_at"] type: string, parameter: body
List all legal hold policies  ->  Create task  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List all legal hold policies  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List all legal hold policies  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List all legal hold policies  ->  Create user  [ label = "status : status"] type: string, parameter: body
List all legal hold policies  ->  Create user  [ label = "type : role"] type: string, parameter: body
List all legal hold policies  ->  Create user  [ label = "name : name"] type: string, parameter: body
List all legal hold policies  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List all legal hold policies  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Update file  [ label = "filter_ended_at : expires_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "deleted_at : disposition_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "filter_started_at : expires_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "deleted_at : expires_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Update file  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "filter_started_at : disposition_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List all legal hold policies  ->  Update file  [ label = "filter_ended_at : disposition_at"] type: string, parameter: body
List all legal hold policies  ->  Update file request  [ label = "status : status"] type: string, parameter: body
List all legal hold policies  ->  Update folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update folder  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update folder  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List all legal hold policies  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List all legal hold policies  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List all legal hold policies  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List all legal hold policies  ->  Update shared link on file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on file  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on file  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on folder  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on folder  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on web link  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update shared link on web link  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List all legal hold policies  ->  Update task  [ label = "filter_started_at : due_at"] type: string, parameter: body
List all legal hold policies  ->  Update task  [ label = "filter_ended_at : due_at"] type: string, parameter: body
List all legal hold policies  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List all legal hold policies  ->  Update task  [ label = "deleted_at : due_at"] type: string, parameter: body
List all legal hold policies  ->  Update user  [ label = "name : name"] type: string, parameter: body
List all legal hold policies  ->  Update user  [ label = "type : role"] type: string, parameter: body
List all legal hold policies  ->  Update user  [ label = "status : status"] type: string, parameter: body
List all legal hold policies  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update web link  [ label = "filter_started_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update web link  [ label = "filter_ended_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List all legal hold policies  ->  Update web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List all metadata templates for enterprise  ->  Assign retention policy  [ label = "type : type"] type: string, parameter: body
List all metadata templates for enterprise  ->  Create metadata cascade policy  [ label = "templateKey : templateKey"] type: string, parameter: body
List all metadata templates for enterprise  ->  Create metadata template  [ label = "templateKey : templateKey"] type: string, parameter: body
List all metadata templates for enterprise  ->  Create metadata template  [ label = "type : type"] type: string, parameter: body
List all metadata templates for enterprise  ->  Create metadata template  [ label = "key : key"] type: string, parameter: body
List all metadata templates for enterprise  ->  Create metadata template  [ label = "displayName : displayName"] type: string, parameter: body
List all metadata templates for enterprise  ->  Create metadata template  [ label = "description : description"] type: string, parameter: body
List all metadata templates for enterprise  ->  List retention policy assignments  [ label = "type : type"] type: string, parameter: query
List all webhooks  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List all webhooks  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List all webhooks  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List all webhooks  ->  Create task  [ label = "type : type"] type: string, parameter: body
List all webhooks  ->  Create task  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List all webhooks  ->  Create webhook  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List all webhooks  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List all webhooks  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List all webhooks  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List all webhooks  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List all webhooks  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List all webhooks  ->  Update file  [ label = "type : type"] type: string, parameter: body
List all webhooks  ->  Update file  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List all webhooks  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List all webhooks  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List all webhooks  ->  Update webhook  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Add domain to list of allowed collaboration domains  [ label = "domain : domain"] type: string, parameter: body
List allowed collaboration domains  ->  Add initial classifications  [ label = "type : scope"] type: string, parameter: body
List allowed collaboration domains  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List allowed collaboration domains  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List allowed collaboration domains  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List allowed collaboration domains  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List allowed collaboration domains  ->  Create metadata cascade policy  [ label = "type : scope"] type: string, parameter: body
List allowed collaboration domains  ->  Create metadata template  [ label = "type : scope"] type: string, parameter: body
List allowed collaboration domains  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List allowed collaboration domains  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Create task  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List allowed collaboration domains  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List allowed collaboration domains  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List allowed collaboration domains  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List allowed collaboration domains  ->  Update file  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List allowed collaboration domains  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List allowed collaboration domains  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List allowed collaboration domains  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List allowed collaboration domains  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List allowed collaboration domains  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List allowed collaboration domains  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List collection items  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List collection items  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List collection items  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List collection items  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List collection items  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List collection items  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List collection items  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List collection items  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List collection items  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List collection items  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List collection items  ->  Create task  [ label = "type : type"] type: string, parameter: body
List collection items  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List collection items  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List collection items  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List collection items  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List collection items  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List collection items  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List collection items  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List collection items  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List collection items  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List collection items  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List collection items  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List collection items  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List collection items  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List collection items  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List collection items  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List collection items  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List collection items  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List collection items  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List collection items  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List collection items  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List collection items  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List collection items  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List collection items  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List collection items  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List collection items  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List collection items  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List collection items  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List collection items  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List collection items  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List collection items  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List collection items  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List collection items  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List collection items  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List collection items  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List collection items  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List collection items  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List collection items  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List collection items  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List collection items  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List collection items  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List collection items  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List collection items  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List collection items  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List collection items  ->  Update file  [ label = "type : type"] type: string, parameter: body
List collection items  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List collection items  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List collection items  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List collection items  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List collection items  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List collection items  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List collection items  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List collection items  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List collection items  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List collection items  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Create folder  [ label = "access : access"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "assigned_at : filter_started_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "deleted_at : filter_started_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create task  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create task  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Create task  [ label = "assigned_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create task  [ label = "deleted_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create user  [ label = "name : name"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create user  [ label = "type : role"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
List current file versions for legal hold policy assignment  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List current file versions for legal hold policy assignment  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List current file versions for legal hold policy assignment  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List current file versions for legal hold policy assignment  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List current file versions for legal hold policy assignment  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List current file versions for legal hold policy assignment  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List current file versions for legal hold policy assignment  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List current file versions for legal hold policy assignment  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List current file versions for legal hold policy assignment  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "deleted_at : expires_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "assigned_at : disposition_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "access : access"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "assigned_at : expires_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "deleted_at : disposition_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update folder  [ label = "access : access"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update task  [ label = "assigned_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update task  [ label = "deleted_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update user  [ label = "name : name"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update user  [ label = "type : role"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List current file versions for legal hold policy assignment  ->  Update web link  [ label = "access : access"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List current file versions for legal hold policy assignment  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List enterprise device pins  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List enterprise device pins  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List enterprise device pins  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List enterprise device pins  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List enterprise device pins  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List enterprise device pins  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List enterprise device pins  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List enterprise device pins  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Create task  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List enterprise device pins  ->  Create user  [ label = "name : name"] type: string, parameter: body
List enterprise device pins  ->  Create user  [ label = "type : role"] type: string, parameter: body
List enterprise device pins  ->  Get folder information  [ label = "by : sort"] type: string, parameter: query
List enterprise device pins  ->  List items in folder  [ label = "by : sort"] type: string, parameter: query
List enterprise device pins  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List enterprise device pins  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Query files/folders by metadata  [ label = "direction : direction"] type: string, parameter: body
List enterprise device pins  ->  Update file  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List enterprise device pins  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List enterprise device pins  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List enterprise device pins  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List enterprise device pins  ->  Update user  [ label = "name : name"] type: string, parameter: body
List enterprise device pins  ->  Update user  [ label = "type : role"] type: string, parameter: body
List enterprise users  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List enterprise users  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Copy file request  [ label = "status : status"] type: string, parameter: body
List enterprise users  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List enterprise users  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List enterprise users  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List enterprise users  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List enterprise users  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List enterprise users  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List enterprise users  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List enterprise users  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List enterprise users  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List enterprise users  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List enterprise users  ->  Create task  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List enterprise users  ->  Create user  [ label = "timezone : timezone"] type: string, parameter: body
List enterprise users  ->  Create user  [ label = "status : status"] type: string, parameter: body
List enterprise users  ->  Create user  [ label = "type : role"] type: string, parameter: body
List enterprise users  ->  Create user  [ label = "language : language"] type: string, parameter: body
List enterprise users  ->  Create user  [ label = "phone : phone"] type: int, parameter: body
List enterprise users  ->  Create user  [ label = "name : name"] type: string, parameter: body
List enterprise users  ->  Create user  [ label = "address : address"] type: string, parameter: body
List enterprise users  ->  Create user  [ label = "job_title : job_title"] type: string, parameter: body
List enterprise users  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List enterprise users  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List enterprise users  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List enterprise users  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List enterprise users  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List enterprise users  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List enterprise users  ->  Update file  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List enterprise users  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List enterprise users  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List enterprise users  ->  Update file request  [ label = "status : status"] type: string, parameter: body
List enterprise users  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List enterprise users  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List enterprise users  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List enterprise users  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List enterprise users  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List enterprise users  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List enterprise users  ->  Update user  [ label = "job_title : job_title"] type: string, parameter: body
List enterprise users  ->  Update user  [ label = "name : name"] type: string, parameter: body
List enterprise users  ->  Update user  [ label = "timezone : timezone"] type: string, parameter: body
List enterprise users  ->  Update user  [ label = "language : language"] type: string, parameter: body
List enterprise users  ->  Update user  [ label = "phone : phone"] type: int, parameter: body
List enterprise users  ->  Update user  [ label = "email : email"] type: string, parameter: body
List enterprise users  ->  Update user  [ label = "status : status"] type: string, parameter: body
List enterprise users  ->  Update user  [ label = "address : address"] type: string, parameter: body
List enterprise users  ->  Update user  [ label = "type : role"] type: string, parameter: body
List enterprise users  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List enterprise users  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List file collaborations  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
List file collaborations  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
List file collaborations  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
List file collaborations  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List file collaborations  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Assign task  [ label = "invite_email : login"] type: string, parameter: body
List file collaborations  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List file collaborations  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
List file collaborations  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List file collaborations  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Create collaboration  [ label = "invite_email : login"] type: string, parameter: body
List file collaborations  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Create collaboration  [ label = "role : role"] type: string, parameter: body
List file collaborations  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List file collaborations  ->  Create folder  [ label = "access : access"] type: string, parameter: body
List file collaborations  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List file collaborations  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List file collaborations  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
List file collaborations  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
List file collaborations  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
List file collaborations  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
List file collaborations  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List file collaborations  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List file collaborations  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
List file collaborations  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List file collaborations  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List file collaborations  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
List file collaborations  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List file collaborations  ->  Create task  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
List file collaborations  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List file collaborations  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
List file collaborations  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List file collaborations  ->  Create task  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Create user  [ label = "type : role"] type: string, parameter: body
List file collaborations  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
List file collaborations  ->  Create user  [ label = "name : name"] type: string, parameter: body
List file collaborations  ->  Create user invite  [ label = "invite_email : login"] type: string, parameter: body
List file collaborations  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List file collaborations  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List file collaborations  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List file collaborations  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List file collaborations  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List file collaborations  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List file collaborations  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List file collaborations  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List file collaborations  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List file collaborations  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List file collaborations  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List file collaborations  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List file collaborations  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List file collaborations  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List file collaborations  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
List file collaborations  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List file collaborations  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List file collaborations  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List file collaborations  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List file collaborations  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List file collaborations  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List file collaborations  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List file collaborations  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List file collaborations  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List file collaborations  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List file collaborations  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List file collaborations  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List file collaborations  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List file collaborations  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List file collaborations  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List file collaborations  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List file collaborations  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List file collaborations  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List file collaborations  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List file collaborations  ->  Starts workflow based on request body  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List file collaborations  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List file collaborations  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List file collaborations  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List file collaborations  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List file collaborations  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Update collaboration  [ label = "role : role"] type: string, parameter: body
List file collaborations  ->  Update collaboration  [ label = "status : status"] type: string, parameter: body
List file collaborations  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List file collaborations  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "access : access"] type: string, parameter: body
List file collaborations  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
List file collaborations  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
List file collaborations  ->  Update folder  [ label = "access : access"] type: string, parameter: body
List file collaborations  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List file collaborations  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List file collaborations  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List file collaborations  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
List file collaborations  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List file collaborations  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List file collaborations  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
List file collaborations  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
List file collaborations  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List file collaborations  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
List file collaborations  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List file collaborations  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List file collaborations  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List file collaborations  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
List file collaborations  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
List file collaborations  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List file collaborations  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List file collaborations  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List file collaborations  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
List file collaborations  ->  Update user  [ label = "name : name"] type: string, parameter: body
List file collaborations  ->  Update user  [ label = "type : role"] type: string, parameter: body
List file collaborations  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update web link  [ label = "access : access"] type: string, parameter: body
List file collaborations  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file collaborations  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List file collaborations  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List file collaborations  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List file comments  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List file comments  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file comments  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file comments  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List file comments  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List file comments  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file comments  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List file comments  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List file comments  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List file comments  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List file comments  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Create task  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Create task  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List file comments  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List file comments  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Create user  [ label = "type : role"] type: string, parameter: body
List file comments  ->  Create user  [ label = "name : name"] type: string, parameter: body
List file comments  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List file comments  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List file comments  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List file comments  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List file comments  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List file comments  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List file comments  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List file comments  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List file comments  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List file comments  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List file comments  ->  Update file  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List file comments  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List file comments  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List file comments  ->  Update file  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file comments  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List file comments  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file comments  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List file comments  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List file comments  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List file comments  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List file comments  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file comments  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List file comments  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file comments  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List file comments  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file comments  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List file comments  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List file comments  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List file comments  ->  Update user  [ label = "name : name"] type: string, parameter: body
List file comments  ->  Update user  [ label = "type : role"] type: string, parameter: body
List file comments  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file comments  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List file comments  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List file version legal holds  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
List file version legal holds  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
List file version legal holds  ->  Add shared link to folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version legal holds  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
List file version legal holds  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List file version legal holds  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
List file version legal holds  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List file version legal holds  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List file version legal holds  ->  Create folder  [ label = "access : access"] type: string, parameter: body
List file version legal holds  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Create legal hold policy  [ label = "assigned_at : filter_started_at"] type: string, parameter: body
List file version legal holds  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List file version legal holds  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List file version legal holds  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
List file version legal holds  ->  Create legal hold policy  [ label = "deleted_at : filter_started_at"] type: string, parameter: body
List file version legal holds  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
List file version legal holds  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
List file version legal holds  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
List file version legal holds  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List file version legal holds  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List file version legal holds  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List file version legal holds  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List file version legal holds  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
List file version legal holds  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Create task  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Create task  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Create task  [ label = "assigned_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Create task  [ label = "deleted_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Create user  [ label = "name : name"] type: string, parameter: body
List file version legal holds  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
List file version legal holds  ->  Create user  [ label = "type : role"] type: string, parameter: body
List file version legal holds  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List file version legal holds  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List file version legal holds  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List file version legal holds  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List file version legal holds  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version legal holds  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List file version legal holds  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List file version legal holds  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version legal holds  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List file version legal holds  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List file version legal holds  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version legal holds  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List file version legal holds  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List file version legal holds  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
List file version legal holds  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List file version legal holds  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List file version legal holds  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List file version legal holds  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List file version legal holds  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List file version legal holds  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List file version legal holds  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List file version legal holds  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List file version legal holds  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version legal holds  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List file version legal holds  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List file version legal holds  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version legal holds  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List file version legal holds  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version legal holds  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version legal holds  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List file version legal holds  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List file version legal holds  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List file version legal holds  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List file version legal holds  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List file version legal holds  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List file version legal holds  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List file version legal holds  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "deleted_at : disposition_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "assigned_at : disposition_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "access : access"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "deleted_at : expires_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "assigned_at : expires_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List file version legal holds  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
List file version legal holds  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update folder  [ label = "access : access"] type: string, parameter: body
List file version legal holds  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List file version legal holds  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List file version legal holds  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List file version legal holds  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List file version legal holds  ->  Update shared link on file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
List file version legal holds  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version legal holds  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
List file version legal holds  ->  Update shared link on folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
List file version legal holds  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version legal holds  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List file version legal holds  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Update task  [ label = "assigned_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Update task  [ label = "deleted_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
List file version legal holds  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List file version legal holds  ->  Update user  [ label = "type : role"] type: string, parameter: body
List file version legal holds  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
List file version legal holds  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List file version legal holds  ->  Update user  [ label = "name : name"] type: string, parameter: body
List file version legal holds  ->  Update web link  [ label = "access : access"] type: string, parameter: body
List file version legal holds  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version legal holds  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List file version legal holds  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List file version legal holds  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List file version retentions  ->  Add shared link to file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Add shared link to file  [ label = "applied_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Add shared link to folder  [ label = "applied_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Add shared link to folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Add shared link to web link  [ label = "applied_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Add shared link to web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version retentions  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List file version retentions  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List file version retentions  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List file version retentions  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List file version retentions  ->  Create legal hold policy  [ label = "disposition_at : filter_started_at"] type: string, parameter: body
List file version retentions  ->  Create legal hold policy  [ label = "applied_at : filter_started_at"] type: string, parameter: body
List file version retentions  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Create retention policy  [ label = "policy_name : policy_name"] type: string, parameter: body
List file version retentions  ->  Create retention policy  [ label = "retention_length : retention_length"] type: int, parameter: body
List file version retentions  ->  Create retention policy  [ label = "disposition_action : disposition_action"] type: string, parameter: body
List file version retentions  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List file version retentions  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List file version retentions  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List file version retentions  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Create task  [ label = "applied_at : due_at"] type: string, parameter: body
List file version retentions  ->  Create task  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Create task  [ label = "type : type"] type: string, parameter: body
List file version retentions  ->  Create task  [ label = "disposition_at : due_at"] type: string, parameter: body
List file version retentions  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List file version retentions  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List file version retentions  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List file version retentions  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List file version retentions  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List file version retentions  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List file version retentions  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version retentions  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List file version retentions  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List file version retentions  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version retentions  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List file version retentions  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List file version retentions  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version retentions  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List file version retentions  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List file version retentions  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List file version retentions  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List file version retentions  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List file version retentions  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List file version retentions  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List file version retentions  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List file version retentions  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version retentions  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List file version retentions  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List file version retentions  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List file version retentions  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version retentions  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List file version retentions  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version retentions  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version retentions  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List file version retentions  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List file version retentions  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List file version retentions  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List file version retentions  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List file version retentions  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List file version retentions  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List file version retentions  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List file version retentions  ->  Update file  [ label = "applied_at : expires_at"] type: string, parameter: body
List file version retentions  ->  Update file  [ label = "type : type"] type: string, parameter: body
List file version retentions  ->  Update file  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Update file  [ label = "applied_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Update file  [ label = "disposition_at : expires_at"] type: string, parameter: body
List file version retentions  ->  Update file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Update file  [ label = "applied_at : disposition_at"] type: string, parameter: body
List file version retentions  ->  Update file  [ label = "disposition_at : disposition_at"] type: string, parameter: body
List file version retentions  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Update folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List file version retentions  ->  Update folder  [ label = "applied_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Update retention policy  [ label = "disposition_action : disposition_action"] type: string, parameter: body
List file version retentions  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List file version retentions  ->  Update retention policy  [ label = "policy_name : policy_name"] type: string, parameter: body
List file version retentions  ->  Update retention policy  [ label = "retention_length : retention_length"] type: int, parameter: body
List file version retentions  ->  Update shared link on file  [ label = "applied_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List file version retentions  ->  Update shared link on file  [ label = "disposition_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Update shared link on folder  [ label = "disposition_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List file version retentions  ->  Update shared link on folder  [ label = "applied_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version retentions  ->  Update shared link on web link  [ label = "applied_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Update shared link on web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Update task  [ label = "applied_at : due_at"] type: string, parameter: body
List file version retentions  ->  Update task  [ label = "disposition_at : due_at"] type: string, parameter: body
List file version retentions  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List file version retentions  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List file version retentions  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List file version retentions  ->  Update web link  [ label = "disposition_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Update web link  [ label = "applied_at : unshared_at"] type: string, parameter: body
List file version retentions  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List file version retentions  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List file version retentions  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List folder collaborations  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
List folder collaborations  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
List folder collaborations  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
List folder collaborations  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder collaborations  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Assign task  [ label = "invite_email : login"] type: string, parameter: body
List folder collaborations  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List folder collaborations  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
List folder collaborations  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List folder collaborations  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Create collaboration  [ label = "invite_email : login"] type: string, parameter: body
List folder collaborations  ->  Create collaboration  [ label = "role : role"] type: string, parameter: body
List folder collaborations  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List folder collaborations  ->  Create folder  [ label = "access : access"] type: string, parameter: body
List folder collaborations  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
List folder collaborations  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
List folder collaborations  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
List folder collaborations  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List folder collaborations  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List folder collaborations  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
List folder collaborations  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List folder collaborations  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List folder collaborations  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List folder collaborations  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
List folder collaborations  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List folder collaborations  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
List folder collaborations  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
List folder collaborations  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List folder collaborations  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
List folder collaborations  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List folder collaborations  ->  Create task  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List folder collaborations  ->  Create task  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Create user  [ label = "name : name"] type: string, parameter: body
List folder collaborations  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
List folder collaborations  ->  Create user  [ label = "type : role"] type: string, parameter: body
List folder collaborations  ->  Create user invite  [ label = "invite_email : login"] type: string, parameter: body
List folder collaborations  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List folder collaborations  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List folder collaborations  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List folder collaborations  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List folder collaborations  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List folder collaborations  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder collaborations  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List folder collaborations  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List folder collaborations  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder collaborations  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List folder collaborations  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List folder collaborations  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder collaborations  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List folder collaborations  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
List folder collaborations  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List folder collaborations  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List folder collaborations  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List folder collaborations  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List folder collaborations  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List folder collaborations  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List folder collaborations  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List folder collaborations  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List folder collaborations  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List folder collaborations  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List folder collaborations  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List folder collaborations  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List folder collaborations  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder collaborations  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List folder collaborations  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List folder collaborations  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder collaborations  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List folder collaborations  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder collaborations  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder collaborations  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List folder collaborations  ->  Starts workflow based on request body  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List folder collaborations  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List folder collaborations  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List folder collaborations  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List folder collaborations  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List folder collaborations  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Update collaboration  [ label = "role : role"] type: string, parameter: body
List folder collaborations  ->  Update collaboration  [ label = "status : status"] type: string, parameter: body
List folder collaborations  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List folder collaborations  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "access : access"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
List folder collaborations  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
List folder collaborations  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
List folder collaborations  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update folder  [ label = "access : access"] type: string, parameter: body
List folder collaborations  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List folder collaborations  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List folder collaborations  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List folder collaborations  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List folder collaborations  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
List folder collaborations  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder collaborations  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
List folder collaborations  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder collaborations  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
List folder collaborations  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List folder collaborations  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List folder collaborations  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List folder collaborations  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
List folder collaborations  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
List folder collaborations  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List folder collaborations  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
List folder collaborations  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List folder collaborations  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List folder collaborations  ->  Update user  [ label = "type : role"] type: string, parameter: body
List folder collaborations  ->  Update user  [ label = "name : name"] type: string, parameter: body
List folder collaborations  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
List folder collaborations  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder collaborations  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update web link  [ label = "access : access"] type: string, parameter: body
List folder collaborations  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List folder collaborations  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List folder collaborations  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List folder locks  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder locks  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List folder locks  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List folder locks  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List folder locks  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
List folder locks  ->  Create task  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Create user  [ label = "type : role"] type: string, parameter: body
List folder locks  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List folder locks  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List folder locks  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List folder locks  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List folder locks  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder locks  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List folder locks  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List folder locks  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder locks  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List folder locks  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List folder locks  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder locks  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List folder locks  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List folder locks  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
List folder locks  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List folder locks  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List folder locks  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List folder locks  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List folder locks  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List folder locks  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List folder locks  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder locks  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List folder locks  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List folder locks  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder locks  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List folder locks  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder locks  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder locks  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Starts workflow based on request body  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List folder locks  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List folder locks  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List folder locks  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List folder locks  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Update file  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List folder locks  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List folder locks  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List folder locks  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List folder locks  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder locks  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List folder locks  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List folder locks  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List folder locks  ->  Update user  [ label = "type : role"] type: string, parameter: body
List folder locks  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List folder locks  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List group collaborations  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
List group collaborations  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
List group collaborations  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
List group collaborations  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List group collaborations  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Assign task  [ label = "invite_email : login"] type: string, parameter: body
List group collaborations  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List group collaborations  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
List group collaborations  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List group collaborations  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Create collaboration  [ label = "invite_email : login"] type: string, parameter: body
List group collaborations  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Create collaboration  [ label = "role : role"] type: string, parameter: body
List group collaborations  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List group collaborations  ->  Create folder  [ label = "access : access"] type: string, parameter: body
List group collaborations  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
List group collaborations  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List group collaborations  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
List group collaborations  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
List group collaborations  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List group collaborations  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
List group collaborations  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List group collaborations  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List group collaborations  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
List group collaborations  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List group collaborations  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List group collaborations  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Create task  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
List group collaborations  ->  Create task  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
List group collaborations  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List group collaborations  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
List group collaborations  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List group collaborations  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List group collaborations  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Create user  [ label = "name : name"] type: string, parameter: body
List group collaborations  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
List group collaborations  ->  Create user  [ label = "type : role"] type: string, parameter: body
List group collaborations  ->  Create user invite  [ label = "invite_email : login"] type: string, parameter: body
List group collaborations  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List group collaborations  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List group collaborations  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List group collaborations  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List group collaborations  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List group collaborations  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List group collaborations  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List group collaborations  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List group collaborations  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List group collaborations  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List group collaborations  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List group collaborations  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List group collaborations  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List group collaborations  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
List group collaborations  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List group collaborations  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List group collaborations  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List group collaborations  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List group collaborations  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List group collaborations  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List group collaborations  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List group collaborations  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List group collaborations  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List group collaborations  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List group collaborations  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List group collaborations  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List group collaborations  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List group collaborations  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List group collaborations  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List group collaborations  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List group collaborations  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List group collaborations  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List group collaborations  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List group collaborations  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List group collaborations  ->  Starts workflow based on request body  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List group collaborations  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List group collaborations  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List group collaborations  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List group collaborations  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List group collaborations  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Update collaboration  [ label = "status : status"] type: string, parameter: body
List group collaborations  ->  Update collaboration  [ label = "role : role"] type: string, parameter: body
List group collaborations  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List group collaborations  ->  Update file  [ label = "access : access"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
List group collaborations  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
List group collaborations  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update folder  [ label = "access : access"] type: string, parameter: body
List group collaborations  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List group collaborations  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List group collaborations  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List group collaborations  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List group collaborations  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
List group collaborations  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
List group collaborations  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List group collaborations  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
List group collaborations  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List group collaborations  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List group collaborations  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List group collaborations  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
List group collaborations  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
List group collaborations  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List group collaborations  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
List group collaborations  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List group collaborations  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List group collaborations  ->  Update user  [ label = "name : name"] type: string, parameter: body
List group collaborations  ->  Update user  [ label = "type : role"] type: string, parameter: body
List group collaborations  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List group collaborations  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
List group collaborations  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update web link  [ label = "access : access"] type: string, parameter: body
List group collaborations  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List group collaborations  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List group collaborations  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List group collaborations  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List groups for enterprise  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List groups for enterprise  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List groups for enterprise  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List groups for enterprise  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List groups for enterprise  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List groups for enterprise  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List groups for enterprise  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List groups for enterprise  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List groups for enterprise  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List groups for enterprise  ->  Create task  [ label = "id : id"] type: int, parameter: body
List groups for enterprise  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List groups for enterprise  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List groups for enterprise  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List groups for enterprise  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List groups for enterprise  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List groups for enterprise  ->  Update file  [ label = "id : id"] type: int, parameter: body
List groups for enterprise  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List groups for enterprise  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List items in folder  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List items in folder  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List items in folder  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List items in folder  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List items in folder  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List items in folder  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List items in folder  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List items in folder  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List items in folder  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List items in folder  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List items in folder  ->  Create task  [ label = "type : type"] type: string, parameter: body
List items in folder  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List items in folder  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List items in folder  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List items in folder  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List items in folder  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List items in folder  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List items in folder  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List items in folder  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List items in folder  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List items in folder  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List items in folder  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List items in folder  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List items in folder  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List items in folder  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List items in folder  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List items in folder  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List items in folder  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List items in folder  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List items in folder  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List items in folder  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List items in folder  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List items in folder  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List items in folder  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List items in folder  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List items in folder  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List items in folder  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List items in folder  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List items in folder  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List items in folder  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List items in folder  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List items in folder  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List items in folder  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List items in folder  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List items in folder  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List items in folder  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List items in folder  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List items in folder  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List items in folder  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List items in folder  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List items in folder  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List items in folder  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List items in folder  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List items in folder  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Update file  [ label = "type : type"] type: string, parameter: body
List items in folder  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List items in folder  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List items in folder  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List items in folder  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List items in folder  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List items in folder  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List items in folder  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List items in folder  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List items in folder  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List items in folder  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List legal hold policy assignments  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List legal hold policy assignments  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List legal hold policy assignments  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List legal hold policy assignments  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List legal hold policy assignments  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List legal hold policy assignments  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List legal hold policy assignments  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List legal hold policy assignments  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List legal hold policy assignments  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List legal hold policy assignments  ->  Create task  [ label = "id : id"] type: int, parameter: body
List legal hold policy assignments  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List legal hold policy assignments  ->  Update file  [ label = "id : id"] type: int, parameter: body
List legal hold policy assignments  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List legal hold policy assignments  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List members of group  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List members of group  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List members of group  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List members of group  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List members of group  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List members of group  ->  Add user to group  [ label = "role : role"] type: string, parameter: body
List members of group  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List members of group  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List members of group  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List members of group  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List members of group  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List members of group  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List members of group  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List members of group  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List members of group  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List members of group  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List members of group  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List members of group  ->  Create task  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List members of group  ->  Create user  [ label = "name : name"] type: string, parameter: body
List members of group  ->  Create user  [ label = "type : role"] type: string, parameter: body
List members of group  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List members of group  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List members of group  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List members of group  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List members of group  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List members of group  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List members of group  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List members of group  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List members of group  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List members of group  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List members of group  ->  Update file  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List members of group  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List members of group  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List members of group  ->  Update group membership  [ label = "role : role"] type: string, parameter: body
List members of group  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List members of group  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List members of group  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List members of group  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List members of group  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List members of group  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List members of group  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List members of group  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List members of group  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List members of group  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List members of group  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List members of group  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List members of group  ->  Update user  [ label = "name : name"] type: string, parameter: body
List members of group  ->  Update user  [ label = "type : role"] type: string, parameter: body
List members of group  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List members of group  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List metadata cascade policies  ->  Add initial classifications  [ label = "type : scope"] type: string, parameter: body
List metadata cascade policies  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List metadata cascade policies  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List metadata cascade policies  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List metadata cascade policies  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List metadata cascade policies  ->  Create metadata cascade policy  [ label = "type : scope"] type: string, parameter: body
List metadata cascade policies  ->  Create metadata cascade policy  [ label = "templateKey : templateKey"] type: string, parameter: body
List metadata cascade policies  ->  Create metadata cascade policy  [ label = "id : folder_id"] type: int, parameter: body
List metadata cascade policies  ->  Create metadata instance on file  [ label = "scope : scope"] type: string, parameter: path
List metadata cascade policies  ->  Create metadata instance on folder  [ label = "scope : scope"] type: string, parameter: path
List metadata cascade policies  ->  Create metadata template  [ label = "type : scope"] type: string, parameter: body
List metadata cascade policies  ->  Create metadata template  [ label = "templateKey : templateKey"] type: string, parameter: body
List metadata cascade policies  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List metadata cascade policies  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List metadata cascade policies  ->  Force-apply metadata cascade policy to folder  [ label = "id : metadata_cascade_policy_id"] type: int, parameter: path
List metadata cascade policies  ->  Get metadata cascade policy  [ label = "id : metadata_cascade_policy_id"] type: int, parameter: path
List metadata cascade policies  ->  Get metadata instance on file  [ label = "scope : scope"] type: string, parameter: path
List metadata cascade policies  ->  Get metadata instance on folder  [ label = "scope : scope"] type: string, parameter: path
List metadata cascade policies  ->  Get metadata template by name  [ label = "scope : scope"] type: string, parameter: path
List metadata cascade policies  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
List metadata cascade policies  ->  List metadata query indices  [ label = "scope : scope"] type: string, parameter: query
List metadata cascade policies  ->  Remove metadata cascade policy  [ label = "id : metadata_cascade_policy_id"] type: int, parameter: path
List metadata cascade policies  ->  Remove metadata instance from file  [ label = "scope : scope"] type: string, parameter: path
List metadata cascade policies  ->  Remove metadata instance from folder  [ label = "scope : scope"] type: string, parameter: path
List metadata cascade policies  ->  Remove metadata template  [ label = "scope : scope"] type: string, parameter: path
List metadata cascade policies  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List metadata cascade policies  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List metadata cascade policies  ->  Update metadata instance on file  [ label = "scope : scope"] type: string, parameter: path
List metadata cascade policies  ->  Update metadata instance on folder  [ label = "scope : scope"] type: string, parameter: path
List metadata cascade policies  ->  Update metadata template  [ label = "scope : scope"] type: string, parameter: path
List metadata query indices  ->  Copy file request  [ label = "status : status"] type: string, parameter: body
List metadata query indices  ->  Create user  [ label = "status : status"] type: string, parameter: body
List metadata query indices  ->  Query files/folders by metadata  [ label = "sort_direction : direction"] type: string, parameter: body
List metadata query indices  ->  Update file request  [ label = "status : status"] type: string, parameter: body
List metadata query indices  ->  Update user  [ label = "status : status"] type: string, parameter: body
List parts  ->  Commit upload session  [ label = "part_id : part_id"] type: string, parameter: body
List parts  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List parts  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List parts  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List parts  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List parts  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List pending collaborations  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List pending collaborations  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
List pending collaborations  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
List pending collaborations  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List pending collaborations  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
List pending collaborations  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Assign task  [ label = "invite_email : login"] type: string, parameter: body
List pending collaborations  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List pending collaborations  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
List pending collaborations  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List pending collaborations  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Create collaboration  [ label = "role : role"] type: string, parameter: body
List pending collaborations  ->  Create collaboration  [ label = "invite_email : login"] type: string, parameter: body
List pending collaborations  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List pending collaborations  ->  Create folder  [ label = "access : access"] type: string, parameter: body
List pending collaborations  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List pending collaborations  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
List pending collaborations  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
List pending collaborations  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
List pending collaborations  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List pending collaborations  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
List pending collaborations  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List pending collaborations  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List pending collaborations  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
List pending collaborations  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List pending collaborations  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List pending collaborations  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List pending collaborations  ->  Create task  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List pending collaborations  ->  Create task  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
List pending collaborations  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List pending collaborations  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
List pending collaborations  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
List pending collaborations  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Create user  [ label = "type : role"] type: string, parameter: body
List pending collaborations  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
List pending collaborations  ->  Create user  [ label = "name : name"] type: string, parameter: body
List pending collaborations  ->  Create user invite  [ label = "invite_email : login"] type: string, parameter: body
List pending collaborations  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List pending collaborations  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List pending collaborations  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List pending collaborations  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List pending collaborations  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List pending collaborations  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List pending collaborations  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List pending collaborations  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List pending collaborations  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List pending collaborations  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List pending collaborations  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List pending collaborations  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List pending collaborations  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
List pending collaborations  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List pending collaborations  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List pending collaborations  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List pending collaborations  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List pending collaborations  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List pending collaborations  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List pending collaborations  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List pending collaborations  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List pending collaborations  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List pending collaborations  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List pending collaborations  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List pending collaborations  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List pending collaborations  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List pending collaborations  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List pending collaborations  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List pending collaborations  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List pending collaborations  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List pending collaborations  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List pending collaborations  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List pending collaborations  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List pending collaborations  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List pending collaborations  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List pending collaborations  ->  Starts workflow based on request body  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List pending collaborations  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List pending collaborations  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List pending collaborations  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List pending collaborations  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Update collaboration  [ label = "role : role"] type: string, parameter: body
List pending collaborations  ->  Update collaboration  [ label = "status : status"] type: string, parameter: body
List pending collaborations  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List pending collaborations  ->  Update file  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "access : access"] type: string, parameter: body
List pending collaborations  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
List pending collaborations  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update folder  [ label = "access : access"] type: string, parameter: body
List pending collaborations  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List pending collaborations  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List pending collaborations  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List pending collaborations  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
List pending collaborations  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List pending collaborations  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List pending collaborations  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
List pending collaborations  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
List pending collaborations  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List pending collaborations  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
List pending collaborations  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
List pending collaborations  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List pending collaborations  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List pending collaborations  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List pending collaborations  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
List pending collaborations  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List pending collaborations  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List pending collaborations  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List pending collaborations  ->  Update user  [ label = "type : role"] type: string, parameter: body
List pending collaborations  ->  Update user  [ label = "name : name"] type: string, parameter: body
List pending collaborations  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
List pending collaborations  ->  Update web link  [ label = "access : access"] type: string, parameter: body
List pending collaborations  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List pending collaborations  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List pending collaborations  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List pending collaborations  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Add shared link to web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Create folder  [ label = "access : access"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "assigned_at : filter_started_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create legal hold policy  [ label = "deleted_at : filter_started_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create task  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Create task  [ label = "assigned_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create task  [ label = "deleted_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create task  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Create user  [ label = "type : role"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create user  [ label = "name : name"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List previous file versions for legal hold policy assignment  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
List previous file versions for legal hold policy assignment  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List previous file versions for legal hold policy assignment  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List previous file versions for legal hold policy assignment  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List previous file versions for legal hold policy assignment  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List previous file versions for legal hold policy assignment  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List previous file versions for legal hold policy assignment  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List previous file versions for legal hold policy assignment  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List previous file versions for legal hold policy assignment  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "assigned_at : disposition_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "access : access"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "assigned_at : expires_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "deleted_at : disposition_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "deleted_at : expires_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update folder  [ label = "access : access"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update task  [ label = "deleted_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update task  [ label = "assigned_at : due_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update user  [ label = "name : name"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update user  [ label = "type : role"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update web link  [ label = "access : access"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List previous file versions for legal hold policy assignment  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update web link  [ label = "deleted_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List previous file versions for legal hold policy assignment  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List recently accessed items  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
List recently accessed items  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
List recently accessed items  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List recently accessed items  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
List recently accessed items  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List recently accessed items  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
List recently accessed items  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Create Box Skill cards on file  [ label = "interacted_at : created_at"] type: string, parameter: body
List recently accessed items  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List recently accessed items  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List recently accessed items  ->  Create folder  [ label = "access : access"] type: string, parameter: body
List recently accessed items  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
List recently accessed items  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List recently accessed items  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List recently accessed items  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
List recently accessed items  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
List recently accessed items  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
List recently accessed items  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List recently accessed items  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List recently accessed items  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List recently accessed items  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
List recently accessed items  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List recently accessed items  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List recently accessed items  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List recently accessed items  ->  Create task  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Create task  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
List recently accessed items  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
List recently accessed items  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
List recently accessed items  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List recently accessed items  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
List recently accessed items  ->  Create user  [ label = "name : name"] type: string, parameter: body
List recently accessed items  ->  Create user  [ label = "type : role"] type: string, parameter: body
List recently accessed items  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List recently accessed items  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List recently accessed items  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List recently accessed items  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List recently accessed items  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Get file versions under retention  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  Get files under retention  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List recently accessed items  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List recently accessed items  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List recently accessed items  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List recently accessed items  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List recently accessed items  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List recently accessed items  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List recently accessed items  ->  List Box Sign templates  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List recently accessed items  ->  List Slack integration mappings  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List recently accessed items  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
List recently accessed items  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  List all global metadata templates  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List all legal hold policies  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List all metadata templates for enterprise  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List all webhooks  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List allowed collaboration domains  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List current file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List enterprise device pins  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List enterprise users  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  List file collaborations  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  List file version legal holds  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List recently accessed items  ->  List file version retentions  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List recently accessed items  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  List items in folder  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List legal hold policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List recently accessed items  ->  List metadata cascade policies  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  List previous file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List retention policies  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List retention policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List shield information barrier reports  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List shield information barrier segment members  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List shield information barrier segment restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List shield information barrier segments  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List shield information barriers  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List sign requests  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List storage policies  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List recently accessed items  ->  List storage policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List recently accessed items  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  List trashed items  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List recently accessed items  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List recently accessed items  ->  List users exempt from collaboration domain restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List workflows  [ label = "next_marker : marker"] type: string, parameter: query
List recently accessed items  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List recently accessed items  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List recently accessed items  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List recently accessed items  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List recently accessed items  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List recently accessed items  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List recently accessed items  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List recently accessed items  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List recently accessed items  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List recently accessed items  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List recently accessed items  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List recently accessed items  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List recently accessed items  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
List recently accessed items  ->  Update all Box Skill cards on file  [ label = "interacted_at : created_at"] type: string, parameter: body
List recently accessed items  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List recently accessed items  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List recently accessed items  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "access : access"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
List recently accessed items  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
List recently accessed items  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Update folder  [ label = "access : access"] type: string, parameter: body
List recently accessed items  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List recently accessed items  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List recently accessed items  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List recently accessed items  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List recently accessed items  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
List recently accessed items  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
List recently accessed items  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List recently accessed items  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
List recently accessed items  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List recently accessed items  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
List recently accessed items  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
List recently accessed items  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List recently accessed items  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List recently accessed items  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
List recently accessed items  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
List recently accessed items  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List recently accessed items  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List recently accessed items  ->  Update user  [ label = "name : name"] type: string, parameter: body
List recently accessed items  ->  Update user  [ label = "type : role"] type: string, parameter: body
List recently accessed items  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
List recently accessed items  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List recently accessed items  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update web link  [ label = "access : access"] type: string, parameter: body
List recently accessed items  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List recently accessed items  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List recently accessed items  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List recently accessed items  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List retention policies  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policies  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List retention policies  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Create retention policy  [ label = "retention_length : retention_length"] type: int, parameter: body
List retention policies  ->  Create retention policy  [ label = "policy_name : policy_name"] type: string, parameter: body
List retention policies  ->  Create retention policy  [ label = "disposition_action : disposition_action"] type: string, parameter: body
List retention policies  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List retention policies  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List retention policies  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List retention policies  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List retention policies  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List retention policies  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List retention policies  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Get file versions under retention  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  Get files under retention  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policies  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List retention policies  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List retention policies  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policies  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List retention policies  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List retention policies  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policies  ->  List Box Sign templates  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List retention policies  ->  List Slack integration mappings  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List retention policies  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  List all global metadata templates  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List all legal hold policies  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List all metadata templates for enterprise  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List all webhooks  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List allowed collaboration domains  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List current file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List enterprise device pins  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List enterprise users  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List file collaborations  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  List file version legal holds  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List file version retentions  [ label = "disposition_action : disposition_action"] type: string, parameter: query
List retention policies  ->  List file version retentions  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List retention policies  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  List items in folder  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List legal hold policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List metadata cascade policies  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  List previous file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List recently accessed items  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List retention policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List shield information barrier reports  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List shield information barrier segment members  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List shield information barrier segment restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List shield information barrier segments  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List shield information barriers  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List sign requests  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List storage policies  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List storage policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List retention policies  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  List trashed items  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List retention policies  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List retention policies  ->  List users exempt from collaboration domain restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List workflows  [ label = "next_marker : marker"] type: string, parameter: query
List retention policies  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List retention policies  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policies  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List retention policies  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List retention policies  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policies  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List retention policies  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policies  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policies  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List retention policies  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List retention policies  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List retention policies  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List retention policies  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Update retention policy  [ label = "policy_name : policy_name"] type: string, parameter: body
List retention policies  ->  Update retention policy  [ label = "retention_length : retention_length"] type: int, parameter: body
List retention policies  ->  Update retention policy  [ label = "disposition_action : disposition_action"] type: string, parameter: body
List retention policies  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List retention policies  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policies  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policies  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List retention policies  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List retention policies  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List retention policies  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policies  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List retention policy assignments  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policy assignments  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List retention policy assignments  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List retention policy assignments  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List retention policy assignments  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List retention policy assignments  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List retention policy assignments  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List retention policy assignments  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List retention policy assignments  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Get file versions under retention  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  Get files under retention  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policy assignments  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List retention policy assignments  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List retention policy assignments  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policy assignments  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List retention policy assignments  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List retention policy assignments  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policy assignments  ->  List Box Sign templates  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List retention policy assignments  ->  List Slack integration mappings  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List retention policy assignments  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  List all global metadata templates  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List all legal hold policies  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List all metadata templates for enterprise  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List all webhooks  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List allowed collaboration domains  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List current file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List enterprise device pins  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List enterprise users  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  List file collaborations  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  List file version legal holds  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List file version retentions  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List retention policy assignments  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  List items in folder  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List legal hold policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List metadata cascade policies  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  List previous file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List recently accessed items  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List retention policies  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List shield information barrier reports  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List shield information barrier segment members  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List shield information barrier segment restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List shield information barrier segments  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List shield information barriers  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List sign requests  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List storage policies  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List storage policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List retention policy assignments  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  List trashed items  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List retention policy assignments  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List retention policy assignments  ->  List users exempt from collaboration domain restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List workflows  [ label = "next_marker : marker"] type: string, parameter: query
List retention policy assignments  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List retention policy assignments  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policy assignments  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List retention policy assignments  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List retention policy assignments  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policy assignments  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List retention policy assignments  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policy assignments  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policy assignments  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List retention policy assignments  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List retention policy assignments  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List retention policy assignments  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List retention policy assignments  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List retention policy assignments  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List retention policy assignments  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policy assignments  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List retention policy assignments  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List retention policy assignments  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List retention policy assignments  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List retention policy assignments  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List shield information barrier reports  ->  Add changed status of shield information barrier with specified ID  [ label = "status : status"] type: string, parameter: body
List shield information barrier reports  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List shield information barrier reports  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List shield information barrier reports  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List shield information barrier reports  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Create shield information barrier  [ label = "updated_at : updated_at"] type: string, parameter: body
List shield information barrier reports  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Create shield information barrier  [ label = "updated_at : enabled_at"] type: string, parameter: body
List shield information barrier reports  ->  Create shield information barrier  [ label = "created_at : created_at"] type: string, parameter: body
List shield information barrier reports  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List shield information barrier reports  ->  Create shield information barrier report  [ label = "type : type"] type: string, parameter: body
List shield information barrier reports  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Create shield information barrier segment  [ label = "type : type"] type: string, parameter: body
List shield information barrier reports  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List shield information barrier reports  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Create shield information barrier segment restriction  [ label = "type : type"] type: string, parameter: body
List shield information barrier reports  ->  Create task  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List shield information barrier reports  ->  Create user  [ label = "type : role"] type: string, parameter: body
List shield information barrier reports  ->  Get file versions under retention  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  Get files under retention  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List Box Sign templates  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List Slack integration mappings  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List all global metadata templates  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List all legal hold policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List all metadata templates for enterprise  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List all webhooks  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List allowed collaboration domains  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List current file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List enterprise device pins  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List enterprise users  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List file collaborations  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List file version legal holds  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List file version retentions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List items in folder  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List legal hold policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List metadata cascade policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List pending collaborations  [ label = "status : status"] type: string, parameter: query
List shield information barrier reports  ->  List previous file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List recently accessed items  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List retention policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List retention policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List shield information barrier segment members  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List shield information barrier segment restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List shield information barrier segments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List shield information barriers  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List sign requests  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List storage policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List shield information barrier reports  ->  List storage policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List trashed items  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List users exempt from collaboration domain restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  List workflows  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier reports  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Update file  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List shield information barrier reports  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List shield information barrier reports  ->  Update user  [ label = "type : role"] type: string, parameter: body
List shield information barrier segment members  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment members  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment members  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment members  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment members  ->  Create shield information barrier  [ label = "updated_at : updated_at"] type: string, parameter: body
List shield information barrier segment members  ->  Create shield information barrier  [ label = "created_at : created_at"] type: string, parameter: body
List shield information barrier segment members  ->  Create shield information barrier  [ label = "updated_at : enabled_at"] type: string, parameter: body
List shield information barrier segment members  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Create shield information barrier report  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment members  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Create shield information barrier segment  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment members  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment members  ->  Create shield information barrier segment restriction  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment members  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Create task  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment members  ->  Create user  [ label = "type : role"] type: string, parameter: body
List shield information barrier segment members  ->  Get file versions under retention  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  Get files under retention  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List Box Sign templates  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List Slack integration mappings  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List all global metadata templates  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List all legal hold policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List all metadata templates for enterprise  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List all webhooks  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List allowed collaboration domains  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List current file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List enterprise device pins  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List enterprise users  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List file collaborations  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List file version legal holds  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List file version retentions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List items in folder  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List legal hold policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List metadata cascade policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List previous file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List recently accessed items  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List retention policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List retention policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List shield information barrier reports  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List shield information barrier segment restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List shield information barrier segments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List shield information barriers  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List sign requests  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List storage policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List storage policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List shield information barrier segment members  ->  List trashed items  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List users exempt from collaboration domain restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  List workflows  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment members  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Update file  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment members  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment members  ->  Update user  [ label = "type : role"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Add changed status of shield information barrier with specified ID  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Create shield information barrier  [ label = "updated_at : updated_at"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Create shield information barrier  [ label = "created_at : created_at"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Create shield information barrier  [ label = "updated_at : enabled_at"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Create shield information barrier report  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Create shield information barrier segment  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Create shield information barrier segment restriction  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Create task  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Create user  [ label = "type : role"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Get file versions under retention  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  Get files under retention  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  Get shield information barrier with specified ID  [ label = "id : shield_information_barrier_id"] type: int, parameter: path
List shield information barrier segment restrictions  ->  List Box Sign templates  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List Slack integration mappings  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List all global metadata templates  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List all legal hold policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List all metadata templates for enterprise  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List all webhooks  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List allowed collaboration domains  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List current file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List enterprise device pins  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List enterprise users  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List file collaborations  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List file version legal holds  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List file version retentions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List items in folder  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List legal hold policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List metadata cascade policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List previous file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List recently accessed items  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List retention policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List retention policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List shield information barrier reports  [ label = "id : shield_information_barrier_id"] type: int, parameter: query
List shield information barrier segment restrictions  ->  List shield information barrier reports  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List shield information barrier segment members  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List shield information barrier segments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List shield information barrier segments  [ label = "id : shield_information_barrier_id"] type: int, parameter: query
List shield information barrier segment restrictions  ->  List shield information barriers  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List sign requests  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List storage policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List storage policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List trashed items  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List users exempt from collaboration domain restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  List workflows  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segment restrictions  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Update file  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List shield information barrier segment restrictions  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List shield information barrier segment restrictions  ->  Update user  [ label = "type : role"] type: string, parameter: body
List shield information barrier segments  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List shield information barrier segments  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List shield information barrier segments  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List shield information barrier segments  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List shield information barrier segments  ->  Create shield information barrier  [ label = "created_at : created_at"] type: string, parameter: body
List shield information barrier segments  ->  Create shield information barrier  [ label = "updated_at : enabled_at"] type: string, parameter: body
List shield information barrier segments  ->  Create shield information barrier  [ label = "updated_at : updated_at"] type: string, parameter: body
List shield information barrier segments  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Create shield information barrier report  [ label = "type : type"] type: string, parameter: body
List shield information barrier segments  ->  Create shield information barrier segment  [ label = "name : name"] type: string, parameter: body
List shield information barrier segments  ->  Create shield information barrier segment  [ label = "type : type"] type: string, parameter: body
List shield information barrier segments  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List shield information barrier segments  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Create shield information barrier segment restriction  [ label = "type : type"] type: string, parameter: body
List shield information barrier segments  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Create task  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List shield information barrier segments  ->  Create user  [ label = "type : role"] type: string, parameter: body
List shield information barrier segments  ->  Get file versions under retention  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  Get files under retention  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List Box Sign templates  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List Slack integration mappings  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List all global metadata templates  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List all legal hold policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List all metadata templates for enterprise  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List all webhooks  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List allowed collaboration domains  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List current file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List enterprise device pins  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List enterprise users  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List file collaborations  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List file version legal holds  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List file version retentions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List items in folder  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List legal hold policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List metadata cascade policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List previous file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List recently accessed items  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List retention policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List retention policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List shield information barrier reports  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List shield information barrier segment members  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List shield information barrier segment restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List shield information barriers  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List sign requests  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List storage policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List storage policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List shield information barrier segments  ->  List trashed items  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List users exempt from collaboration domain restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  List workflows  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barrier segments  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Update file  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List shield information barrier segments  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List shield information barrier segments  ->  Update shield information barrier segment with specified ID  [ label = "name : name"] type: string, parameter: body
List shield information barrier segments  ->  Update user  [ label = "type : role"] type: string, parameter: body
List shield information barriers  ->  Add changed status of shield information barrier with specified ID  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Add initial classifications  [ label = "type : scope"] type: string, parameter: body
List shield information barriers  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List shield information barriers  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List shield information barriers  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Create metadata cascade policy  [ label = "type : scope"] type: string, parameter: body
List shield information barriers  ->  Create metadata template  [ label = "type : scope"] type: string, parameter: body
List shield information barriers  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List shield information barriers  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Create shield information barrier  [ label = "enabled_at : enabled_at"] type: string, parameter: body
List shield information barriers  ->  Create shield information barrier  [ label = "status : status"] type: string, parameter: body
List shield information barriers  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List shield information barriers  ->  Create shield information barrier  [ label = "updated_at : enabled_at"] type: string, parameter: body
List shield information barriers  ->  Create shield information barrier  [ label = "created_at : created_at"] type: string, parameter: body
List shield information barriers  ->  Create shield information barrier  [ label = "updated_at : updated_at"] type: string, parameter: body
List shield information barriers  ->  Create shield information barrier  [ label = "enabled_at : updated_at"] type: string, parameter: body
List shield information barriers  ->  Create shield information barrier report  [ label = "type : type"] type: string, parameter: body
List shield information barriers  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Create shield information barrier segment  [ label = "type : type"] type: string, parameter: body
List shield information barriers  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List shield information barriers  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Create shield information barrier segment restriction  [ label = "type : type"] type: string, parameter: body
List shield information barriers  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Create task  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List shield information barriers  ->  Create user  [ label = "type : role"] type: string, parameter: body
List shield information barriers  ->  Get file versions under retention  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  Get files under retention  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  Get shield information barrier with specified ID  [ label = "id : shield_information_barrier_id"] type: int, parameter: path
List shield information barriers  ->  List Box Sign templates  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List Slack integration mappings  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List all global metadata templates  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List all legal hold policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List all metadata templates for enterprise  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List all webhooks  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List allowed collaboration domains  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List current file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List enterprise device pins  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List enterprise users  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List file collaborations  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List file version legal holds  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List file version retentions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List items in folder  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List legal hold policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List metadata cascade policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List previous file versions for legal hold policy assignment  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List recently accessed items  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List retention policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List retention policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List shield information barrier reports  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List shield information barrier reports  [ label = "id : shield_information_barrier_id"] type: int, parameter: query
List shield information barriers  ->  List shield information barrier segment members  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List shield information barrier segment restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List shield information barrier segments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List shield information barrier segments  [ label = "id : shield_information_barrier_id"] type: int, parameter: query
List shield information barriers  ->  List sign requests  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List storage policies  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List shield information barriers  ->  List storage policy assignments  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List trashed items  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List users exempt from collaboration domain restrictions  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  List workflows  [ label = "next_marker : marker"] type: string, parameter: query
List shield information barriers  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Update file  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List shield information barriers  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List shield information barriers  ->  Update user  [ label = "type : role"] type: string, parameter: body
List sign requests  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List sign requests  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List sign requests  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List sign requests  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Copy file request  [ label = "external_id : file_request_id"] type: int, parameter: path
List sign requests  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List sign requests  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Create sign request  [ label = "date_value : date_value"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "external_id : external_id"] type: int, parameter: body
List sign requests  ->  Create sign request  [ label = "document_tag_id : document_tag_id"] type: int, parameter: body
List sign requests  ->  Create sign request  [ label = "email_subject : email_subject"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "embed_url_external_user_id : embed_url_external_user_id"] type: int, parameter: body
List sign requests  ->  Create sign request  [ label = "embed_url_external_user_id : document_tag_id"] type: int, parameter: body
List sign requests  ->  Create sign request  [ label = "template_id : template_id"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "declined_redirect_url : declined_redirect_url"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List sign requests  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List sign requests  ->  Create sign request  [ label = "verification_phone_number : verification_phone_number"] type: int, parameter: body
List sign requests  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "role : role"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "email_message : email_message"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List sign requests  ->  Create sign request  [ label = "document_tag_id : embed_url_external_user_id"] type: int, parameter: body
List sign requests  ->  Create sign request  [ label = "email : email"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "redirect_url : redirect_url"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "embed_url : redirect_url"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "finalized_at : date_value"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "auto_expire_at : date_value"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "type : text_value"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "password : password"] type: string, parameter: body
List sign requests  ->  Create sign request  [ label = "text_value : text_value"] type: string, parameter: body
List sign requests  ->  Create task  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List sign requests  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Delete file request  [ label = "external_id : file_request_id"] type: int, parameter: path
List sign requests  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List sign requests  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List sign requests  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List sign requests  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Get collaboration  [ label = "document_tag_id : collaboration_id"] type: int, parameter: path
List sign requests  ->  Get collaboration  [ label = "embed_url_external_user_id : collaboration_id"] type: int, parameter: path
List sign requests  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List sign requests  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Get file request  [ label = "external_id : file_request_id"] type: int, parameter: path
List sign requests  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Get file version  [ label = "embed_url_external_user_id : file_version_id"] type: int, parameter: path
List sign requests  ->  Get file version  [ label = "document_tag_id : file_version_id"] type: int, parameter: path
List sign requests  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List sign requests  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List sign requests  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List sign requests  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List sign requests  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List sign requests  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List sign requests  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List sign requests  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List sign requests  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
List sign requests  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List sign requests  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List sign requests  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List sign requests  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List sign requests  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List sign requests  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  List trashed items  [ label = "name : sort"] type: string, parameter: query
List sign requests  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List sign requests  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List sign requests  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List sign requests  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List sign requests  ->  Preflight check before upload  [ label = "external_id : id"] type: int, parameter: body
List sign requests  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Remove collaboration  [ label = "embed_url_external_user_id : collaboration_id"] type: int, parameter: path
List sign requests  ->  Remove collaboration  [ label = "document_tag_id : collaboration_id"] type: int, parameter: path
List sign requests  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List sign requests  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List sign requests  ->  Remove file version  [ label = "document_tag_id : file_version_id"] type: int, parameter: path
List sign requests  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Remove file version  [ label = "embed_url_external_user_id : file_version_id"] type: int, parameter: path
List sign requests  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List sign requests  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List sign requests  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List sign requests  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Restore file  [ label = "external_id : id"] type: int, parameter: body
List sign requests  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Restore file version  [ label = "document_tag_id : file_version_id"] type: int, parameter: path
List sign requests  ->  Restore file version  [ label = "embed_url_external_user_id : file_version_id"] type: int, parameter: path
List sign requests  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Restore folder  [ label = "external_id : id"] type: int, parameter: body
List sign requests  ->  Restore web link  [ label = "external_id : id"] type: int, parameter: body
List sign requests  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List sign requests  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List sign requests  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List sign requests  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List sign requests  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List sign requests  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List sign requests  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Update collaboration  [ label = "document_tag_id : collaboration_id"] type: int, parameter: path
List sign requests  ->  Update collaboration  [ label = "embed_url_external_user_id : collaboration_id"] type: int, parameter: path
List sign requests  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List sign requests  ->  Update file  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Update file  [ label = "external_id : id"] type: int, parameter: body
List sign requests  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Update file request  [ label = "external_id : file_request_id"] type: int, parameter: path
List sign requests  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List sign requests  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List sign requests  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List sign requests  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List sign requests  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List sign requests  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List sign requests  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List sign requests  ->  Update web link  [ label = "external_id : id"] type: int, parameter: body
List sign requests  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List sign requests  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List storage policies  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List storage policies  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Create task  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Update file  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List storage policies  ->  Update storage policy assignment  [ label = "type : type"] type: string, parameter: body
List storage policy assignments  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List storage policy assignments  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List storage policy assignments  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List storage policy assignments  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List storage policy assignments  ->  Create task  [ label = "type : type"] type: string, parameter: body
List storage policy assignments  ->  Create task  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List storage policy assignments  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List storage policy assignments  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List storage policy assignments  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List storage policy assignments  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List storage policy assignments  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List storage policy assignments  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List storage policy assignments  ->  Update file  [ label = "type : type"] type: string, parameter: body
List storage policy assignments  ->  Update file  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List storage policy assignments  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List storage policy assignments  ->  Update storage policy assignment  [ label = "type : type"] type: string, parameter: body
List storage policy assignments  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List task assignments  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Add shared link to file  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Add shared link to file  [ label = "completed_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Add shared link to file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Add shared link to folder  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Add shared link to folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Add shared link to folder  [ label = "completed_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Add shared link to web link  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Add shared link to web link  [ label = "completed_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Add shared link to web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List task assignments  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List task assignments  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List task assignments  ->  Create legal hold policy  [ label = "reminded_at : filter_started_at"] type: string, parameter: body
List task assignments  ->  Create legal hold policy  [ label = "completed_at : filter_started_at"] type: string, parameter: body
List task assignments  ->  Create legal hold policy  [ label = "assigned_at : filter_started_at"] type: string, parameter: body
List task assignments  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List task assignments  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List task assignments  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List task assignments  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List task assignments  ->  Create task  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Create task  [ label = "assigned_at : due_at"] type: string, parameter: body
List task assignments  ->  Create task  [ label = "reminded_at : due_at"] type: string, parameter: body
List task assignments  ->  Create task  [ label = "completed_at : due_at"] type: string, parameter: body
List task assignments  ->  Create task  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Create task  [ label = "message : message"] type: string, parameter: body
List task assignments  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Create user  [ label = "type : role"] type: string, parameter: body
List task assignments  ->  Create user  [ label = "name : name"] type: string, parameter: body
List task assignments  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List task assignments  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List task assignments  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List task assignments  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List task assignments  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List task assignments  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List task assignments  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List task assignments  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List task assignments  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List task assignments  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List task assignments  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List task assignments  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List task assignments  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List task assignments  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List task assignments  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List task assignments  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List task assignments  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List task assignments  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List task assignments  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List task assignments  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List task assignments  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List task assignments  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List task assignments  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List task assignments  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List task assignments  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List task assignments  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List task assignments  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List task assignments  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List task assignments  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List task assignments  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List task assignments  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List task assignments  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List task assignments  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List task assignments  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Update file  [ label = "assigned_at : disposition_at"] type: string, parameter: body
List task assignments  ->  Update file  [ label = "reminded_at : disposition_at"] type: string, parameter: body
List task assignments  ->  Update file  [ label = "reminded_at : expires_at"] type: string, parameter: body
List task assignments  ->  Update file  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Update file  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update file  [ label = "completed_at : expires_at"] type: string, parameter: body
List task assignments  ->  Update file  [ label = "assigned_at : expires_at"] type: string, parameter: body
List task assignments  ->  Update file  [ label = "completed_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update file  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Update file  [ label = "completed_at : disposition_at"] type: string, parameter: body
List task assignments  ->  Update folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Update folder  [ label = "completed_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Update folder  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List task assignments  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List task assignments  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List task assignments  ->  Update shared link on file  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update shared link on file  [ label = "completed_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List task assignments  ->  Update shared link on file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List task assignments  ->  Update shared link on folder  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update shared link on folder  [ label = "completed_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update shared link on folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update shared link on web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List task assignments  ->  Update shared link on web link  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update shared link on web link  [ label = "completed_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update task  [ label = "message : message"] type: string, parameter: body
List task assignments  ->  Update task  [ label = "completed_at : due_at"] type: string, parameter: body
List task assignments  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List task assignments  ->  Update task  [ label = "assigned_at : due_at"] type: string, parameter: body
List task assignments  ->  Update task  [ label = "reminded_at : due_at"] type: string, parameter: body
List task assignments  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List task assignments  ->  Update user  [ label = "type : role"] type: string, parameter: body
List task assignments  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List task assignments  ->  Update user  [ label = "name : name"] type: string, parameter: body
List task assignments  ->  Update web link  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update web link  [ label = "completed_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List task assignments  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List task assignments  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List task assignments  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List tasks on file  ->  Add shared link to file  [ label = "due_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to file  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Add shared link to file  [ label = "completed_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to folder  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to folder  [ label = "due_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to folder  [ label = "completed_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Add shared link to web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to web link  [ label = "due_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to web link  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to web link  [ label = "completed_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List tasks on file  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Assign task  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List tasks on file  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List tasks on file  ->  Create legal hold policy  [ label = "completed_at : filter_started_at"] type: string, parameter: body
List tasks on file  ->  Create legal hold policy  [ label = "assigned_at : filter_started_at"] type: string, parameter: body
List tasks on file  ->  Create legal hold policy  [ label = "reminded_at : filter_started_at"] type: string, parameter: body
List tasks on file  ->  Create legal hold policy  [ label = "due_at : filter_started_at"] type: string, parameter: body
List tasks on file  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List tasks on file  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List tasks on file  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List tasks on file  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List tasks on file  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List tasks on file  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Create task  [ label = "completed_at : due_at"] type: string, parameter: body
List tasks on file  ->  Create task  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Create task  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Create task  [ label = "due_at : due_at"] type: string, parameter: body
List tasks on file  ->  Create task  [ label = "action : action"] type: string, parameter: body
List tasks on file  ->  Create task  [ label = "reminded_at : due_at"] type: string, parameter: body
List tasks on file  ->  Create task  [ label = "completion_rule : completion_rule"] type: string, parameter: body
List tasks on file  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List tasks on file  ->  Create task  [ label = "message : message"] type: string, parameter: body
List tasks on file  ->  Create task  [ label = "assigned_at : due_at"] type: string, parameter: body
List tasks on file  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Create user  [ label = "type : role"] type: string, parameter: body
List tasks on file  ->  Create user  [ label = "name : name"] type: string, parameter: body
List tasks on file  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List tasks on file  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List tasks on file  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List tasks on file  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List tasks on file  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List tasks on file  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List tasks on file  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List tasks on file  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List tasks on file  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List tasks on file  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List tasks on file  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List tasks on file  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List tasks on file  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List tasks on file  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List tasks on file  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List tasks on file  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List tasks on file  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List tasks on file  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List tasks on file  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List tasks on file  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List tasks on file  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List tasks on file  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List tasks on file  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List tasks on file  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List tasks on file  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List tasks on file  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List tasks on file  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List tasks on file  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List tasks on file  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List tasks on file  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List tasks on file  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List tasks on file  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List tasks on file  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List tasks on file  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List tasks on file  ->  Update file  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Update file  [ label = "due_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Update file  [ label = "assigned_at : disposition_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "due_at : expires_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "completed_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "assigned_at : expires_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "completed_at : disposition_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "due_at : disposition_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "reminded_at : disposition_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "reminded_at : expires_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "completed_at : expires_at"] type: string, parameter: body
List tasks on file  ->  Update file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Update folder  [ label = "completed_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Update folder  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Update folder  [ label = "due_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List tasks on file  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List tasks on file  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List tasks on file  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on file  [ label = "completed_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List tasks on file  ->  Update shared link on file  [ label = "due_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on file  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on file  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on folder  [ label = "due_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List tasks on file  ->  Update shared link on folder  [ label = "completed_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on folder  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on folder  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on web link  [ label = "due_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on web link  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on web link  [ label = "completed_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List tasks on file  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update shared link on web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List tasks on file  ->  Update task  [ label = "completion_rule : completion_rule"] type: string, parameter: body
List tasks on file  ->  Update task  [ label = "action : action"] type: string, parameter: body
List tasks on file  ->  Update task  [ label = "reminded_at : due_at"] type: string, parameter: body
List tasks on file  ->  Update task  [ label = "message : message"] type: string, parameter: body
List tasks on file  ->  Update task  [ label = "completed_at : due_at"] type: string, parameter: body
List tasks on file  ->  Update task  [ label = "assigned_at : due_at"] type: string, parameter: body
List tasks on file  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List tasks on file  ->  Update task  [ label = "due_at : due_at"] type: string, parameter: body
List tasks on file  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List tasks on file  ->  Update user  [ label = "type : role"] type: string, parameter: body
List tasks on file  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List tasks on file  ->  Update user  [ label = "name : name"] type: string, parameter: body
List tasks on file  ->  Update web link  [ label = "due_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List tasks on file  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update web link  [ label = "reminded_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update web link  [ label = "completed_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update web link  [ label = "assigned_at : unshared_at"] type: string, parameter: body
List tasks on file  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List tasks on file  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List terms of service user statuses  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List terms of service user statuses  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List terms of service user statuses  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List terms of service user statuses  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List terms of service user statuses  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List terms of service user statuses  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List terms of service user statuses  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List terms of service user statuses  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List terms of service user statuses  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List terms of service user statuses  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List terms of service user statuses  ->  Create task  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List terms of service user statuses  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List terms of service user statuses  ->  Create user  [ label = "name : name"] type: string, parameter: body
List terms of service user statuses  ->  Create user  [ label = "type : role"] type: string, parameter: body
List terms of service user statuses  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List terms of service user statuses  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List terms of service user statuses  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List terms of service user statuses  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List terms of service user statuses  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List terms of service user statuses  ->  Update file  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List terms of service user statuses  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List terms of service user statuses  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List terms of service user statuses  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List terms of service user statuses  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List terms of service user statuses  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List terms of service user statuses  ->  Update user  [ label = "name : name"] type: string, parameter: body
List terms of service user statuses  ->  Update user  [ label = "type : role"] type: string, parameter: body
List terms of service user statuses  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of service user statuses  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Add initial classifications  [ label = "type : scope"] type: string, parameter: body
List terms of services  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List terms of services  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List terms of services  ->  Create metadata cascade policy  [ label = "type : scope"] type: string, parameter: body
List terms of services  ->  Create metadata template  [ label = "type : scope"] type: string, parameter: body
List terms of services  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List terms of services  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Create task  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List terms of services  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List terms of services  ->  Create terms of service  [ label = "tos_type : tos_type"] type: string, parameter: body
List terms of services  ->  Create terms of service  [ label = "status : status"] type: string, parameter: body
List terms of services  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List terms of services  ->  List enterprise users  [ label = "tos_type : user_type"] type: string, parameter: query
List terms of services  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List terms of services  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List terms of services  ->  Update file  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List terms of services  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List terms of services  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List terms of services  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List terms of services  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List terms of services  ->  Update terms of service  [ label = "status : status"] type: string, parameter: body
List terms of services  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List terms of services  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List trashed items  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List trashed items  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List trashed items  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
List trashed items  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List trashed items  ->  Create comment  [ label = "type : type"] type: string, parameter: body
List trashed items  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List trashed items  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List trashed items  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
List trashed items  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
List trashed items  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List trashed items  ->  Create task  [ label = "type : type"] type: string, parameter: body
List trashed items  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
List trashed items  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
List trashed items  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List trashed items  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List trashed items  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List trashed items  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List trashed items  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List trashed items  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List trashed items  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List trashed items  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List trashed items  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List trashed items  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List trashed items  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List trashed items  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List trashed items  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List trashed items  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List trashed items  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List trashed items  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List trashed items  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
List trashed items  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List trashed items  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List trashed items  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
List trashed items  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List trashed items  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List trashed items  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List trashed items  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
List trashed items  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List trashed items  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
List trashed items  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List trashed items  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List trashed items  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List trashed items  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List trashed items  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List trashed items  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List trashed items  ->  Search for content  [ label = "type : type"] type: string, parameter: query
List trashed items  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List trashed items  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List trashed items  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List trashed items  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List trashed items  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
List trashed items  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
List trashed items  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List trashed items  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Update file  [ label = "type : type"] type: string, parameter: body
List trashed items  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Update folder  [ label = "type : type"] type: string, parameter: body
List trashed items  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List trashed items  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List trashed items  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List trashed items  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List trashed items  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List trashed items  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List trashed items  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List trashed items  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
List trashed items  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
List user and enterprise events  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List user and enterprise events  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Copy file request  [ label = "status : status"] type: string, parameter: body
List user and enterprise events  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List user and enterprise events  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List user and enterprise events  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List user and enterprise events  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List user and enterprise events  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List user and enterprise events  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List user and enterprise events  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List user and enterprise events  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List user and enterprise events  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List user and enterprise events  ->  Create task  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List user and enterprise events  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List user and enterprise events  ->  Create user  [ label = "status : status"] type: string, parameter: body
List user and enterprise events  ->  Create user  [ label = "language : language"] type: string, parameter: body
List user and enterprise events  ->  Create user  [ label = "name : name"] type: string, parameter: body
List user and enterprise events  ->  Create user  [ label = "address : address"] type: string, parameter: body
List user and enterprise events  ->  Create user  [ label = "type : role"] type: string, parameter: body
List user and enterprise events  ->  Create user  [ label = "job_title : job_title"] type: string, parameter: body
List user and enterprise events  ->  Create user  [ label = "timezone : timezone"] type: string, parameter: body
List user and enterprise events  ->  Create user  [ label = "phone : phone"] type: int, parameter: body
List user and enterprise events  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List user and enterprise events  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List user and enterprise events  ->  Update file  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List user and enterprise events  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List user and enterprise events  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List user and enterprise events  ->  Update file request  [ label = "status : status"] type: string, parameter: body
List user and enterprise events  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List user and enterprise events  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List user and enterprise events  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List user and enterprise events  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List user and enterprise events  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List user and enterprise events  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List user and enterprise events  ->  Update user  [ label = "language : language"] type: string, parameter: body
List user and enterprise events  ->  Update user  [ label = "address : address"] type: string, parameter: body
List user and enterprise events  ->  Update user  [ label = "job_title : job_title"] type: string, parameter: body
List user and enterprise events  ->  Update user  [ label = "timezone : timezone"] type: string, parameter: body
List user and enterprise events  ->  Update user  [ label = "phone : phone"] type: int, parameter: body
List user and enterprise events  ->  Update user  [ label = "email : email"] type: string, parameter: body
List user and enterprise events  ->  Update user  [ label = "status : status"] type: string, parameter: body
List user and enterprise events  ->  Update user  [ label = "name : name"] type: string, parameter: body
List user and enterprise events  ->  Update user  [ label = "type : role"] type: string, parameter: body
List user and enterprise events  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List user and enterprise events  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user's email aliases  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List user's email aliases  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List user's email aliases  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List user's email aliases  ->  Create email alias  [ label = "email : email"] type: string, parameter: body
List user's email aliases  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List user's email aliases  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List user's email aliases  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List user's email aliases  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List user's email aliases  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List user's email aliases  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List user's email aliases  ->  Create task  [ label = "id : id"] type: int, parameter: body
List user's email aliases  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List user's email aliases  ->  Update file  [ label = "id : id"] type: int, parameter: body
List user's email aliases  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List user's email aliases  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Add user to group  [ label = "role : role"] type: string, parameter: body
List user's groups  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List user's groups  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List user's groups  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List user's groups  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List user's groups  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List user's groups  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List user's groups  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List user's groups  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List user's groups  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List user's groups  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Create task  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List user's groups  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List user's groups  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List user's groups  ->  Create user  [ label = "type : role"] type: string, parameter: body
List user's groups  ->  Create user  [ label = "name : name"] type: string, parameter: body
List user's groups  ->  Get folder information  [ label = "direction : direction"] type: string, parameter: query
List user's groups  ->  List enterprise device pins  [ label = "direction : direction"] type: string, parameter: query
List user's groups  ->  List items in folder  [ label = "direction : direction"] type: string, parameter: query
List user's groups  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List user's groups  ->  List trashed items  [ label = "direction : direction"] type: string, parameter: query
List user's groups  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List user's groups  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List user's groups  ->  Update file  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List user's groups  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List user's groups  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Update group membership  [ label = "role : role"] type: string, parameter: body
List user's groups  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List user's groups  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List user's groups  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List user's groups  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List user's groups  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List user's groups  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List user's groups  ->  Update user  [ label = "name : name"] type: string, parameter: body
List user's groups  ->  Update user  [ label = "type : role"] type: string, parameter: body
List user's groups  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List user's groups  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Add initial classifications  [ label = "type : scope"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create metadata cascade policy  [ label = "type : scope"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create metadata template  [ label = "type : scope"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create task  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create user  [ label = "name : name"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Create user  [ label = "type : role"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List users exempt from collaboration domain restrictions  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update file  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List users exempt from collaboration domain restrictions  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update user  [ label = "type : role"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update user  [ label = "name : name"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List users exempt from collaboration domain restrictions  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
List workflows  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
List workflows  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
List workflows  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List workflows  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
List workflows  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List workflows  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Assign task  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Create comment  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
List workflows  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
List workflows  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
List workflows  ->  Create task  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Create user  [ label = "type : role"] type: string, parameter: body
List workflows  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
List workflows  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
List workflows  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
List workflows  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
List workflows  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
List workflows  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
List workflows  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List workflows  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
List workflows  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
List workflows  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
List workflows  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
List workflows  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
List workflows  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
List workflows  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
List workflows  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
List workflows  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
List workflows  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
List workflows  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
List workflows  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
List workflows  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List workflows  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
List workflows  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
List workflows  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
List workflows  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
List workflows  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
List workflows  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
List workflows  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
List workflows  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
List workflows  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
List workflows  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
List workflows  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
List workflows  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
List workflows  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
List workflows  ->  Update file  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List workflows  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Update folder  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
List workflows  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
List workflows  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
List workflows  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
List workflows  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
List workflows  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
List workflows  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List workflows  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
List workflows  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
List workflows  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
List workflows  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
List workflows  ->  Update user  [ label = "type : role"] type: string, parameter: body
List workflows  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
List workflows  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
List workflows  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
List workflows  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Add classification to file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Add classification to folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Add or update user avatar  [ label = "id : user_id"] type: int, parameter: path
Search for content  ->  Add shared link to file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Add shared link to file  [ label = "access : access"] type: string, parameter: body
Search for content  ->  Add shared link to file  [ label = "created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Add shared link to folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to folder  [ label = "access : access"] type: string, parameter: body
Search for content  ->  Add shared link to web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to web link  [ label = "access : access"] type: string, parameter: body
Search for content  ->  Add shared link to web link  [ label = "id : web_link_id"] type: int, parameter: path
Search for content  ->  Add shared link to web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Search for content  ->  Add shared link to web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Apply watermark to file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Apply watermark to folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Assign legal hold policy  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Assign storage policy  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Assign task  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Commit upload session  [ label = "sha1 : sha1"] type: string, parameter: body
Search for content  ->  Copy file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Copy file request  [ label = "item_status : status"] type: string, parameter: body
Search for content  ->  Copy file request  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Create Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Search for content  ->  Create Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Create Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Create collaboration  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Create collaboration  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Create comment  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Create comment  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Create email alias  [ label = "id : user_id"] type: int, parameter: path
Search for content  ->  Create folder  [ label = "access : access"] type: string, parameter: body
Search for content  ->  Create folder lock  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Create legal hold policy  [ label = "trashed_at : filter_started_at"] type: string, parameter: body
Search for content  ->  Create legal hold policy  [ label = "created_at : filter_started_at"] type: string, parameter: body
Search for content  ->  Create legal hold policy  [ label = "purged_at : filter_started_at"] type: string, parameter: body
Search for content  ->  Create legal hold policy  [ label = "content_created_at : filter_started_at"] type: string, parameter: body
Search for content  ->  Create legal hold policy  [ label = "content_modified_at : filter_started_at"] type: string, parameter: body
Search for content  ->  Create legal hold policy  [ label = "modified_at : filter_started_at"] type: string, parameter: body
Search for content  ->  Create metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Create metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Create retention policy  [ label = "name : name"] type: string, parameter: body
Search for content  ->  Create retention policy  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Create retention policy  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Create retention policy  [ label = "login : login"] type: string, parameter: body
Search for content  ->  Create shield information barrier  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Create shield information barrier  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Create shield information barrier report  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Create shield information barrier segment  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Create shield information barrier segment member  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Create shield information barrier segment member  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Create shield information barrier segment restriction  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Create sign request  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Create sign request  [ label = "sequence_id : sequence_id"] type: int, parameter: body
Search for content  ->  Create sign request  [ label = "name : name"] type: string, parameter: body
Search for content  ->  Create sign request  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Create sign request  [ label = "etag : etag"] type: int, parameter: body
Search for content  ->  Create task  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Create task  [ label = "content_created_at : due_at"] type: string, parameter: body
Search for content  ->  Create task  [ label = "modified_at : due_at"] type: string, parameter: body
Search for content  ->  Create task  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Create task  [ label = "trashed_at : due_at"] type: string, parameter: body
Search for content  ->  Create task  [ label = "purged_at : due_at"] type: string, parameter: body
Search for content  ->  Create task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Search for content  ->  Create task  [ label = "created_at : due_at"] type: string, parameter: body
Search for content  ->  Create terms of service status for new user  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Create upload session for existing file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Create user  [ label = "item_status : status"] type: string, parameter: body
Search for content  ->  Create user  [ label = "type : role"] type: string, parameter: body
Search for content  ->  Create user  [ label = "name : name"] type: string, parameter: body
Search for content  ->  Create webhook  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Create zip download  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Create zip download  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Delete file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Delete folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Delete folder lock  [ label = "id : folder_lock_id"] type: int, parameter: path
Search for content  ->  Delete user  [ label = "id : user_id"] type: int, parameter: path
Search for content  ->  Delete user avatar  [ label = "id : user_id"] type: int, parameter: path
Search for content  ->  Download file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Get classification on file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Get classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Get comment  [ label = "id : comment_id"] type: int, parameter: path
Search for content  ->  Get file information  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Get file thumbnail  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Get file version  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Get folder information  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Get metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Get metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Get shared link for file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Get shared link for folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Get shared link for web link  [ label = "id : web_link_id"] type: int, parameter: path
Search for content  ->  Get task  [ label = "id : task_id"] type: int, parameter: path
Search for content  ->  Get task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Search for content  ->  Get trashed file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Get trashed folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Get trashed web link  [ label = "id : web_link_id"] type: int, parameter: path
Search for content  ->  Get user  [ label = "id : user_id"] type: int, parameter: path
Search for content  ->  Get user avatar  [ label = "id : user_id"] type: int, parameter: path
Search for content  ->  Get watermark for folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Get watermark on file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Get web link  [ label = "id : web_link_id"] type: int, parameter: path
Search for content  ->  List Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  List Slack integration mappings  [ label = "id : partner_item_id"] type: int, parameter: query
Search for content  ->  List Slack integration mappings  [ label = "id : box_item_id"] type: int, parameter: query
Search for content  ->  List Slack integration mappings  [ label = "type : box_item_type"] type: string, parameter: query
Search for content  ->  List all file versions  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  List file collaborations  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  List file comments  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  List file version retentions  [ label = "etag : file_version_id"] type: int, parameter: query
Search for content  ->  List folder collaborations  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  List folder locks  [ label = "id : folder_id"] type: int, parameter: query
Search for content  ->  List items in folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  List legal hold policy assignments  [ label = "type : assign_to_type"] type: string, parameter: query
Search for content  ->  List metadata instances on file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  List metadata instances on folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  List storage policy assignments  [ label = "type : resolved_for_type"] type: string, parameter: query
Search for content  ->  List task assignments  [ label = "id : task_id"] type: int, parameter: path
Search for content  ->  List tasks on file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  List user's email aliases  [ label = "id : user_id"] type: int, parameter: path
Search for content  ->  List user's groups  [ label = "id : user_id"] type: int, parameter: path
Search for content  ->  List workflows  [ label = "id : folder_id"] type: int, parameter: query
Search for content  ->  Permanently remove file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Permanently remove folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Permanently remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Search for content  ->  Promote file version  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Promote file version  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Promote file version  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Remove Box Skill cards from file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Remove classification from file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Remove classification from folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Remove comment  [ label = "id : comment_id"] type: int, parameter: path
Search for content  ->  Remove email alias  [ label = "id : user_id"] type: int, parameter: path
Search for content  ->  Remove file version  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Remove metadata instance from file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Remove metadata instance from folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Remove shared link from file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Remove shared link from folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Remove shared link from web link  [ label = "id : web_link_id"] type: int, parameter: path
Search for content  ->  Remove task  [ label = "id : task_id"] type: int, parameter: path
Search for content  ->  Remove watermark from file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Remove watermark from folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Remove web link  [ label = "id : web_link_id"] type: int, parameter: path
Search for content  ->  Restore file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Restore file version  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Restore folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Restore web link  [ label = "id : web_link_id"] type: int, parameter: path
Search for content  ->  Starts workflow based on request body  [ label = "id : workflow_id"] type: int, parameter: path
Search for content  ->  Starts workflow based on request body  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Transfer owned folders  [ label = "id : user_id"] type: int, parameter: path
Search for content  ->  Unassign task  [ label = "id : task_assignment_id"] type: int, parameter: path
Search for content  ->  Update Box Skill cards on file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Update Slack integration mapping  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Update all Box Skill cards on file  [ label = "unshared_at : created_at"] type: string, parameter: body
Search for content  ->  Update all Box Skill cards on file  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Update all Box Skill cards on file  [ label = "type : unit"] type: string, parameter: body
Search for content  ->  Update classification on file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Update classification on folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Update comment  [ label = "id : comment_id"] type: int, parameter: path
Search for content  ->  Update file  [ label = "trashed_at : expires_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Update file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "modified_at : expires_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "purged_at : disposition_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "content_created_at : disposition_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "content_modified_at : expires_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "content_created_at : expires_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "trashed_at : disposition_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "access : can_download"] type: string, parameter: body
Search for content  ->  Update file  [ label = "created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "access : access"] type: string, parameter: body
Search for content  ->  Update file  [ label = "modified_at : disposition_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "created_at : disposition_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "content_modified_at : disposition_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Update file  [ label = "purged_at : expires_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Update file  [ label = "created_at : expires_at"] type: string, parameter: body
Search for content  ->  Update file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update file request  [ label = "item_status : status"] type: string, parameter: body
Search for content  ->  Update folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Update folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update folder  [ label = "access : access"] type: string, parameter: body
Search for content  ->  Update folder  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Update folder  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Update folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update metadata instance on file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Update metadata instance on folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Update retention policy  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Update retention policy  [ label = "login : login"] type: string, parameter: body
Search for content  ->  Update retention policy  [ label = "id : id"] type: int, parameter: body
Search for content  ->  Update retention policy  [ label = "name : name"] type: string, parameter: body
Search for content  ->  Update shared link on file  [ label = "purged_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on file  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on file  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on file  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on file  [ label = "modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on file  [ label = "created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on file  [ label = "id : file_id"] type: int, parameter: path
Search for content  ->  Update shared link on file  [ label = "access : access"] type: string, parameter: body
Search for content  ->  Update shared link on folder  [ label = "access : access"] type: string, parameter: body
Search for content  ->  Update shared link on folder  [ label = "created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on folder  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on folder  [ label = "modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on folder  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on folder  [ label = "purged_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on folder  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on folder  [ label = "id : folder_id"] type: int, parameter: path
Search for content  ->  Update shared link on web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on web link  [ label = "access : access"] type: string, parameter: body
Search for content  ->  Update shared link on web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on web link  [ label = "id : web_link_id"] type: int, parameter: path
Search for content  ->  Update shared link on web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update shared link on web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update task  [ label = "trashed_at : due_at"] type: string, parameter: body
Search for content  ->  Update task  [ label = "created_at : due_at"] type: string, parameter: body
Search for content  ->  Update task  [ label = "content_modified_at : due_at"] type: string, parameter: body
Search for content  ->  Update task  [ label = "content_created_at : due_at"] type: string, parameter: body
Search for content  ->  Update task  [ label = "modified_at : due_at"] type: string, parameter: body
Search for content  ->  Update task  [ label = "id : task_id"] type: int, parameter: path
Search for content  ->  Update task  [ label = "purged_at : due_at"] type: string, parameter: body
Search for content  ->  Update task assignment  [ label = "id : task_assignment_id"] type: int, parameter: path
Search for content  ->  Update user  [ label = "id : user_id"] type: int, parameter: path
Search for content  ->  Update user  [ label = "type : role"] type: string, parameter: body
Search for content  ->  Update user  [ label = "item_status : status"] type: string, parameter: body
Search for content  ->  Update user  [ label = "name : name"] type: string, parameter: body
Search for content  ->  Update web link  [ label = "modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update web link  [ label = "content_modified_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update web link  [ label = "content_created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update web link  [ label = "access : access"] type: string, parameter: body
Search for content  ->  Update web link  [ label = "purged_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update web link  [ label = "id : web_link_id"] type: int, parameter: path
Search for content  ->  Update web link  [ label = "created_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update web link  [ label = "trashed_at : unshared_at"] type: string, parameter: body
Search for content  ->  Update webhook  [ label = "type : type"] type: string, parameter: body
Search for content  ->  Upload file version  [ label = "id : file_id"] type: int, parameter: path
Remove device pin
Remove upload session
Delete shield information barrier segment member by ID
Create jobs to terminate user group session
Update terms of service status for existing user
Request access token
Resend sign request
Add classification
Create jobs to terminate users session
Delete classification
Delete all classifications
Revoke access token
Remove group
Create user exemption from collaboration domain restrictions
Authorize user
Upload part of file
Create web link
Remove webhook
Remove retention policy assignment
Cancel sign request
Refresh access token
Create upload session
Download zip archive
Upload file
Remove legal hold policy
Copy folder
Remove domain from list of allowed collaboration domains
Get events long poll endpoint
Unassign storage policy
Remove user from list of users exempt from domain restrictions
Remove user from group
Update classification
Delete shield information barrier segment
Delete shield information barrier segment restriction by ID
Update legal hold policy
Delete Slack integration mapping
Unassign legal hold policy
Delete retention policy

-----------List of endpoints and methods--------------

Authorize user, method: GET
Request access token, method: POST
Refresh access token, method: POST
Revoke access token, method: POST
List all classifications, method: GET
Add initial classifications, method: POST
Add classification, method: PUT
Update classification, method: PUT
Delete classification, method: PUT
Delete all classifications, method: DELETE
Get classification on file, method: GET
Add classification to file, method: POST
Update classification on file, method: PUT
Remove classification from file, method: DELETE
Get classification on folder, method: GET
Add classification to folder, method: POST
Update classification on folder, method: PUT
Remove classification from folder, method: DELETE
Get collaboration, method: GET
Create collaboration, method: POST
Update collaboration, method: PUT
Remove collaboration, method: DELETE
List file collaborations, method: GET
List folder collaborations, method: GET
List pending collaborations, method: GET
List group collaborations, method: GET
List all collections, method: GET
List collection items, method: GET
List file comments, method: GET
Get comment, method: GET
Create comment, method: POST
Update comment, method: PUT
Remove comment, method: DELETE
Get device pin, method: GET
List enterprise device pins, method: GET
Remove device pin, method: DELETE
List users exempt from collaboration domain restrictions, method: GET
Get user exempt from collaboration domain restrictions, method: GET
Create user exemption from collaboration domain restrictions, method: POST
Remove user from list of users exempt from domain restrictions, method: DELETE
List allowed collaboration domains, method: GET
Get allowed collaboration domain, method: GET
Add domain to list of allowed collaboration domains, method: POST
Remove domain from list of allowed collaboration domains, method: DELETE
Download file, method: GET
List user's email aliases, method: GET
Create email alias, method: POST
Remove email alias, method: DELETE
List user and enterprise events, method: GET
Get events long poll endpoint, method: OPTIONS
Get file request, method: GET
Copy file request, method: POST
Update file request, method: PUT
Delete file request, method: DELETE
Get file version legal hold, method: GET
List file version legal holds, method: GET
List file version retentions, method: GET
Get retention on file, method: GET
List all file versions, method: GET
Get file version, method: GET
Promote file version, method: POST
Restore file version, method: PUT
Remove file version, method: DELETE
Get file information, method: GET
Get file thumbnail, method: GET
Copy file, method: POST
Update file, method: PUT
Delete file, method: DELETE
List folder locks, method: GET
Create folder lock, method: POST
Delete folder lock, method: DELETE
Get folder information, method: GET
List items in folder, method: GET
Create folder, method: POST
Copy folder, method: POST
Update folder, method: PUT
Delete folder, method: DELETE
List user's groups, method: GET
List members of group, method: GET
Get group membership, method: GET
Add user to group, method: POST
Update group membership, method: PUT
Remove user from group, method: DELETE
List groups for enterprise, method: GET
Get group, method: GET
Create group, method: POST
Update group, method: PUT
Remove group, method: DELETE
List Slack integration mappings, method: GET
Create Slack integration mapping, method: POST
Update Slack integration mapping, method: PUT
Delete Slack integration mapping, method: DELETE
Get user invite status, method: GET
Create user invite, method: POST
List all legal hold policies, method: GET
Get legal hold policy, method: GET
Create legal hold policy, method: POST
Update legal hold policy, method: PUT
Remove legal hold policy, method: DELETE
List legal hold policy assignments, method: GET
Get legal hold policy assignment, method: GET
List current file versions for legal hold policy assignment, method: GET
List previous file versions for legal hold policy assignment, method: GET
Assign legal hold policy, method: POST
Unassign legal hold policy, method: DELETE
List metadata cascade policies, method: GET
Get metadata cascade policy, method: GET
Create metadata cascade policy, method: POST
Force-apply metadata cascade policy to folder, method: POST
Remove metadata cascade policy, method: DELETE
List metadata instances on file, method: GET
Get metadata instance on file, method: GET
Create metadata instance on file, method: POST
Update metadata instance on file, method: PUT
Remove metadata instance from file, method: DELETE
List metadata instances on folder, method: GET
Get metadata instance on folder, method: GET
Create metadata instance on folder, method: POST
Update metadata instance on folder, method: PUT
Remove metadata instance from folder, method: DELETE
Find metadata template by instance ID, method: GET
Get metadata template by name, method: GET
Get metadata template by ID, method: GET
List all global metadata templates, method: GET
List all metadata templates for enterprise, method: GET
Create metadata template, method: POST
Update metadata template, method: PUT
Remove metadata template, method: DELETE
List recently accessed items, method: GET
List retention policies, method: GET
Get retention policy, method: GET
Create retention policy, method: POST
Update retention policy, method: PUT
Delete retention policy, method: DELETE
List retention policy assignments, method: GET
Get retention policy assignment, method: GET
Get files under retention, method: GET
Get file versions under retention, method: GET
Assign retention policy, method: POST
Remove retention policy assignment, method: DELETE
List metadata query indices, method: GET
Search for content, method: GET
Query files/folders by metadata, method: POST
Create jobs to terminate users session, method: POST
Create jobs to terminate user group session, method: POST
Find file for shared link, method: GET
Get shared link for file, method: GET
Add shared link to file, method: PUT
Update shared link on file, method: PUT
Remove shared link from file, method: PUT
Find folder for shared link, method: GET
Get shared link for folder, method: GET
Add shared link to folder, method: PUT
Update shared link on folder, method: PUT
Remove shared link from folder, method: PUT
Find web link for shared link, method: GET
Get shared link for web link, method: GET
Add shared link to web link, method: PUT
Update shared link on web link, method: PUT
Remove shared link from web link, method: PUT
List shield information barrier reports, method: GET
Get shield information barrier report by ID, method: GET
Create shield information barrier report, method: POST
Get shield information barrier segment member by ID, method: GET
List shield information barrier segment members, method: GET
Create shield information barrier segment member, method: POST
Delete shield information barrier segment member by ID, method: DELETE
Get shield information barrier segment restriction by ID, method: GET
List shield information barrier segment restrictions, method: GET
Create shield information barrier segment restriction, method: POST
Delete shield information barrier segment restriction by ID, method: DELETE
Get shield information barrier segment with specified ID, method: GET
List shield information barrier segments, method: GET
Create shield information barrier segment, method: POST
Update shield information barrier segment with specified ID, method: PUT
Delete shield information barrier segment, method: DELETE
Get shield information barrier with specified ID, method: GET
List shield information barriers, method: GET
Add changed status of shield information barrier with specified ID, method: POST
Create shield information barrier, method: POST
Get sign request by ID, method: GET
List sign requests, method: GET
Cancel sign request, method: POST
Resend sign request, method: POST
Create sign request, method: POST
List Box Sign templates, method: GET
Get Box Sign template by ID, method: GET
List Box Skill cards on file, method: GET
Create Box Skill cards on file, method: POST
Update Box Skill cards on file, method: PUT
Update all Box Skill cards on file, method: PUT
Remove Box Skill cards from file, method: DELETE
List storage policies, method: GET
Get storage policy, method: GET
List storage policy assignments, method: GET
Get storage policy assignment, method: GET
Assign storage policy, method: POST
Update storage policy assignment, method: PUT
Unassign storage policy, method: DELETE
List task assignments, method: GET
Get task assignment, method: GET
Assign task, method: POST
Update task assignment, method: PUT
Unassign task, method: DELETE
List tasks on file, method: GET
Get task, method: GET
Create task, method: POST
Update task, method: PUT
Remove task, method: DELETE
List terms of services, method: GET
Get terms of service, method: GET
Create terms of service, method: POST
Update terms of service, method: PUT
List terms of service user statuses, method: GET
Create terms of service status for new user, method: POST
Update terms of service status for existing user, method: PUT
Transfer owned folders, method: PUT
Get trashed file, method: GET
Restore file, method: POST
Permanently remove file, method: DELETE
Get trashed folder, method: GET
Restore folder, method: POST
Permanently remove folder, method: DELETE
List trashed items, method: GET
Get trashed web link, method: GET
Restore web link, method: POST
Permanently remove web link, method: DELETE
Preflight check before upload, method: OPTIONS
Upload file version, method: POST
Upload file, method: POST
Get upload session, method: GET
List parts, method: GET
Create upload session, method: POST
Create upload session for existing file, method: POST
Commit upload session, method: POST
Upload part of file, method: PUT
Remove upload session, method: DELETE
Get user avatar, method: GET
Add or update user avatar, method: POST
Delete user avatar, method: DELETE
List enterprise users, method: GET
Get current user, method: GET
Get user, method: GET
Create user, method: POST
Update user, method: PUT
Delete user, method: DELETE
Get watermark on file, method: GET
Apply watermark to file, method: PUT
Remove watermark from file, method: DELETE
Get watermark for folder, method: GET
Apply watermark to folder, method: PUT
Remove watermark from folder, method: DELETE
Get web link, method: GET
Create web link, method: POST
Update web link, method: PUT
Remove web link, method: DELETE
List all webhooks, method: GET
Get webhook, method: GET
Create webhook, method: POST
Update webhook, method: PUT
Remove webhook, method: DELETE
List workflows, method: GET
Starts workflow based on request body, method: POST
Download zip archive, method: GET
Get zip download status, method: GET
Create zip download, method: POST
