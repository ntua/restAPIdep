{
	"info": {
		"_postman_id": "88723297-53c3-4e14-9f94-69578d613996",
		"name": "Twitter API v2 Copy",
		"description": "This is a Postman Collection for the Twitter API v2 endpoints. \n\nRefer to the main [Twitter API documentation](https://developer.twitter.com/en/docs) for more details.\n\nIf you have an API-related question, you can also discuss in the developer [community forum](https://twittercommunity.com).\n\n## Installation\n\n### Quick install\n\nGo to the [Collection](https://t.co/twitter-api-postman) and click `Run in Postman`.\n\n### Manual install\n\nYou can also download this Collection from a GitHub repo here: https://github.com/twitterdev/postman-twitter-api\n\n## Environment\n\nThis Collection includes a pre-configured Environment. You will need to set up the following variables in order to run each request (depending on the authentication type used by the request you are sending):\n\n|Name|Description|\n|---|---|\n|`consumer_key`|Your consumer key|\n|`consumer_secret`|Your consumer secret|\n|`access_token`|Your access token|\n|`token_secret`|Your access token secret|\n|`bearer_token`|Your bearer token|\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18897170"
	},
	"item": [
		{
			"name": "Filtered Stream",
			"item": [
				{
					"name": "Add Rules",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"add\": [\n        {\n            \"value\": \"puppy has:media\",\n            \"tag\": \"puppies with media\"\n        },\n        {\n            \"value\": \"meme has:images\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.twitter.com/2/tweets/search/stream/rules",
							"protocol": "https",
							"host": [
								"api",
								"twitter",
								"com"
							],
							"path": [
								"2",
								"tweets",
								"search",
								"stream",
								"rules"
							]
						},
						"description": "Create filter rules. To create one or more rules, submit an add payload as an array of rules and operators.\n\n[Sign up](https://t.co/signup) for the Twitter API"
					},
					"response": [
						{
							"name": "Add Rules",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"add\": [\n        {\n            \"value\": \"puppy has:media\",\n            \"tag\": \"puppies with media\"\n        },\n        {\n            \"value\": \"meme has:images\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.twitter.com/2/tweets/search/stream/rules",
									"protocol": "https",
									"host": [
										"api",
										"twitter",
										"com"
									],
									"path": [
										"2",
										"tweets",
										"search",
										"stream",
										"rules"
									],
									"query": [
										{
											"key": "dry_run",
											"value": "",
											"description": "Boolean. Set to true to test a the syntax of your rule without submitting it. This is useful if you want to check the syntax of a rule before removing one or more of your existing rules.",
											"disabled": true
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-disposition",
									"value": "attachment; filename=json.json"
								},
								{
									"key": "content-encoding",
									"value": "gzip"
								},
								{
									"key": "content-length",
									"value": "190"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 18 Jun 2020 15:20:24 GMT"
								},
								{
									"key": "server",
									"value": "tsa_b"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=631138519"
								},
								{
									"key": "x-access-level",
									"value": "read"
								},
								{
									"key": "x-connection-hash",
									"value": "d3ecb7f3763b04c3289e94d8bdbbf298"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-rate-limit-limit",
									"value": "15"
								},
								{
									"key": "x-rate-limit-remaining",
									"value": "13"
								},
								{
									"key": "x-rate-limit-reset",
									"value": "1592493964"
								},
								{
									"key": "x-response-time",
									"value": "354"
								},
								{
									"key": "x-tsa-request-body-time",
									"value": "0"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"value\": \"meme has:images\",\n            \"id\": \"1273636687768285186\"\n        },\n        {\n            \"value\": \"puppy has:media\",\n            \"tag\": \"puppies with media\",\n            \"id\": \"1273636687768285187\"\n        }\n    ],\n    \"meta\": {\n        \"sent\": \"2020-06-18T15:20:24.063Z\",\n        \"summary\": {\n            \"created\": 2,\n            \"not_created\": 0,\n            \"valid\": 2,\n            \"invalid\": 0\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Retrieve Rules",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.twitter.com/2/tweets/search/stream/rules",
							"protocol": "https",
							"host": [
								"api",
								"twitter",
								"com"
							],
							"path": [
								"2",
								"tweets",
								"search",
								"stream",
								"rules"
							]
						},
						"description": "Returns a list of filter rules currently active on the streaming endpoint.\n\n[Sign up](https://t.co/signup) for the Twitter API"
					},
					"response": [
						{
							"name": "Retrieve Rules",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.twitter.com/2/tweets/search/stream/rules",
									"protocol": "https",
									"host": [
										"api",
										"twitter",
										"com"
									],
									"path": [
										"2",
										"tweets",
										"search",
										"stream",
										"rules"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-disposition",
									"value": "attachment; filename=json.json"
								},
								{
									"key": "content-encoding",
									"value": "gzip"
								},
								{
									"key": "content-length",
									"value": "158"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 18 Jun 2020 15:21:58 GMT"
								},
								{
									"key": "server",
									"value": "tsa_b"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=631138519"
								},
								{
									"key": "x-access-level",
									"value": "read"
								},
								{
									"key": "x-connection-hash",
									"value": "d3ecb7f3763b04c3289e94d8bdbbf298"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-rate-limit-limit",
									"value": "1800"
								},
								{
									"key": "x-rate-limit-remaining",
									"value": "1799"
								},
								{
									"key": "x-rate-limit-reset",
									"value": "1592494618"
								},
								{
									"key": "x-response-time",
									"value": "276"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"id\": \"1273636687768285186\",\n            \"value\": \"meme has:images\"\n        },\n        {\n            \"id\": \"1273636687768285187\",\n            \"value\": \"puppy has:media\",\n            \"tag\": \"puppies with media\"\n        }\n    ],\n    \"meta\": {\n        \"sent\": \"2020-06-18T15:21:58.638Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Delete Rules (by rule ID)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"delete\": {\n        \"ids\": [\n            \"\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.twitter.com/2/tweets/search/stream/rules",
							"protocol": "https",
							"host": [
								"api",
								"twitter",
								"com"
							],
							"path": [
								"2",
								"tweets",
								"search",
								"stream",
								"rules"
							]
						},
						"description": "Delete filter rules. To delete one or more rules, submit a delete object payload with an array of rule IDs to delete.\n\n[Sign up](https://t.co/signup) for the Twitter API"
					},
					"response": [
						{
							"name": "Delete Rules (by rule ID)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"delete\": {\n        \"ids\": [\n            \"1273636687768285186\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.twitter.com/2/tweets/search/stream/rules",
									"protocol": "https",
									"host": [
										"api",
										"twitter",
										"com"
									],
									"path": [
										"2",
										"tweets",
										"search",
										"stream",
										"rules"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, no-store, max-age=0"
								},
								{
									"key": "content-disposition",
									"value": "attachment; filename=json.json"
								},
								{
									"key": "content-encoding",
									"value": "gzip"
								},
								{
									"key": "content-length",
									"value": "101"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 09 Jul 2020 21:13:18 GMT"
								},
								{
									"key": "server",
									"value": "tsa_b"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=631138519"
								},
								{
									"key": "x-access-level",
									"value": "read"
								},
								{
									"key": "x-connection-hash",
									"value": "2973f79ee2e2cc52cf49ccd1a4a5006e"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-rate-limit-limit",
									"value": "450"
								},
								{
									"key": "x-rate-limit-remaining",
									"value": "446"
								},
								{
									"key": "x-rate-limit-reset",
									"value": "1594329886"
								},
								{
									"key": "x-response-time",
									"value": "408"
								},
								{
									"key": "x-tsa-request-body-time",
									"value": "1"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								}
							],
							"cookie": [],
							"body": "{\n    \"meta\": {\n        \"sent\": \"2020-07-09T21:13:18.284Z\",\n        \"summary\": {\n            \"deleted\": 1,\n            \"not_deleted\": 0\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Delete Rules (by rule value)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"delete\": {\n\t\t\"values\": [\n\t\t\t\"\"\n\t\t]\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.twitter.com/2/tweets/search/stream/rules",
							"protocol": "https",
							"host": [
								"api",
								"twitter",
								"com"
							],
							"path": [
								"2",
								"tweets",
								"search",
								"stream",
								"rules"
							]
						},
						"description": "Delete filter rules. To delete one or more rules, submit a delete object payload with an array of rule values to delete.\n\n[Sign up](https://t.co/signup) for the Twitter API"
					},
					"response": [
						{
							"name": "Delete Rules (by rule value)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"delete\": {\n        \"ids\": [\n            \"1273636687768285186\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.twitter.com/2/tweets/search/stream/rules",
									"protocol": "https",
									"host": [
										"api",
										"twitter",
										"com"
									],
									"path": [
										"2",
										"tweets",
										"search",
										"stream",
										"rules"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, no-store, max-age=0"
								},
								{
									"key": "content-disposition",
									"value": "attachment; filename=json.json"
								},
								{
									"key": "content-encoding",
									"value": "gzip"
								},
								{
									"key": "content-length",
									"value": "101"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 09 Jul 2020 21:13:18 GMT"
								},
								{
									"key": "server",
									"value": "tsa_b"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=631138519"
								},
								{
									"key": "x-access-level",
									"value": "read"
								},
								{
									"key": "x-connection-hash",
									"value": "2973f79ee2e2cc52cf49ccd1a4a5006e"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-rate-limit-limit",
									"value": "450"
								},
								{
									"key": "x-rate-limit-remaining",
									"value": "446"
								},
								{
									"key": "x-rate-limit-reset",
									"value": "1594329886"
								},
								{
									"key": "x-response-time",
									"value": "408"
								},
								{
									"key": "x-tsa-request-body-time",
									"value": "1"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								}
							],
							"cookie": [],
							"body": "{\n    \"meta\": {\n        \"sent\": \"2020-07-09T21:13:18.284Z\",\n        \"summary\": {\n            \"deleted\": 1,\n            \"not_deleted\": 0\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Stream (see description)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.twitter.com/2/tweets/search/stream",
							"protocol": "https",
							"host": [
								"api",
								"twitter",
								"com"
							],
							"path": [
								"2",
								"tweets",
								"search",
								"stream"
							],
							"query": [
								{
									"key": "tweet.fields",
									"value": "",
									"description": "Comma-separated list of fields for the Tweet object.\n\nAllowed values:\nattachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld,edit_history_tweet_ids,edit_controls\n\nDefault values:\nid,text,edit_history_tweet_ids",
									"disabled": true
								},
								{
									"key": "expansions",
									"value": "",
									"description": "Comma-separated list of fields to expand. Expansions enable requests to expand an ID into a full object in the includes response object.\n\nAllowed values: attachments.poll_ids,attachments.media_keys,author_id,geo.place_id,in_reply_to_user_id,referenced_tweets.id,entities.mentions.username,referenced_tweets.id.author_id\n\nDefault values: none",
									"disabled": true
								},
								{
									"key": "media.fields",
									"value": "",
									"description": "Comma-separated list of fields for the media object. Expansion required.\n\nAllowed values:\nduration_ms,height,media_key,preview_image_url,public_metrics,type,url,width\n\nDefault values:\nmedia_key,type",
									"disabled": true
								},
								{
									"key": "poll.fields",
									"value": "",
									"description": "Comma-separated list of fields for the poll object. Expansion required.\n\nAllowed values:\nduration_minutes,end_datetime,id,options,voting_status\n\nDefault values:\nid,options",
									"disabled": true
								},
								{
									"key": "place.fields",
									"value": "",
									"description": "Comma-separated list of fields for the place object. Expansion required.\n\nAllowed values:\ncontained_within,country,country_code,full_name,geo,id,name,place_type\n\nDefault values:\nid,full_name",
									"disabled": true
								},
								{
									"key": "user.fields",
									"value": "",
									"description": "Comma-separated list of fields for the user object. Expansion required.\n\nAllowed values:\ncreated_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld\n\nDefault values:\nid,name,username",
									"disabled": true
								},
								{
									"key": "backfill_minutes",
									"value": "",
									"description": "Provide a whole number between 1 and 5. \n\nThis parameter enables the recovery of up to five minutes worth of data that may have been missed during a disconnection. \n\nThe backfilled Tweets will automatically flow through a reconnected stream, with older Tweets generally being delivered before any newly matching Tweets.\nThis feature will deliver all Tweets that matched your rules and were published during the timeframe selected, meaning that if you were disconnected for 90 seconds, and you requested two minutes of backfill, you will receive 30 seconds worth of duplicate Tweets. Due to this, you should make sure your system is tolerant of duplicate \ndata.\n\n*This feature is currently only available to the academic research product track*.",
									"disabled": true
								}
							]
						},
						"description": "Streams Tweets in real-time based on a specific set of filter rules.\n\nPlease note streaming responses are currently [not supported](https://github.com/postmanlabs/postman-app-support/issues/5040) in Postman. Use this to help form your request, then click on Code > cURL. Copy the cURL command and paste in terminal to view the response.\n\n[Sign up](https://t.co/signup) for the Twitter API"
					},
					"response": []
				}
			],
			"description": "The filtered stream endpoint allows developers to filter the real-time stream of public Tweets. You will need to set up rules in order to receive Tweets from the streaming endpoint.\n\nPlease note streaming responses are currently not supported in Postman. Use the Stream request to help form your request, then click on Code > cURL. Copy the cURL command and paste in terminal to view the response.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearer_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/*",
					" * This pre-request script retrieves a Bearer token from the client credentials",
					" * you provide in your environment file.",
					" */",
					"// Retrieve env variables currently configured",
					"const env_variables = pm.environment.toObject({",
					"    excludeDisabled: true",
					"});",
					"",
					"const addToken = () => {",
					"    pm.sendRequest({",
					"        url: 'https://api.twitter.com/oauth2/token',",
					"        method: 'POST',",
					"        auth: {",
					"            type: 'basic',",
					"            basic: {",
					"                username: env_variables.consumer_key,",
					"                password: env_variables.consumer_secret",
					"            }",
					"        },",
					"        headers: {",
					"            'Content-type': 'Content-type: application/x-www-form-urlencoded; charset: utf-8'",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: 'grant_type=client_credentials'",
					"        }",
					"    }, (err, res) => {",
					"        if (err) {",
					"            console.error('Error while generating a bearer token:', err);",
					"        } else {",
					"            const {access_token} = res.json();",
					"            env_variables.bearer_token = access_token;",
					"            pm.environment.set('bearer_token', access_token);",
					"        }",
					"    });",
					"}",
					"",
					"const prepareBearerToken = () => {",
					"    // Check if the required variables are set",
					"    for (const key of ['consumer_key', 'consumer_secret']) {",
					"        if (typeof env_variables[key] === 'undefined' || !env_variables[key]) {",
					"            console.error('Missing required env variable:', key);",
					"            return;",
					"        }",
					"    }",
					"    ",
					"    // Use an existing Bearer token, if already provided",
					"    if (typeof env_variables.bearer_token === 'undefined' || env_variables.bearer_token === '' || env_variables.bearer_token === null || env_variables.bearer_token.toLowerCase() === 'your bearer token') {",
					"        addToken();",
					"    }",
					"}",
					"",
					"prepareBearerToken();",
					"",
					"const prepareOAuthSignature = () => {",
					"    /*",
					"     * This is a Pre-request script for Postman client to remediate OAuth 1.0a issue",
					"     * where certain request fails if the query parameter includes some specific characters.",
					"     * https://tools.ietf.org/html/rfc3986#section-2.2 (rfc3986, gen-delims reserved characters)",
					"     *",
					"     * NOTE: This Pre-script is intended to use with \"GET\" request but might be able to",
					"     *       work with other methods that have no request body.",
					"     *       For \"POST\" request, there's another workaround.",
					"     *       See: https://github.com/twitterdev/postman-twitter-ads-api/issues/2",
					"     * ",
					"     * In order to use this Pre-request script, you need to change your \"Authorization\" type to",
					"     * \"No Auth\" only for the target request and do not apply to the top-level object.",
					"     */",
					"    ",
					"    const sdk = require('postman-collection');",
					"    ",
					"    function toArray(object) {",
					"        let array = [];",
					"        Object.keys(object).forEach(key => {",
					"            array.push(`${key}=${object[key]}`);",
					"        });",
					"        return array",
					"    }",
					"    ",
					"    // fetch all env variables that are currently defined",
					"    const env_variables = pm.environment.toObject({",
					"        excludeDisabled: true",
					"    });",
					"    ",
					"    const oauth_consumer_key = env_variables.consumer_key;",
					"    const oauth_consumer_secret = env_variables.consumer_secret;",
					"    const oauth_token = env_variables.access_token;",
					"    const oauth_secret = env_variables.token_secret;",
					"    const oauth_signing_key = `${oauth_consumer_secret}&${oauth_secret}`;",
					"    ",
					"    // create random oauth_nonce string",
					"    const random_source = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    let oauth_nonce = '';",
					"    for (let i = 0; i < 32; i++) {",
					"        oauth_nonce += random_source.charAt(Math.floor(Math.random() * random_source.length));",
					"    }",
					"    ",
					"    const oauth_parameter_string_object = {};",
					"    oauth_parameter_string_object.oauth_consumer_key = oauth_consumer_key;",
					"    oauth_parameter_string_object.oauth_token = oauth_token;",
					"    const oauth_nonce_array = CryptoJS.enc.Utf8.parse(oauth_nonce);",
					"    oauth_parameter_string_object.oauth_nonce = encodeURIComponent(CryptoJS.enc.Base64.stringify(oauth_nonce_array));",
					"    oauth_parameter_string_object.oauth_signature_method = 'HMAC-SHA1';",
					"    oauth_parameter_string_object.oauth_version = '1.0';",
					"    oauth_parameter_string_object.oauth_timestamp = Math.round((new Date()).getTime() / 1000);",
					"    ",
					"    // for Authorization request header (copy object)",
					"    const oauth_authorization_header_object = Object.assign({}, oauth_parameter_string_object);",
					"    ",
					"    // convert query string into object (+ encode)",
					"    const url_query_string_object = {};",
					"    ",
					"    const url_query_string_object_array = sdk.QueryParam.parse(",
					"        pm.request.url.getQueryString({",
					"            ignoreDisabled: true",
					"        })",
					"    ).filter(el => !!el.key);",
					"    ",
					"    url_query_string_object_array.forEach(item => {",
					"        url_query_string_object[item.key] = encodeURIComponent(item.value);",
					"    });",
					"    ",
					"    // merge query parameter",
					"    Object.assign(oauth_parameter_string_object, url_query_string_object);",
					"    ",
					"    // sort object by key",
					"    const oauth_parameter_string_object_ordered = {};",
					"    Object.keys(oauth_parameter_string_object).sort().forEach(function(key) {",
					"        oauth_parameter_string_object_ordered[key] = oauth_parameter_string_object[key];",
					"    });",
					"    ",
					"    // generate parameter string",
					"    const oauth_parameter_string = toArray(oauth_parameter_string_object_ordered).join('&');",
					"    ",
					"    // replace dynamic variables",
					"    let base_host = pm.request.url.getOAuth1BaseUrl();",
					"    let regexp = /{{(.*?)}}/g;",
					"    let result = null;",
					"    while (result = regexp.exec(base_host)) {",
					"        let value = env_variables[result[1]];",
					"        base_host = base_host.replace(new RegExp(`{{${result[1]}}}`, 'g'), value);",
					"    }",
					"    ",
					"    // generate base string",
					"    const oauth_base_string = `${pm.request.method}&${encodeURIComponent(base_host)}&${encodeURIComponent(oauth_parameter_string)}`;",
					"    ",
					"    // generate signature",
					"    const oauth_signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA1(oauth_base_string, oauth_signing_key));",
					"    ",
					"    oauth_authorization_header_object.oauth_signature = encodeURIComponent(oauth_signature);",
					"    ",
					"    // generate Authorization header string",
					"    const oauth_authorization_header = toArray(oauth_authorization_header_object).join(', ');",
					"    ",
					"    // generate Authorization header",
					"    pm.request.headers.add({",
					"        key: 'Authorization',",
					"        value: `OAuth ${oauth_authorization_header}`",
					"    });",
					"    ",
					"    // Escape URI parameters using encodeURIComponent => RFC3986",
					"    if (Object.keys(url_query_string_object).length !== 0) {",
					"        // generate query parameter string",
					"        const request_parameter_string = toArray(url_query_string_object).join('&');",
					"    ",
					"        pm.request.url = `${pm.request.url.getOAuth1BaseUrl()}?${request_parameter_string}`;",
					"    }",
					"}",
					"",
					"if (typeof pm.request.auth !== 'undefined' && pm.request.auth.type === 'oauth1') {",
					"    prepareOAuthSignature();",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "consumer_key",
			"value": "Hl3AGn3aQzevkd7AClaRu6HMC"
		},
		{
			"key": "consumer_secret",
			"value": "HJk2ng6J7fTBFk8sxRoHBwp4HDm8xh161ptMQknFrcm5dWDEpB"
		},
		{
			"key": "access_token",
			"value": "1706075341352038400-TQzyi6eqPpJjXXQj4KEev6AXQXNS3i"
		},
		{
			"key": "token_secret",
			"value": "Q6yG76rEz4ylBTsKi5CZLV47Nyg2fnr4JdmM7hlhfxXtQ"
		},
		{
			"key": "bearer_token",
			"value": "{{bearer_token}}"
		}
	]
}