{
	"info": {
		"_postman_id": "c8edb919-3fec-41da-9b81-69176b0b4d84",
		"name": "Zoom Meeting API",
		"description": "The Zoom Meeting APIs let developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [JWT](/guides/auth/jwt) and [OAuth](/guides/auth/oauth) documentation.\n\nAll endpoints are available via `https` and are located at `api.zoom.us/v2/`. For example, to list all of an account's users, use the `https://api.zoom.us/v2/users/` endpoint.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18897170",
		"_collection_link": "https://www.postman.com/zoom-developer/workspace/zoom-public-workspace/collection/22097587-c8edb919-3fec-41da-9b81-69176b0b4d84?action=share&source=collection_link&creator=18897170"
	},
	"item": [
		{
			"name": "accounts/{account Id}",
			"item": [
				{
					"name": "settings",
					"item": [
						{
							"name": "Get account settings",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId/settings?option=security&custom_query_fields=in_meeting",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId",
										"settings"
									],
									"query": [
										{
											"key": "option",
											"value": "security",
											"description": "Optional query parameters: \n* `meeting_authentication` — Use this query parameter to view the [meeting authentication settings](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied to the user's account. \n* `recording_authentication` — Use this query parameter to view the [recording authentication settings](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied to the user's account. \n* `security` — Use this query parameter to view the account's security settings. For example, password requirements for user login or two-factor authentication. \n* `meeting_security` — Use this query parameter to view the meeting security settings applied to the user's account."
										},
										{
											"key": "custom_query_fields",
											"value": "in_meeting",
											"description": "The name of the field by which to filter the response. For example, if you provide the `host_video` value for this field, you will get a response similar to the following: \n\n `{ \"schedule_meeting\": { \"host_video\": false } }` \n\n To use multiple values, comma-separate each value. For example: `host_video,participant_video`"
										}
									],
									"variable": [
										{
											"key": "accountId",
											"value": "me",
											"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
										}
									]
								},
								"description": "Use this API to get an account's settings. To get the Master account's settings, use the `me` value for the `accountId` path parameter. \n\n**Scopes:** `account:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n**Prerequisites:** \n* The account must be a paid account."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\nAccount settings returned. \n\n**Error Code:** `200` <br>\nOnly available for paid accounts.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/settings?option=security&custom_query_fields=in_meeting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "security"
												},
												{
													"key": "custom_query_fields",
													"value": "in_meeting"
												}
											],
											"variable": [
												{
													"key": "accountId",
													"value": "me",
													"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"security\": {\n    \"admin_change_name_pic\": true,\n    \"admin_change_user_info\": true,\n    \"user_modifiable_info_by_admin\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"hide_billing_info\": true,\n    \"import_photos_from_devices\": true,\n    \"password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"minimum_password_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"sign_again_period_for_inactivity_on_client\": 45,\n    \"sign_again_period_for_inactivity_on_web\": 60,\n    \"sign_in_with_two_factor_auth\": \"group\",\n    \"sign_in_with_two_factor_auth_groups\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"sign_in_with_two_factor_auth_roles\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  },\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": {\n      \"allow_webinar_attendees_dial\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"numbers\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"low_host_count_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"feature\": {\n    \"meeting_capacity\": 50\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_host_to_enable_focus_mode\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 1,\n    \"allow_participants_to_rename\": true,\n    \"allow_show_zoom_windows\": true,\n    \"allow_users_save_chats\": 1,\n    \"annotation\": true,\n    \"anonymous_question_answer\": true,\n    \"attendee_on_hold\": true,\n    \"attention_mode_focus_mode\": true,\n    \"auto_answer\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"save_caption\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"third_party_captioning_service\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"view_full_transcript\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The specific instructions\",\n    \"data_center_regions\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"dscp_audio\": 56,\n    \"dscp_marking\": true,\n    \"dscp_video\": 40,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"all\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"languages\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"auto_generated_captions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"full_transcript\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"manual_captions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"save_captions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"third_party_captioning_service\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"meeting_reactions\": true,\n    \"meeting_survey\": true,\n    \"original_audio\": true,\n    \"p2p_connetion\": true,\n    \"p2p_ports\": true,\n    \"polling\": true,\n    \"meeting_polling\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"advanced_polls\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"allow_alternative_host_to_add_edit\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ports_range\": \"1;65535\",\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"record_play_own_voice\": true,\n    \"remote_control\": true,\n    \"request_permission_to_unmute_participants\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"unchecked_data_center_regions\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"virtual_background_settings\": {\n      \"allow_upload_custom\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"allow_videos\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"files\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"watermark\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"allow_auto_save_local_chat_file\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"allow_panelists_chat_with\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"allow_panelists_send_direct_message\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"allow_users_save_chats\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"default_attendees_chat_with\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"live_streaming_reminder\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"live_streaming_service\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"webinar_polling\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"advanced_polls\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"allow_alternative_host_to_add_edit\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true,\n    \"who_can_share_screen\": \"host\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"host\",\n    \"workplace_by_facebook\": true\n  },\n  \"integration\": {\n    \"box\": true,\n    \"dropbox\": true,\n    \"google_calendar\": true,\n    \"google_drive\": true,\n    \"kubi\": true,\n    \"microsoft_one_drive\": true\n  },\n  \"other_options\": {\n    \"allow_auto_active_users\": true,\n    \"allow_users_contact_support_via_chat\": true,\n    \"allow_users_enter_and_share_pronouns\": true,\n    \"blur_snapshot\": true,\n    \"display_meetings_scheduled_for_others\": true,\n    \"meeting_qos_and_mos\": 0,\n    \"show_one_user_meeting_on_dashboard\": true,\n    \"use_cdn\": \"none\"\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"allow_recovery_deleted_cloud_recordings\": true,\n    \"archive\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"settings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"auto_delete_cmr\": true,\n    \"auto_delete_cmr_days\": 90,\n    \"record_files_separately\": {\n      \"active_speaker\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gallery_view\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"shared_screen\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"auto_recording\": \"local\",\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"cloud_recording_download_host\": true,\n    \"host_delete_cloud_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_addresses_or_ranges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"local_recording\": true,\n    \"prevent_host_access_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"recording_disclaimer\": true,\n    \"recording_password_requirement\": {\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"required_password_for_existing_cloud_recordings\": true,\n    \"required_password_for_shared_cloud_recordings\": true,\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"both\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"enforce_login_with_domains\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"jbh_time\": 5,\n    \"join_before_host\": true,\n    \"meeting_password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_upper_and_lower_characters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"not_store_meeting_topic\": true,\n    \"participant_video\": true,\n    \"personal_meeting\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"use_pmi_for_instant_meetings\": true,\n    \"use_pmi_for_scheduled_meetings\": true,\n    \"always_display_zoom_meeting_as_topic\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_topic_for_scheduled_meetings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"hide_meeting_description\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"hide_description_for_scheduled_meetings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"always_display_zoom_webinar_as_topic\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_topic_for_scheduled_webinars\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"hide_webinar_description\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"hide_description_for_scheduled_webinars\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"telephony_regions\": {\n      \"allowed_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"third_party_audio\": true\n  },\n  \"tsp\": {\n    \"call_out\": true,\n    \"call_out_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"display_toll_free_numbers\": true,\n    \"show_international_numbers_link\": true\n  },\n  \"zoom_rooms\": {\n    \"auto_start_stop_scheduled_meetings\": true,\n    \"cmr_for_instant_meeting\": true,\n    \"force_private_meeting\": true,\n    \"hide_host_information\": true,\n    \"list_meetings_with_calendar\": true,\n    \"start_airplay_manually\": true,\n    \"ultrasonic\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true,\n    \"zr_post_meeting_feedback\": true\n  }\n}"
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `2001` <br>\nAccount does not exist: $accountId",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/settings?option=security&custom_query_fields=in_meeting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "security"
												},
												{
													"key": "custom_query_fields",
													"value": "in_meeting"
												}
											],
											"variable": [
												{
													"key": "accountId",
													"value": "me",
													"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update account settings",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"admin_change_name_pic\": true,\n    \"admin_change_user_info\": true,\n    \"user_modifiable_info_by_admin\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"hide_billing_info\": true,\n    \"import_photos_from_devices\": true,\n    \"password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"minimum_password_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"sign_again_period_for_inactivity_on_client\": 45,\n    \"sign_again_period_for_inactivity_on_web\": 60,\n    \"sign_in_with_two_factor_auth\": \"group\",\n    \"sign_in_with_two_factor_auth_groups\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"sign_in_with_two_factor_auth_roles\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  },\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": {\n      \"allow_webinar_attendees_dial\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"numbers\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"low_host_count_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"feature\": {\n    \"meeting_capacity\": 50\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_host_to_enable_focus_mode\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 1,\n    \"allow_participants_to_rename\": true,\n    \"allow_show_zoom_windows\": true,\n    \"allow_users_save_chats\": 1,\n    \"annotation\": true,\n    \"anonymous_question_answer\": true,\n    \"attendee_on_hold\": true,\n    \"attention_mode_focus_mode\": true,\n    \"auto_answer\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The specific instructions\",\n    \"data_center_regions\": [\n      \"AU\",\n      \"AU\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"dscp_audio\": 56,\n    \"dscp_marking\": true,\n    \"dscp_video\": 40,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"host\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_reactions\": true,\n    \"meeting_survey\": true,\n    \"original_audio\": true,\n    \"p2p_connetion\": true,\n    \"p2p_ports\": true,\n    \"polling\": true,\n    \"meeting_polling\": {\n      \"enable\": true,\n      \"advanced_polls\": true,\n      \"allow_alternative_host_to_add_edit\": true\n    },\n    \"ports_range\": \"1;65535\",\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"record_play_own_voice\": true,\n    \"remote_control\": true,\n    \"request_permission_to_unmute_participants\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"virtual_background_settings\": {\n      \"allow_upload_custom\": true,\n      \"allow_videos\": true,\n      \"enable\": true,\n      \"files\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"watermark\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 1,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 1,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 1,\n      \"default_attendees_chat_with\": 1,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"webinar_polling\": {\n      \"enable\": true,\n      \"advanced_polls\": true,\n      \"allow_alternative_host_to_add_edit\": true\n    },\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true,\n    \"who_can_share_screen\": \"host\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true\n  },\n  \"integration\": {\n    \"box\": true,\n    \"dropbox\": true,\n    \"google_calendar\": true,\n    \"google_drive\": true,\n    \"kubi\": true,\n    \"microsoft_one_drive\": true\n  },\n  \"other_options\": {\n    \"allow_auto_active_users\": true,\n    \"allow_users_contact_support_via_chat\": true,\n    \"allow_users_enter_and_share_pronouns\": true,\n    \"blur_snapshot\": true,\n    \"display_meetings_scheduled_for_others\": true,\n    \"meeting_qos_and_mos\": 0,\n    \"show_one_user_meeting_on_dashboard\": true,\n    \"use_cdn\": \"none\"\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"allow_recovery_deleted_cloud_recordings\": true,\n    \"archive\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"settings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"auto_delete_cmr\": true,\n    \"auto_delete_cmr_days\": 90,\n    \"record_files_separately\": {\n      \"active_speaker\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gallery_view\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"shared_screen\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"auto_recording\": \"local\",\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"cloud_recording_download_host\": true,\n    \"host_delete_cloud_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_addresses_or_ranges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"local_recording\": true,\n    \"prevent_host_access_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"recording_disclaimer\": true,\n    \"recording_password_requirement\": {\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"required_password_for_existing_cloud_recordings\": true,\n    \"required_password_for_shared_cloud_recordings\": true,\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"both\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"enforce_login_with_domains\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"jbh_time\": 5,\n    \"join_before_host\": true,\n    \"meeting_password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_upper_and_lower_characters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"not_store_meeting_topic\": true,\n    \"participant_video\": true,\n    \"personal_meeting\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"use_pmi_for_instant_meetings\": true,\n    \"use_pmi_for_scheduled_meetings\": true,\n    \"always_display_zoom_meeting_as_topic\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_topic_for_scheduled_meetings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"hide_meeting_description\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"hide_description_for_scheduled_meetings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"always_display_zoom_webinar_as_topic\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_topic_for_scheduled_webinars\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"hide_webinar_description\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"hide_description_for_scheduled_webinars\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"telephony_regions\": {\n      \"selection_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"third_party_audio\": true\n  },\n  \"tsp\": {\n    \"call_out\": true,\n    \"call_out_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"display_toll_free_numbers\": true,\n    \"show_international_numbers_link\": true\n  },\n  \"zoom_rooms\": {\n    \"auto_start_stop_scheduled_meetings\": true,\n    \"cmr_for_instant_meeting\": true,\n    \"force_private_meeting\": true,\n    \"hide_host_information\": true,\n    \"list_meetings_with_calendar\": true,\n    \"start_airplay_manually\": true,\n    \"ultrasonic\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true,\n    \"zr_post_meeting_feedback\": true\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId/settings?option=meeting_security",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId",
										"settings"
									],
									"query": [
										{
											"key": "option",
											"value": "meeting_security",
											"description": "Optional query parameters: \n* `meeting_authentication` — Use this query parameter to view the [meeting authentication settings](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied to the user's account. \n* `recording_authentication` — Use this query parameter to view the [recording authentication settings](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied to the user's account. \n* `security` — Use this query parameter to view the account's security settings. For example, password requirements for user login or two-factor authentication. \n* `meeting_security` — Use this query parameter to view the meeting security settings applied to the user's account."
										}
									],
									"variable": [
										{
											"key": "accountId",
											"value": "me",
											"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
										}
									]
								},
								"description": "Use this API to update an account's settings. To update the Master account's settings, pass the `me` value for the `accountId` path parameter. \n\n **Scopes:** `account:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n **Prerequisites:** \n* The account must be a paid account."
							},
							"response": [
								{
									"name": "**Error Code:** `200` <br>\nOnly available for paid accounts.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"admin_change_name_pic\": true,\n    \"admin_change_user_info\": true,\n    \"user_modifiable_info_by_admin\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"hide_billing_info\": true,\n    \"import_photos_from_devices\": true,\n    \"password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"minimum_password_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"sign_again_period_for_inactivity_on_client\": 45,\n    \"sign_again_period_for_inactivity_on_web\": 60,\n    \"sign_in_with_two_factor_auth\": \"group\",\n    \"sign_in_with_two_factor_auth_groups\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"sign_in_with_two_factor_auth_roles\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  },\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": {\n      \"allow_webinar_attendees_dial\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"numbers\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"low_host_count_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"feature\": {\n    \"meeting_capacity\": 50\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_host_to_enable_focus_mode\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 1,\n    \"allow_participants_to_rename\": true,\n    \"allow_show_zoom_windows\": true,\n    \"allow_users_save_chats\": 1,\n    \"annotation\": true,\n    \"anonymous_question_answer\": true,\n    \"attendee_on_hold\": true,\n    \"attention_mode_focus_mode\": true,\n    \"auto_answer\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The specific instructions\",\n    \"data_center_regions\": [\n      \"AU\",\n      \"AU\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"dscp_audio\": 56,\n    \"dscp_marking\": true,\n    \"dscp_video\": 40,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"host\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_reactions\": true,\n    \"meeting_survey\": true,\n    \"original_audio\": true,\n    \"p2p_connetion\": true,\n    \"p2p_ports\": true,\n    \"polling\": true,\n    \"meeting_polling\": {\n      \"enable\": true,\n      \"advanced_polls\": true,\n      \"allow_alternative_host_to_add_edit\": true\n    },\n    \"ports_range\": \"1;65535\",\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"record_play_own_voice\": true,\n    \"remote_control\": true,\n    \"request_permission_to_unmute_participants\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"virtual_background_settings\": {\n      \"allow_upload_custom\": true,\n      \"allow_videos\": true,\n      \"enable\": true,\n      \"files\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"watermark\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 1,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 1,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 1,\n      \"default_attendees_chat_with\": 1,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"webinar_polling\": {\n      \"enable\": true,\n      \"advanced_polls\": true,\n      \"allow_alternative_host_to_add_edit\": true\n    },\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true,\n    \"who_can_share_screen\": \"host\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true\n  },\n  \"integration\": {\n    \"box\": true,\n    \"dropbox\": true,\n    \"google_calendar\": true,\n    \"google_drive\": true,\n    \"kubi\": true,\n    \"microsoft_one_drive\": true\n  },\n  \"other_options\": {\n    \"allow_auto_active_users\": true,\n    \"allow_users_contact_support_via_chat\": true,\n    \"allow_users_enter_and_share_pronouns\": true,\n    \"blur_snapshot\": true,\n    \"display_meetings_scheduled_for_others\": true,\n    \"meeting_qos_and_mos\": 0,\n    \"show_one_user_meeting_on_dashboard\": true,\n    \"use_cdn\": \"none\"\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"allow_recovery_deleted_cloud_recordings\": true,\n    \"archive\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"settings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"auto_delete_cmr\": true,\n    \"auto_delete_cmr_days\": 90,\n    \"record_files_separately\": {\n      \"active_speaker\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gallery_view\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"shared_screen\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"auto_recording\": \"local\",\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"cloud_recording_download_host\": true,\n    \"host_delete_cloud_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_addresses_or_ranges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"local_recording\": true,\n    \"prevent_host_access_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"recording_disclaimer\": true,\n    \"recording_password_requirement\": {\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"required_password_for_existing_cloud_recordings\": true,\n    \"required_password_for_shared_cloud_recordings\": true,\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"both\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"enforce_login_with_domains\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"jbh_time\": 5,\n    \"join_before_host\": true,\n    \"meeting_password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_upper_and_lower_characters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"not_store_meeting_topic\": true,\n    \"participant_video\": true,\n    \"personal_meeting\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"use_pmi_for_instant_meetings\": true,\n    \"use_pmi_for_scheduled_meetings\": true,\n    \"always_display_zoom_meeting_as_topic\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_topic_for_scheduled_meetings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"hide_meeting_description\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"hide_description_for_scheduled_meetings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"always_display_zoom_webinar_as_topic\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_topic_for_scheduled_webinars\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"hide_webinar_description\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"hide_description_for_scheduled_webinars\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"telephony_regions\": {\n      \"selection_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"third_party_audio\": true\n  },\n  \"tsp\": {\n    \"call_out\": true,\n    \"call_out_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"display_toll_free_numbers\": true,\n    \"show_international_numbers_link\": true\n  },\n  \"zoom_rooms\": {\n    \"auto_start_stop_scheduled_meetings\": true,\n    \"cmr_for_instant_meeting\": true,\n    \"force_private_meeting\": true,\n    \"hide_host_information\": true,\n    \"list_meetings_with_calendar\": true,\n    \"start_airplay_manually\": true,\n    \"ultrasonic\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true,\n    \"zr_post_meeting_feedback\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/settings?option=meeting_security",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "meeting_security"
												}
											],
											"variable": [
												{
													"key": "accountId",
													"value": "me",
													"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204` <br>\nAccount settings updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"admin_change_name_pic\": true,\n    \"admin_change_user_info\": true,\n    \"user_modifiable_info_by_admin\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"hide_billing_info\": true,\n    \"import_photos_from_devices\": true,\n    \"password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"minimum_password_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"sign_again_period_for_inactivity_on_client\": 45,\n    \"sign_again_period_for_inactivity_on_web\": 60,\n    \"sign_in_with_two_factor_auth\": \"group\",\n    \"sign_in_with_two_factor_auth_groups\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"sign_in_with_two_factor_auth_roles\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  },\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": {\n      \"allow_webinar_attendees_dial\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"numbers\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"low_host_count_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"feature\": {\n    \"meeting_capacity\": 50\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_host_to_enable_focus_mode\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 1,\n    \"allow_participants_to_rename\": true,\n    \"allow_show_zoom_windows\": true,\n    \"allow_users_save_chats\": 1,\n    \"annotation\": true,\n    \"anonymous_question_answer\": true,\n    \"attendee_on_hold\": true,\n    \"attention_mode_focus_mode\": true,\n    \"auto_answer\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The specific instructions\",\n    \"data_center_regions\": [\n      \"AU\",\n      \"AU\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"dscp_audio\": 56,\n    \"dscp_marking\": true,\n    \"dscp_video\": 40,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"host\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_reactions\": true,\n    \"meeting_survey\": true,\n    \"original_audio\": true,\n    \"p2p_connetion\": true,\n    \"p2p_ports\": true,\n    \"polling\": true,\n    \"meeting_polling\": {\n      \"enable\": true,\n      \"advanced_polls\": true,\n      \"allow_alternative_host_to_add_edit\": true\n    },\n    \"ports_range\": \"1;65535\",\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"record_play_own_voice\": true,\n    \"remote_control\": true,\n    \"request_permission_to_unmute_participants\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"virtual_background_settings\": {\n      \"allow_upload_custom\": true,\n      \"allow_videos\": true,\n      \"enable\": true,\n      \"files\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"watermark\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 1,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 1,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 1,\n      \"default_attendees_chat_with\": 1,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"webinar_polling\": {\n      \"enable\": true,\n      \"advanced_polls\": true,\n      \"allow_alternative_host_to_add_edit\": true\n    },\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true,\n    \"who_can_share_screen\": \"host\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true\n  },\n  \"integration\": {\n    \"box\": true,\n    \"dropbox\": true,\n    \"google_calendar\": true,\n    \"google_drive\": true,\n    \"kubi\": true,\n    \"microsoft_one_drive\": true\n  },\n  \"other_options\": {\n    \"allow_auto_active_users\": true,\n    \"allow_users_contact_support_via_chat\": true,\n    \"allow_users_enter_and_share_pronouns\": true,\n    \"blur_snapshot\": true,\n    \"display_meetings_scheduled_for_others\": true,\n    \"meeting_qos_and_mos\": 0,\n    \"show_one_user_meeting_on_dashboard\": true,\n    \"use_cdn\": \"none\"\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"allow_recovery_deleted_cloud_recordings\": true,\n    \"archive\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"settings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"auto_delete_cmr\": true,\n    \"auto_delete_cmr_days\": 90,\n    \"record_files_separately\": {\n      \"active_speaker\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gallery_view\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"shared_screen\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"auto_recording\": \"local\",\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"cloud_recording_download_host\": true,\n    \"host_delete_cloud_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_addresses_or_ranges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"local_recording\": true,\n    \"prevent_host_access_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"recording_disclaimer\": true,\n    \"recording_password_requirement\": {\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"required_password_for_existing_cloud_recordings\": true,\n    \"required_password_for_shared_cloud_recordings\": true,\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"both\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"enforce_login_with_domains\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"jbh_time\": 5,\n    \"join_before_host\": true,\n    \"meeting_password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_upper_and_lower_characters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"not_store_meeting_topic\": true,\n    \"participant_video\": true,\n    \"personal_meeting\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"use_pmi_for_instant_meetings\": true,\n    \"use_pmi_for_scheduled_meetings\": true,\n    \"always_display_zoom_meeting_as_topic\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_topic_for_scheduled_meetings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"hide_meeting_description\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"hide_description_for_scheduled_meetings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"always_display_zoom_webinar_as_topic\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_topic_for_scheduled_webinars\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"hide_webinar_description\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"hide_description_for_scheduled_webinars\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"telephony_regions\": {\n      \"selection_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"third_party_audio\": true\n  },\n  \"tsp\": {\n    \"call_out\": true,\n    \"call_out_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"display_toll_free_numbers\": true,\n    \"show_international_numbers_link\": true\n  },\n  \"zoom_rooms\": {\n    \"auto_start_stop_scheduled_meetings\": true,\n    \"cmr_for_instant_meeting\": true,\n    \"force_private_meeting\": true,\n    \"hide_host_information\": true,\n    \"list_meetings_with_calendar\": true,\n    \"start_airplay_manually\": true,\n    \"ultrasonic\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true,\n    \"zr_post_meeting_feedback\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/settings?option=meeting_security",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "meeting_security"
												}
											],
											"variable": [
												{
													"key": "accountId",
													"value": "me",
													"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300` <br>\nThe domains provided are invalid. If you are providing multiple domains, separate each domain with a comma.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"admin_change_name_pic\": true,\n    \"admin_change_user_info\": true,\n    \"user_modifiable_info_by_admin\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"hide_billing_info\": true,\n    \"import_photos_from_devices\": true,\n    \"password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"minimum_password_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"sign_again_period_for_inactivity_on_client\": 45,\n    \"sign_again_period_for_inactivity_on_web\": 60,\n    \"sign_in_with_two_factor_auth\": \"group\",\n    \"sign_in_with_two_factor_auth_groups\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"sign_in_with_two_factor_auth_roles\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  },\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": {\n      \"allow_webinar_attendees_dial\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"numbers\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"low_host_count_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"feature\": {\n    \"meeting_capacity\": 50\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_host_to_enable_focus_mode\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 1,\n    \"allow_participants_to_rename\": true,\n    \"allow_show_zoom_windows\": true,\n    \"allow_users_save_chats\": 1,\n    \"annotation\": true,\n    \"anonymous_question_answer\": true,\n    \"attendee_on_hold\": true,\n    \"attention_mode_focus_mode\": true,\n    \"auto_answer\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The specific instructions\",\n    \"data_center_regions\": [\n      \"AU\",\n      \"AU\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"dscp_audio\": 56,\n    \"dscp_marking\": true,\n    \"dscp_video\": 40,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"host\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_reactions\": true,\n    \"meeting_survey\": true,\n    \"original_audio\": true,\n    \"p2p_connetion\": true,\n    \"p2p_ports\": true,\n    \"polling\": true,\n    \"meeting_polling\": {\n      \"enable\": true,\n      \"advanced_polls\": true,\n      \"allow_alternative_host_to_add_edit\": true\n    },\n    \"ports_range\": \"1;65535\",\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"record_play_own_voice\": true,\n    \"remote_control\": true,\n    \"request_permission_to_unmute_participants\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"virtual_background_settings\": {\n      \"allow_upload_custom\": true,\n      \"allow_videos\": true,\n      \"enable\": true,\n      \"files\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"watermark\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 1,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 1,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 1,\n      \"default_attendees_chat_with\": 1,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"webinar_polling\": {\n      \"enable\": true,\n      \"advanced_polls\": true,\n      \"allow_alternative_host_to_add_edit\": true\n    },\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true,\n    \"who_can_share_screen\": \"host\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true\n  },\n  \"integration\": {\n    \"box\": true,\n    \"dropbox\": true,\n    \"google_calendar\": true,\n    \"google_drive\": true,\n    \"kubi\": true,\n    \"microsoft_one_drive\": true\n  },\n  \"other_options\": {\n    \"allow_auto_active_users\": true,\n    \"allow_users_contact_support_via_chat\": true,\n    \"allow_users_enter_and_share_pronouns\": true,\n    \"blur_snapshot\": true,\n    \"display_meetings_scheduled_for_others\": true,\n    \"meeting_qos_and_mos\": 0,\n    \"show_one_user_meeting_on_dashboard\": true,\n    \"use_cdn\": \"none\"\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"allow_recovery_deleted_cloud_recordings\": true,\n    \"archive\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"settings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"auto_delete_cmr\": true,\n    \"auto_delete_cmr_days\": 90,\n    \"record_files_separately\": {\n      \"active_speaker\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gallery_view\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"shared_screen\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"auto_recording\": \"local\",\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"cloud_recording_download_host\": true,\n    \"host_delete_cloud_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_addresses_or_ranges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"local_recording\": true,\n    \"prevent_host_access_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"recording_disclaimer\": true,\n    \"recording_password_requirement\": {\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"required_password_for_existing_cloud_recordings\": true,\n    \"required_password_for_shared_cloud_recordings\": true,\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"both\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"enforce_login_with_domains\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"jbh_time\": 5,\n    \"join_before_host\": true,\n    \"meeting_password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_upper_and_lower_characters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"not_store_meeting_topic\": true,\n    \"participant_video\": true,\n    \"personal_meeting\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"use_pmi_for_instant_meetings\": true,\n    \"use_pmi_for_scheduled_meetings\": true,\n    \"always_display_zoom_meeting_as_topic\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_topic_for_scheduled_meetings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"hide_meeting_description\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"hide_description_for_scheduled_meetings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"always_display_zoom_webinar_as_topic\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_topic_for_scheduled_webinars\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"hide_webinar_description\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"hide_description_for_scheduled_webinars\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"telephony_regions\": {\n      \"selection_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"third_party_audio\": true\n  },\n  \"tsp\": {\n    \"call_out\": true,\n    \"call_out_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"display_toll_free_numbers\": true,\n    \"show_international_numbers_link\": true\n  },\n  \"zoom_rooms\": {\n    \"auto_start_stop_scheduled_meetings\": true,\n    \"cmr_for_instant_meeting\": true,\n    \"force_private_meeting\": true,\n    \"hide_host_information\": true,\n    \"list_meetings_with_calendar\": true,\n    \"start_airplay_manually\": true,\n    \"ultrasonic\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true,\n    \"zr_post_meeting_feedback\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/settings?option=meeting_security",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "meeting_security"
												}
											],
											"variable": [
												{
													"key": "accountId",
													"value": "me",
													"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\n Not Found \n\n**Error Code:** `2001` <br>\nAccount does not exist: $accountId",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"admin_change_name_pic\": true,\n    \"admin_change_user_info\": true,\n    \"user_modifiable_info_by_admin\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"hide_billing_info\": true,\n    \"import_photos_from_devices\": true,\n    \"password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"minimum_password_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"sign_again_period_for_inactivity_on_client\": 45,\n    \"sign_again_period_for_inactivity_on_web\": 60,\n    \"sign_in_with_two_factor_auth\": \"group\",\n    \"sign_in_with_two_factor_auth_groups\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"sign_in_with_two_factor_auth_roles\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  },\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": {\n      \"allow_webinar_attendees_dial\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"numbers\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"low_host_count_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"feature\": {\n    \"meeting_capacity\": 50\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_host_to_enable_focus_mode\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 1,\n    \"allow_participants_to_rename\": true,\n    \"allow_show_zoom_windows\": true,\n    \"allow_users_save_chats\": 1,\n    \"annotation\": true,\n    \"anonymous_question_answer\": true,\n    \"attendee_on_hold\": true,\n    \"attention_mode_focus_mode\": true,\n    \"auto_answer\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The specific instructions\",\n    \"data_center_regions\": [\n      \"AU\",\n      \"AU\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"dscp_audio\": 56,\n    \"dscp_marking\": true,\n    \"dscp_video\": 40,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"host\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_reactions\": true,\n    \"meeting_survey\": true,\n    \"original_audio\": true,\n    \"p2p_connetion\": true,\n    \"p2p_ports\": true,\n    \"polling\": true,\n    \"meeting_polling\": {\n      \"enable\": true,\n      \"advanced_polls\": true,\n      \"allow_alternative_host_to_add_edit\": true\n    },\n    \"ports_range\": \"1;65535\",\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"record_play_own_voice\": true,\n    \"remote_control\": true,\n    \"request_permission_to_unmute_participants\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"virtual_background_settings\": {\n      \"allow_upload_custom\": true,\n      \"allow_videos\": true,\n      \"enable\": true,\n      \"files\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"watermark\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 1,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 1,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 1,\n      \"default_attendees_chat_with\": 1,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"webinar_polling\": {\n      \"enable\": true,\n      \"advanced_polls\": true,\n      \"allow_alternative_host_to_add_edit\": true\n    },\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true,\n    \"who_can_share_screen\": \"host\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true\n  },\n  \"integration\": {\n    \"box\": true,\n    \"dropbox\": true,\n    \"google_calendar\": true,\n    \"google_drive\": true,\n    \"kubi\": true,\n    \"microsoft_one_drive\": true\n  },\n  \"other_options\": {\n    \"allow_auto_active_users\": true,\n    \"allow_users_contact_support_via_chat\": true,\n    \"allow_users_enter_and_share_pronouns\": true,\n    \"blur_snapshot\": true,\n    \"display_meetings_scheduled_for_others\": true,\n    \"meeting_qos_and_mos\": 0,\n    \"show_one_user_meeting_on_dashboard\": true,\n    \"use_cdn\": \"none\"\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"allow_recovery_deleted_cloud_recordings\": true,\n    \"archive\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"settings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"auto_delete_cmr\": true,\n    \"auto_delete_cmr_days\": 90,\n    \"record_files_separately\": {\n      \"active_speaker\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gallery_view\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"shared_screen\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"auto_recording\": \"local\",\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"cloud_recording_download_host\": true,\n    \"host_delete_cloud_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_addresses_or_ranges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"local_recording\": true,\n    \"prevent_host_access_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"recording_disclaimer\": true,\n    \"recording_password_requirement\": {\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"required_password_for_existing_cloud_recordings\": true,\n    \"required_password_for_shared_cloud_recordings\": true,\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"both\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"enforce_login_with_domains\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"jbh_time\": 5,\n    \"join_before_host\": true,\n    \"meeting_password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_upper_and_lower_characters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"not_store_meeting_topic\": true,\n    \"participant_video\": true,\n    \"personal_meeting\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"use_pmi_for_instant_meetings\": true,\n    \"use_pmi_for_scheduled_meetings\": true,\n    \"always_display_zoom_meeting_as_topic\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_topic_for_scheduled_meetings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"hide_meeting_description\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"hide_description_for_scheduled_meetings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"always_display_zoom_webinar_as_topic\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_topic_for_scheduled_webinars\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"hide_webinar_description\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"hide_description_for_scheduled_webinars\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"telephony_regions\": {\n      \"selection_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"third_party_audio\": true\n  },\n  \"tsp\": {\n    \"call_out\": true,\n    \"call_out_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"display_toll_free_numbers\": true,\n    \"show_international_numbers_link\": true\n  },\n  \"zoom_rooms\": {\n    \"auto_start_stop_scheduled_meetings\": true,\n    \"cmr_for_instant_meeting\": true,\n    \"force_private_meeting\": true,\n    \"hide_host_information\": true,\n    \"list_meetings_with_calendar\": true,\n    \"start_airplay_manually\": true,\n    \"ultrasonic\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true,\n    \"zr_post_meeting_feedback\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/settings?option=meeting_security",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "meeting_security"
												}
											],
											"variable": [
												{
													"key": "accountId",
													"value": "me",
													"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get account's managed domains",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/accounts/:accountId/managed_domains",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts",
								":accountId",
								"managed_domains"
							],
							"variable": [
								{
									"key": "accountId",
									"value": "q6gBJVO5TzexKYTb_I2rpg",
									"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
								}
							]
						},
						"description": "Use this API to get an account's [managed domains](https://support.zoom.us/hc/en-us/articles/203395207). To get the Master account's managed domains, pass the `me` value for the `accountId` path parameter. \n\n **Scopes:** `account:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* A Pro or a higher paid account with the Master account option enabled."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200` <br>\nAccount's managed domains returned. \n\n**Error Code:** `200` <br>\nOnly available for paid accounts.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId/managed_domains",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId",
										"managed_domains"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "q6gBJVO5TzexKYTb_I2rpg",
											"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"domains\": [\n    {\n      \"domain\": \"example.com\",\n      \"status\": \"verified\"\n    },\n    {\n      \"domain\": \"example.com\",\n      \"status\": \"verified\"\n    }\n  ],\n  \"total_records\": 1\n}"
						},
						{
							"name": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `2001` <br>\nAccount does not exist: $accountId",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId/managed_domains",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId",
										"managed_domains"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "q6gBJVO5TzexKYTb_I2rpg",
											"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get account's trusted domains",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/accounts/:accountId/trusted_domains",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts",
								":accountId",
								"trusted_domains"
							],
							"variable": [
								{
									"key": "accountId",
									"value": "q6gBJVO5TzexKYTb_I2rpg",
									"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
								}
							]
						},
						"description": "Use this API to get an account's [trusted domains](https://support.zoom.us/hc/en-us/articles/203395207). To get the Master account's trusted domains, use the `me` value for the `accountId` path parameter. \n\n **Scopes:** `account:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* The account must be a paid account."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200` <br>\nAccount's trusted domains returned. \n\n**Error Code:** `2001` <br>\nAccount does not exist: $accountId",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId/trusted_domains",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId",
										"trusted_domains"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "q6gBJVO5TzexKYTb_I2rpg",
											"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"trusted_domains\": [\n    \"example.com\",\n    \"example.com\"\n  ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\nNot Found \n\n**Error Code:** `2001` <br>\nAccount does not exist: $accountId",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId/trusted_domains",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId",
										"trusted_domains"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "q6gBJVO5TzexKYTb_I2rpg",
											"description": "(Required) The account's ID. For the Master account, pass the `me` value for this parameter."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "groups",
			"item": [
				{
					"name": "{group Id}",
					"item": [
						{
							"name": "admins",
							"item": [
								{
									"name": "List group admins",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/admins?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"admins"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										},
										"description": "Use this API to return a list of [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) administrators under your account.\n\n**Scopes:** `group:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* A Pro, Business, or Education account"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br> Only available for paid account: \"{accountId}\".",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"admins\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"name\": \"Jill Chill\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"name\": \"Jill Chill\"\n    }\n  ],\n  \"next_page_token\": \"oMTCmjMRwzSfZtUXDIuWDswdksIQ3dyGUB1\",\n  \"page_size\": 1,\n  \"total_records\": 20\n}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nA group with the \"{groupId}\" ID does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add group admins",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"admins\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/admins",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"admins"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										},
										"description": "Use this API to add administrators to a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) under your account.\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* A Pro, Business, or Education account"
									},
									"response": [
										{
											"name": "**Status Code:** `200` <br> Only available for paid account: \"{accountId}\".",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"admins\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Status Code:** `201` <br> Group administrator added.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"admins\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"added_at\": \"2022-03-25T03:08:12Z\",\n  \"ids\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n}"
										},
										{
											"name": "**Status Code:** `404` <br> Not found. <br> **Error Code:** `4130` <br> A group with the \"{groupId}\" ID does not exist.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"admins\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a group admin",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/admins/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"admins",
												":userId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												},
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Use this API to remove a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) administrator in a Zoom account.\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* A Pro, Business, or Education account"
									},
									"response": [
										{
											"name": "**Status Code:** `200` <br> Only available for paid account: \"{accountId}\".",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins",
														":userId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														},
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Status Code:** `204` <br> Group administrator removed.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins",
														":userId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														},
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Status Code:** `400` <br> Bad request. <br> **Error Code:** `4138` <br> That user is not an administrator for the group: \"{groupId}\".",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins",
														":userId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														},
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Status Code:** `404` <br> Not found. <br> **Error Code:** `4130` <br> A group with the \"{groupId}\" ID does not exist.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins",
														":userId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														},
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "lock settings",
							"item": [
								{
									"name": "Get locked settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=meeting_security",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"lock_settings"
											],
											"query": [
												{
													"key": "option",
													"value": "meeting_security",
													"description": "Optional query parameters: \n* `meeting_security` — Use this query parameter to view the meeting security settings applied to the user's account."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "0mgThLiRQH2bUHvIaL4t2g",
													"description": "(Required) Id of the group."
												}
											]
										},
										"description": "Retrieve a [group's](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) locked settings. If you lock a setting, the group members will not be able to modify it individually. <p style=\"background-color:#FEEFB3; color:#9F6000\"><br>Note:</b> The `force_pmi_jbh_password` field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.</p>\n\n**Prerequisite**: Pro, Business, or Education account<br>\n**Scopes**: `group:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**Error Code:** `200`<br>\nOnly available for paid account.\n\n**Status Code:** `200`<br>\nLocked settings of group returned.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=meeting_security",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"lock_settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_security"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "0mgThLiRQH2bUHvIaL4t2g",
															"description": "(Required) Id of the group."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": true\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_live_streaming\": true,\n    \"allow_show_zoom_windows\": true,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"auto_answer\": true,\n    \"auto_generated_captions\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"all\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"full_transcript\": true,\n    \"group_hd\": true,\n    \"language_interpretation\": true,\n    \"manual_captions\": true,\n    \"meeting_reactions\": true,\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"original_audio\": true,\n    \"polling\": true,\n    \"meeting_polling\": {\n      \"enable\": true,\n      \"advanced_polls\": true,\n      \"allow_alternative_host_to_add_edit\": true\n    },\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"save_caption\": true,\n    \"save_captions\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_browser_join_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"waiting_room\": true,\n    \"webinar_chat\": true,\n    \"webinar_live_streaming\": true,\n    \"webinar_polling\": true,\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true\n  },\n  \"other_options\": {\n    \"blur_snapshot\": true\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"auto_delete_cmr\": true,\n    \"auto_recording\": true,\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"host_delete_cloud_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": true,\n      \"ip_addresses_or_ranges\": \"200.181.108.17 - 220.181.108.157\"\n    },\n    \"local_recording\": true,\n    \"prevent_host_access_recording\": true,\n    \"recording_authentication\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": true,\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"meeting_authentication\": true,\n    \"mute_upon_entry\": true,\n    \"participant_video\": true,\n    \"pstn_password_protected\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"upcoming_meeting_reminder\": true\n  },\n  \"telephony\": {\n    \"telephony_regions\": true,\n    \"third_party_audio\": true\n  }\n}"
										},
										{
											"name": "**Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nGroup does not exist: {groupId}",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=meeting_security",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"lock_settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_security"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "0mgThLiRQH2bUHvIaL4t2g",
															"description": "(Required) Id of the group."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update locked settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": true\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_live_streaming\": true,\n    \"allow_show_zoom_windows\": true,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"auto_answer\": true,\n    \"auto_generated_captions\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"all\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"full_transcript\": true,\n    \"group_hd\": true,\n    \"language_interpretation\": true,\n    \"manual_captions\": true,\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"original_audio\": true,\n    \"polling\": true,\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"save_caption\": true,\n    \"save_captions\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_browser_join_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"waiting_room\": true,\n    \"webinar_chat\": true,\n    \"webinar_live_streaming\": true,\n    \"webinar_polling\": true,\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true\n  },\n  \"other_options\": {\n    \"blur_snapshot\": true\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"auto_delete_cmr\": true,\n    \"auto_recording\": true,\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"host_delete_cloud_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": true,\n      \"ip_addresses_or_ranges\": \"200.181.108.17 - 220.181.108.157\"\n    },\n    \"local_recording\": true,\n    \"recording_authentication\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": true,\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"meeting_authentication\": true,\n    \"mute_upon_entry\": true,\n    \"participant_video\": true,\n    \"personal_meeting\": true,\n    \"pstn_password_protected\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"upcoming_meeting_reminder\": true\n  },\n  \"telephony\": {\n    \"telephony_regions\": true,\n    \"third_party_audio\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=meeting_security",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"lock_settings"
											],
											"query": [
												{
													"key": "option",
													"value": "meeting_security",
													"description": "Optional query parameters: \n* `meeting_security` — Use this query parameter to view the meeting security settings applied to the user's account."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "0mgThLiRQH2bUHvIaL4t2g",
													"description": "(Required) The Id of the group."
												}
											]
										},
										"description": "Update a [group's](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) locked settings. If you lock a setting, the group members will not be able to modify it individually. <p style=\"background-color:#FEEFB3; color:#9F6000\"><br>Note:</b> The `force_pmi_jbh_password` field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.</p>\n\n**Prerequisite**: Pro, Business, or Education account<br>\n**Scopes**: `group:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**Status Code:** `204`<br>\nGroup's locked settings updated.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": true\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_live_streaming\": true,\n    \"allow_show_zoom_windows\": true,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"auto_answer\": true,\n    \"auto_generated_captions\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"all\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"full_transcript\": true,\n    \"group_hd\": true,\n    \"language_interpretation\": true,\n    \"manual_captions\": true,\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"original_audio\": true,\n    \"polling\": true,\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"save_caption\": true,\n    \"save_captions\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_browser_join_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"waiting_room\": true,\n    \"webinar_chat\": true,\n    \"webinar_live_streaming\": true,\n    \"webinar_polling\": true,\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true\n  },\n  \"other_options\": {\n    \"blur_snapshot\": true\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"auto_delete_cmr\": true,\n    \"auto_recording\": true,\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"host_delete_cloud_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": true,\n      \"ip_addresses_or_ranges\": \"200.181.108.17 - 220.181.108.157\"\n    },\n    \"local_recording\": true,\n    \"recording_authentication\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": true,\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"meeting_authentication\": true,\n    \"mute_upon_entry\": true,\n    \"participant_video\": true,\n    \"personal_meeting\": true,\n    \"pstn_password_protected\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"upcoming_meeting_reminder\": true\n  },\n  \"telephony\": {\n    \"telephony_regions\": true,\n    \"third_party_audio\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=meeting_security",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"lock_settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_security"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "0mgThLiRQH2bUHvIaL4t2g",
															"description": "(Required) The Id of the group."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br>\nOnly available for paid account.\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": true\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_live_streaming\": true,\n    \"allow_show_zoom_windows\": true,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"auto_answer\": true,\n    \"auto_generated_captions\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"all\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"full_transcript\": true,\n    \"group_hd\": true,\n    \"language_interpretation\": true,\n    \"manual_captions\": true,\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"original_audio\": true,\n    \"polling\": true,\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"save_caption\": true,\n    \"save_captions\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_browser_join_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"waiting_room\": true,\n    \"webinar_chat\": true,\n    \"webinar_live_streaming\": true,\n    \"webinar_polling\": true,\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true\n  },\n  \"other_options\": {\n    \"blur_snapshot\": true\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"auto_delete_cmr\": true,\n    \"auto_recording\": true,\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"host_delete_cloud_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": true,\n      \"ip_addresses_or_ranges\": \"200.181.108.17 - 220.181.108.157\"\n    },\n    \"local_recording\": true,\n    \"recording_authentication\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": true,\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"meeting_authentication\": true,\n    \"mute_upon_entry\": true,\n    \"participant_video\": true,\n    \"personal_meeting\": true,\n    \"pstn_password_protected\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"upcoming_meeting_reminder\": true\n  },\n  \"telephony\": {\n    \"telephony_regions\": true,\n    \"third_party_audio\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=meeting_security",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"lock_settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_security"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "0mgThLiRQH2bUHvIaL4t2g",
															"description": "(Required) The Id of the group."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nThis group does not exist.\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": true\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_live_streaming\": true,\n    \"allow_show_zoom_windows\": true,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"auto_answer\": true,\n    \"auto_generated_captions\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"all\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"full_transcript\": true,\n    \"group_hd\": true,\n    \"language_interpretation\": true,\n    \"manual_captions\": true,\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"original_audio\": true,\n    \"polling\": true,\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"save_caption\": true,\n    \"save_captions\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_browser_join_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"waiting_room\": true,\n    \"webinar_chat\": true,\n    \"webinar_live_streaming\": true,\n    \"webinar_polling\": true,\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true\n  },\n  \"other_options\": {\n    \"blur_snapshot\": true\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"auto_delete_cmr\": true,\n    \"auto_recording\": true,\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"host_delete_cloud_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": true,\n      \"ip_addresses_or_ranges\": \"200.181.108.17 - 220.181.108.157\"\n    },\n    \"local_recording\": true,\n    \"recording_authentication\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": true,\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"meeting_authentication\": true,\n    \"mute_upon_entry\": true,\n    \"participant_video\": true,\n    \"personal_meeting\": true,\n    \"pstn_password_protected\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"upcoming_meeting_reminder\": true\n  },\n  \"telephony\": {\n    \"telephony_regions\": true,\n    \"third_party_audio\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=meeting_security",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"lock_settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_security"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "0mgThLiRQH2bUHvIaL4t2g",
															"description": "(Required) The Id of the group."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "members",
							"item": [
								{
									"name": "{member Id}",
									"item": [
										{
											"name": "Delete a group member",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														},
														{
															"key": "memberId",
															"value": "v4iyWT1LTfy8QvPG4GTvdg",
															"description": "(Required) The member ID."
														}
													]
												},
												"description": "Use this API to remove a user from a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) in an account.\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* A Pro, Business, or Education account"
											},
											"response": [
												{
													"name": "Only available for paid account,{accountId}.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "SobVexyrQjqCkcxjpBWi6w",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
																},
																{
																	"key": "memberId",
																	"value": "v4iyWT1LTfy8QvPG4GTvdg",
																	"description": "(Required) The member ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Group member deleted.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "SobVexyrQjqCkcxjpBWi6w",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
																},
																{
																	"key": "memberId",
																	"value": "v4iyWT1LTfy8QvPG4GTvdg",
																	"description": "(Required) The member ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**Status Code:** `400`<br>\nBad request.<br>\n**Error Code:** `1010`<br>\nGroup does not belong to this account:{accountId}.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "SobVexyrQjqCkcxjpBWi6w",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
																},
																{
																	"key": "memberId",
																	"value": "v4iyWT1LTfy8QvPG4GTvdg",
																	"description": "(Required) The member ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nA group with this {groupId} does not exist.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "SobVexyrQjqCkcxjpBWi6w",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
																},
																{
																	"key": "memberId",
																	"value": "v4iyWT1LTfy8QvPG4GTvdg",
																	"description": "(Required) The member ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update a group member",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"move\",\n  \"target_group_id\": \"SobVexyrQjqCkcxjpBWi6w\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group's unique ID. To get this value, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API.\n* To set a user's primary group, use the `target_group_id` value for this parameter's value. \n* To move a group member from one group to another, use the `groupId` of the designated group."
														},
														{
															"key": "memberId",
															"value": "v4iyWT1LTfy8QvPG4GTvdg",
															"description": "(Required) The group member's unique ID. To get this value, use the [**List group members**](/api-reference/zoom-api/methods#operation/groupMembers) API."
														}
													]
												},
												"description": "Use this API to perform either of the following tasks: \n* Remove a group member from one group and move them to a different group. \n* Set a user's primary group. By default, the primary group is the first group that user is added to.\n\nIf a user is a member of multiple groups, you can [assign the user a primary group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-#h_d07c7dcd-4fd8-485a-b5fe-a322e8d21c09). The user will use the primary group's settings by default. However, if the user is a member of a group with locked settings, those group settings will remain locked to the user.\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* A Pro or higher account"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` **No Content**<br>\nGroup member updated.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"action\": \"move\",\n  \"target_group_id\": \"SobVexyrQjqCkcxjpBWi6w\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "SobVexyrQjqCkcxjpBWi6w",
																	"description": "(Required) The group's unique ID. To get this value, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API.\n* To set a user's primary group, use the `target_group_id` value for this parameter's value. \n* To move a group member from one group to another, use the `groupId` of the designated group."
																},
																{
																	"key": "memberId",
																	"value": "v4iyWT1LTfy8QvPG4GTvdg",
																	"description": "(Required) The group member's unique ID. To get this value, use the [**List group members**](/api-reference/zoom-api/methods#operation/groupMembers) API."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br>\n Only available for Paid account, {accountId}.<br><br>\n **Error Code:** `300`<br>\n The target_group_id can not be empty.<br><br>\n **Error Code:** `1010`<br>\n Group does not belong t",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"action\": \"move\",\n  \"target_group_id\": \"SobVexyrQjqCkcxjpBWi6w\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "SobVexyrQjqCkcxjpBWi6w",
																	"description": "(Required) The group's unique ID. To get this value, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API.\n* To set a user's primary group, use the `target_group_id` value for this parameter's value. \n* To move a group member from one group to another, use the `groupId` of the designated group."
																},
																{
																	"key": "memberId",
																	"value": "v4iyWT1LTfy8QvPG4GTvdg",
																	"description": "(Required) The group member's unique ID. To get this value, use the [**List group members**](/api-reference/zoom-api/methods#operation/groupMembers) API."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `4130`<br>\nA group with this {groupId} does not exist.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"action\": \"move\",\n  \"target_group_id\": \"SobVexyrQjqCkcxjpBWi6w\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "SobVexyrQjqCkcxjpBWi6w",
																	"description": "(Required) The group's unique ID. To get this value, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API.\n* To set a user's primary group, use the `target_group_id` value for this parameter's value. \n* To move a group member from one group to another, use the `groupId` of the designated group."
																},
																{
																	"key": "memberId",
																	"value": "v4iyWT1LTfy8QvPG4GTvdg",
																	"description": "(Required) The group member's unique ID. To get this value, use the [**List group members**](/api-reference/zoom-api/methods#operation/groupMembers) API."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "List group members ",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/members?page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"members"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												},
												{
													"key": "page_number",
													"value": "1",
													"description": "**Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination."
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										},
										"description": "List the members of a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) under your account.\n\n**Prerequisite**: Pro, Business, or Education account<br>\n**Scopes**: `group:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br> Only available for paid account,{accountId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members?page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"members\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"first_name\": \"Jill\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\",\n      \"last_name\": \"Chill\",\n      \"type\": 1\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"first_name\": \"Jill\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\",\n      \"last_name\": \"Chill\",\n      \"type\": 1\n    }\n  ],\n  \"next_page_token\": \"R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42\",\n  \"page_count\": 20,\n  \"page_number\": 1,\n  \"page_size\": 10,\n  \"total_records\": 200\n}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nA group with this {groupId} does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members?page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add group members",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"members\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/members",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"members"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										},
										"description": "Use this API to add users to a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) in your account.\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* A Pro, Business, or Education account"
									},
									"response": [
										{
											"name": "Only available for paid account,{accountId}.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"members\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Member added.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"members\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"added_at\": \"2022-03-25T03:08:12Z\",\n  \"ids\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n}"
										},
										{
											"name": "**Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nA group with this {groupId} does not exist.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"members\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "settings",
							"item": [
								{
									"name": "virtual backgrounds",
									"item": [
										{
											"name": "Delete Virtual Background files",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds?file_ids=6SEYvTU4SuG257lOHuJKOQ",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings",
														"virtual_backgrounds"
													],
													"query": [
														{
															"key": "file_ids",
															"value": "6SEYvTU4SuG257lOHuJKOQ",
															"description": "A comma-separated list of the file IDs to delete."
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "0mgThLiRQH2bUHvIaL4t2g",
															"description": "(Required) The group ID. To get a group's ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												},
												"description": "Use this API to delete a group's [Virtual Background files](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_01EJF3YFEWGT8YA0ZJ079JEDQE). \n\n **Scope:** `group:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* The [Virtual Background feature](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) must be enabled on the account."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` <br>\n* No content. \n* Deleted.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds?file_ids=6SEYvTU4SuG257lOHuJKOQ",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "6SEYvTU4SuG257lOHuJKOQ"
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "0mgThLiRQH2bUHvIaL4t2g",
																	"description": "(Required) The group ID. To get a group's ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `300` <br>\n* Invalid parameter: {file_ids} \n* Group member not found.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds?file_ids=6SEYvTU4SuG257lOHuJKOQ",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "6SEYvTU4SuG257lOHuJKOQ"
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "0mgThLiRQH2bUHvIaL4t2g",
																	"description": "(Required) The group ID. To get a group's ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `4130` <br>\n A group with this {groupId} does not exist.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds?file_ids=6SEYvTU4SuG257lOHuJKOQ",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "6SEYvTU4SuG257lOHuJKOQ"
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "0mgThLiRQH2bUHvIaL4t2g",
																	"description": "(Required) The group ID. To get a group's ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Upload Virtual Background files",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "binary",
															"description": "The Virtual Background file's path.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings",
														"virtual_backgrounds"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "0mgThLiRQH2bUHvIaL4t2g",
															"description": "(Required) The group ID. To get a group's ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												},
												"description": "Use this API to [upload Virtual Background files](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_01EJF3YFEWGT8YA0ZJ079JEDQE) for all users in a group to use. \n\n **Scopes:** `group:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n**Prerequisites:** \n* The [Virtual Background feature](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) must be enabled on the account."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `201` <br>\n Created",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"value": "binary",
																	"description": "The Virtual Background file's path.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"settings",
																"virtual_backgrounds"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "0mgThLiRQH2bUHvIaL4t2g",
																	"description": "(Required) The group ID. To get a group's ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"6SEYvTU4SuG257lOHuJKOQ\",\n  \"is_default\": true,\n  \"name\": \"San Francisco\",\n  \"size\": \"7220\",\n  \"type\": \"image\"\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n**Error Code:** `120`<br>\nNo file uploaded, verify that a file has been uploaded.<br>\nFile size cannot exceed 15M.<br>\nA maximum of 10 files are allowed for a user.<br>\nOnly jpg/jpeg or png image file can b",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"value": "binary",
																	"description": "The Virtual Background file's path.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"settings",
																"virtual_backgrounds"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "0mgThLiRQH2bUHvIaL4t2g",
																	"description": "(Required) The group ID. To get a group's ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found** <br>\n**Error Code:** `1001`<br>\nUser not exist.<br>\nUser {email} not exist or not belong to this account.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"value": "binary",
																	"description": "The Virtual Background file's path.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"settings",
																"virtual_backgrounds"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "0mgThLiRQH2bUHvIaL4t2g",
																	"description": "(Required) The group ID. To get a group's ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get a group's settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/settings?option=meeting_security&custom_query_fields=host_video",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "meeting_security",
													"description": "Optional query parameters: \n* `meeting_authentication` — Use this query parameter to view the [meeting authentication settings](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied to the user's account. \n* `recording_authentication` — Use this query parameter to view the [recording authentication settings](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied to the user's account. \n* `meeting_security` — Use this query parameter to view the meeting security settings applied to the user's account."
												},
												{
													"key": "custom_query_fields",
													"value": "host_video",
													"description": "Provide the name of the field by which you would like to filter the response. For example, if you provide \"host_video\" as the value of this field, you will get a response similar to the following: \n\n{\n \"schedule_meeting\": {\n \"host_video\": false\n }\n} \n\nYou can provide multiple values by separating them with commas(example: \"host_video,participant_video\")."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "0mgThLiRQH2bUHvIaL4t2g",
													"description": "(Required) "
												}
											]
										},
										"description": "Get settings for a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-). \n**Prerequisite**: Pro, Business, or Education account<br>\n**Scopes**: `group:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**Error Code**: `200` <br>\nOnly available for paid account.\n\n**HTTP Status Code**: `200` <br>\nGroup Settings Returned.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings?option=meeting_security&custom_query_fields=host_video",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_security"
														},
														{
															"key": "custom_query_fields",
															"value": "host_video"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "0mgThLiRQH2bUHvIaL4t2g",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": {\n      \"allow_webinar_attendees_dial\": true,\n      \"enable\": true,\n      \"numbers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 1,\n    \"allow_show_zoom_windows\": true,\n    \"allow_users_save_chats\": 1,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"auto_answer\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The specific instructions\",\n    \"data_center_regions\": [\n      \"AU\",\n      \"AU\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"all\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true,\n      \"languages\": \"Portuguese\"\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_reactions\": true,\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"only_host_view_device_list\": true,\n    \"original_audio\": true,\n    \"polling\": true,\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"record_play_own_voice\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_browser_join_link\": true,\n    \"show_device_list\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"unchecked_data_center_regions\": \"US\",\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"virtual_background_settings\": {\n      \"allow_upload_custom\": true,\n      \"allow_videos\": true,\n      \"enable\": true,\n      \"files\": [\n        {\n          \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"is_default\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"size\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"is_default\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"size\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ]\n    },\n    \"waiting_room\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 1,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 2,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 0,\n      \"default_attendees_chat_with\": 1,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions test\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        \"facebook\",\n        \"facebook\"\n      ]\n    },\n    \"webinar_polling\": {\n      \"enable\": true,\n      \"advanced_polls\": true,\n      \"allow_alternative_host_to_add_edit\": true\n    },\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true,\n    \"who_can_share_screen\": \"host\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true\n  },\n  \"other_options\": {\n    \"allow_users_contact_support_via_chat\": true,\n    \"blur_snapshot\": true\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"value\": \"US\"\n    }\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"archive\": {\n      \"enable\": true,\n      \"settings\": {\n        \"audio_file\": true,\n        \"cc_transcript_file\": true,\n        \"chat_file\": true,\n        \"chat_with_sender_email\": true,\n        \"video_file\": true\n      },\n      \"type\": 2\n    },\n    \"auto_recording\": \"local\",\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"cloud_recording_download_host\": true,\n    \"host_delete_cloud_recording\": true,\n    \"record_files_separately\": {\n      \"active_speaker\": true,\n      \"gallery_view\": true,\n      \"shared_screen\": true\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"ip_address_access_control\": {\n      \"enable\": true,\n      \"ip_addresses_or_ranges\": \"200.181.108.17 - 220.181.108.157\"\n    },\n    \"local_recording\": true,\n    \"prevent_host_access_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"both\",\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"mute_upon_entry\": true,\n    \"participant_video\": true,\n    \"personal_meeting\": true,\n    \"pstn_password_protected\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"upcoming_meeting_reminder\": true,\n    \"use_pmi_for_instant_meetings\": true,\n    \"use_pmi_for_schedule_meetings\": true,\n    \"always_display_zoom_meeting_as_topic\": {\n      \"enable\": false,\n      \"display_topic_for_scheduled_meetings\": false\n    },\n    \"always_display_zoom_webinar_as_topic\": {\n      \"enable\": false,\n      \"display_topic_for_scheduled_webinars\": false\n    }\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"telephony_regions\": {\n      \"selection_values\": \"CNTB\"\n    },\n    \"third_party_audio\": true\n  }\n}"
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\n**Error Code:** `4130` <br>\nGroup does not exist: {groupId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings?option=meeting_security&custom_query_fields=host_video",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_security"
														},
														{
															"key": "custom_query_fields",
															"value": "host_video"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "0mgThLiRQH2bUHvIaL4t2g",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a group's settings",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": {\n      \"allow_webinar_attendees_dial\": true,\n      \"enable\": true,\n      \"numbers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 1,\n    \"allow_show_zoom_windows\": true,\n    \"allow_users_save_chats\": 3,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"auto_answer\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The specific instructions\",\n    \"data_center_regions\": [\n      \"US\",\n      \"US\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"host\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"only_host_view_device_list\": true,\n    \"original_audio\": true,\n    \"polling\": true,\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"record_play_own_voice\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_browser_join_link\": true,\n    \"show_device_list\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"waiting_room\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 3,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 2,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 0,\n      \"default_attendees_chat_with\": 1,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        \"youtube\",\n        \"workplace_by_facebook\"\n      ]\n    },\n    \"webinar_polling\": {\n      \"advanced_polls\": true,\n      \"enable\": true\n    },\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true,\n    \"who_can_share_screen\": \"host\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true\n  },\n  \"other_options\": {\n    \"allow_users_contact_support_via_chat\": true,\n    \"blur_snapshot\": true\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"value\": \"US\"\n    }\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"archive\": {\n      \"enable\": true,\n      \"settings\": {\n        \"audio_file\": true,\n        \"cc_transcript_file\": true,\n        \"chat_file\": true,\n        \"chat_with_sender_email\": true,\n        \"video_file\": true\n      },\n      \"type\": 1\n    },\n    \"auto_recording\": \"local\",\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"cloud_recording_download_host\": true,\n    \"host_delete_cloud_recording\": true,\n    \"record_files_separately\": {\n      \"active_speaker\": true,\n      \"gallery_view\": true,\n      \"shared_screen\": true\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"ip_address_access_control\": {\n      \"enable\": true,\n      \"ip_addresses_or_ranges\": \"200.181.108.17 - 220.181.108.157\"\n    },\n    \"local_recording\": true,\n    \"prevent_host_access_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"both\",\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"mute_upon_entry\": true,\n    \"participant_video\": true,\n    \"pstn_password_protected\": true,\n    \"require_password_for_all_meetings\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"upcoming_meeting_reminder\": true,\n    \"always_display_zoom_meeting_as_topic\": {\n      \"enable\": false,\n      \"display_topic_for_scheduled_meetings\": false\n    },\n    \"always_display_zoom_webinar_as_topic\": {\n      \"enable\": false,\n      \"display_topic_for_scheduled_webinars\": false\n    }\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"third_party_audio\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/settings?option=meeting_security",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "meeting_security",
													"description": "Optional query parameters: \n* `meeting_authentication` — [Meeting authentication settings](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars). \n* `recording_authentication` — [Recording authentication settings](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings). \n* `meeting_security` — Meeting security settings."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "0mgThLiRQH2bUHvIaL4t2g",
													"description": "(Required) Id of the group."
												}
											]
										},
										"description": "Update settings for a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-).<p style=\"background-color:#FEEFB3; color:#9F6000\"><br>Note:</b> The `force_pmi_jbh_password` field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.</p>\n**Prerequisite**: Pro, Business, or Education account<br> \n**Scopes**: `group:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**Error code:** `200`<br>\nOnly available for Paid account, {accountId}",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": {\n      \"allow_webinar_attendees_dial\": true,\n      \"enable\": true,\n      \"numbers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 1,\n    \"allow_show_zoom_windows\": true,\n    \"allow_users_save_chats\": 3,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"auto_answer\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The specific instructions\",\n    \"data_center_regions\": [\n      \"US\",\n      \"US\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"host\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"only_host_view_device_list\": true,\n    \"original_audio\": true,\n    \"polling\": true,\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"record_play_own_voice\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_browser_join_link\": true,\n    \"show_device_list\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"waiting_room\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 3,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 2,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 0,\n      \"default_attendees_chat_with\": 1,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        \"workplace_by_facebook\",\n        \"custom_live_streaming_service\"\n      ]\n    },\n    \"webinar_polling\": {\n      \"advanced_polls\": true,\n      \"enable\": true\n    },\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true,\n    \"who_can_share_screen\": \"host\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true\n  },\n  \"other_options\": {\n    \"allow_users_contact_support_via_chat\": true,\n    \"blur_snapshot\": true\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"value\": \"US\"\n    }\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"archive\": {\n      \"enable\": true,\n      \"settings\": {\n        \"audio_file\": true,\n        \"cc_transcript_file\": true,\n        \"chat_file\": true,\n        \"chat_with_sender_email\": true,\n        \"video_file\": true\n      },\n      \"type\": 1\n    },\n    \"auto_recording\": \"local\",\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"cloud_recording_download_host\": true,\n    \"host_delete_cloud_recording\": true,\n    \"record_files_separately\": {\n      \"active_speaker\": true,\n      \"gallery_view\": true,\n      \"shared_screen\": true\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"ip_address_access_control\": {\n      \"enable\": true,\n      \"ip_addresses_or_ranges\": \"200.181.108.17 - 220.181.108.157\"\n    },\n    \"local_recording\": true,\n    \"prevent_host_access_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"both\",\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"mute_upon_entry\": true,\n    \"participant_video\": true,\n    \"pstn_password_protected\": true,\n    \"require_password_for_all_meetings\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"upcoming_meeting_reminder\": true,\n    \"always_display_zoom_meeting_as_topic\": {\n      \"enable\": false,\n      \"display_topic_for_scheduled_meetings\": false\n    },\n    \"always_display_zoom_webinar_as_topic\": {\n      \"enable\": false,\n      \"display_topic_for_scheduled_webinars\": false\n    }\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"third_party_audio\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings?option=meeting_security",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_security"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "0mgThLiRQH2bUHvIaL4t2g",
															"description": "(Required) Id of the group."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `204`<br>\nSettings updated successfully.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": {\n      \"allow_webinar_attendees_dial\": true,\n      \"enable\": true,\n      \"numbers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 1,\n    \"allow_show_zoom_windows\": true,\n    \"allow_users_save_chats\": 3,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"auto_answer\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The specific instructions\",\n    \"data_center_regions\": [\n      \"US\",\n      \"US\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"host\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"only_host_view_device_list\": true,\n    \"original_audio\": true,\n    \"polling\": true,\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"record_play_own_voice\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_browser_join_link\": true,\n    \"show_device_list\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"waiting_room\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 3,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 2,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 0,\n      \"default_attendees_chat_with\": 1,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        \"workplace_by_facebook\",\n        \"custom_live_streaming_service\"\n      ]\n    },\n    \"webinar_polling\": {\n      \"advanced_polls\": true,\n      \"enable\": true\n    },\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true,\n    \"who_can_share_screen\": \"host\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true\n  },\n  \"other_options\": {\n    \"allow_users_contact_support_via_chat\": true,\n    \"blur_snapshot\": true\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"value\": \"US\"\n    }\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"archive\": {\n      \"enable\": true,\n      \"settings\": {\n        \"audio_file\": true,\n        \"cc_transcript_file\": true,\n        \"chat_file\": true,\n        \"chat_with_sender_email\": true,\n        \"video_file\": true\n      },\n      \"type\": 1\n    },\n    \"auto_recording\": \"local\",\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"cloud_recording_download_host\": true,\n    \"host_delete_cloud_recording\": true,\n    \"record_files_separately\": {\n      \"active_speaker\": true,\n      \"gallery_view\": true,\n      \"shared_screen\": true\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"ip_address_access_control\": {\n      \"enable\": true,\n      \"ip_addresses_or_ranges\": \"200.181.108.17 - 220.181.108.157\"\n    },\n    \"local_recording\": true,\n    \"prevent_host_access_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"both\",\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"mute_upon_entry\": true,\n    \"participant_video\": true,\n    \"pstn_password_protected\": true,\n    \"require_password_for_all_meetings\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"upcoming_meeting_reminder\": true,\n    \"always_display_zoom_meeting_as_topic\": {\n      \"enable\": false,\n      \"display_topic_for_scheduled_meetings\": false\n    },\n    \"always_display_zoom_webinar_as_topic\": {\n      \"enable\": false,\n      \"display_topic_for_scheduled_webinars\": false\n    }\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"third_party_audio\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings?option=meeting_security",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_security"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "0mgThLiRQH2bUHvIaL4t2g",
															"description": "(Required) Id of the group."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `4130`<br>\nGroup does not exist: {groupId}.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": {\n      \"allow_webinar_attendees_dial\": true,\n      \"enable\": true,\n      \"numbers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"in_meeting\": {\n    \"alert_guest_join\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 1,\n    \"allow_show_zoom_windows\": true,\n    \"allow_users_save_chats\": 3,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"auto_answer\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The specific instructions\",\n    \"data_center_regions\": [\n      \"US\",\n      \"US\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"host\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"only_host_view_device_list\": true,\n    \"original_audio\": true,\n    \"polling\": true,\n    \"post_meeting_feedback\": true,\n    \"private_chat\": true,\n    \"record_play_own_voice\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"screen_sharing\": true,\n    \"sending_default_email_invites\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_browser_join_link\": true,\n    \"show_device_list\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"stereo_audio\": true,\n    \"use_html_format_email\": true,\n    \"virtual_background\": true,\n    \"waiting_room\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 3,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 2,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 0,\n      \"default_attendees_chat_with\": 1,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        \"workplace_by_facebook\",\n        \"custom_live_streaming_service\"\n      ]\n    },\n    \"webinar_polling\": {\n      \"advanced_polls\": true,\n      \"enable\": true\n    },\n    \"webinar_question_answer\": true,\n    \"webinar_survey\": true,\n    \"whiteboard\": true,\n    \"who_can_share_screen\": \"host\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true\n  },\n  \"other_options\": {\n    \"allow_users_contact_support_via_chat\": true,\n    \"blur_snapshot\": true\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"value\": \"US\"\n    }\n  },\n  \"recording\": {\n    \"account_user_access_recording\": true,\n    \"archive\": {\n      \"enable\": true,\n      \"settings\": {\n        \"audio_file\": true,\n        \"cc_transcript_file\": true,\n        \"chat_file\": true,\n        \"chat_with_sender_email\": true,\n        \"video_file\": true\n      },\n      \"type\": 1\n    },\n    \"auto_recording\": \"local\",\n    \"cloud_recording\": true,\n    \"cloud_recording_download\": true,\n    \"cloud_recording_download_host\": true,\n    \"host_delete_cloud_recording\": true,\n    \"record_files_separately\": {\n      \"active_speaker\": true,\n      \"gallery_view\": true,\n      \"shared_screen\": true\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"ip_address_access_control\": {\n      \"enable\": true,\n      \"ip_addresses_or_ranges\": \"200.181.108.17 - 220.181.108.157\"\n    },\n    \"local_recording\": true,\n    \"prevent_host_access_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"both\",\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"mute_upon_entry\": true,\n    \"participant_video\": true,\n    \"pstn_password_protected\": true,\n    \"require_password_for_all_meetings\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"upcoming_meeting_reminder\": true,\n    \"always_display_zoom_meeting_as_topic\": {\n      \"enable\": false,\n      \"display_topic_for_scheduled_meetings\": false\n    },\n    \"always_display_zoom_webinar_as_topic\": {\n      \"enable\": false,\n      \"display_topic_for_scheduled_webinars\": false\n    }\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"third_party_audio\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings?option=meeting_security",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_security"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "0mgThLiRQH2bUHvIaL4t2g",
															"description": "(Required) Id of the group."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Delete a group",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/groups/:groupId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "SobVexyrQjqCkcxjpBWi6w",
											"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
										}
									]
								},
								"description": "Use this API to delete a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-).\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* A Pro, Business, or Education account"
							},
							"response": [
								{
									"name": "**Error Code:** `200`<br>\nOnly available for Paid account,{accountId}.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204`<br>\nGroup deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300`<br>\nGroup member not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nGroup not found.<br>\n**Error Code:** `4130`<br>\nA group with this {groupId} does not exist.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a group",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups/:groupId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "SobVexyrQjqCkcxjpBWi6w",
											"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
										}
									]
								},
								"description": "Get a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) under an account.\n\n**Prerequisite**: Pro, Business, or Education account<br>\n**Scopes**: `group:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br> Group returned.<br>\n**Error Code:** `200`<br>\nOnly available for Paid account,{accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"825c9e31f1064c73b394c5e4557d3447\",\n  \"name\": \"Developers\",\n  \"total_members\": 100\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nGroup does not belong to your account.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nGroup not found.<br>\n**Error Code:** `4130`<br> A group with this {groupId} does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a group",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Developers\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/groups/:groupId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "SobVexyrQjqCkcxjpBWi6w",
											"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
										}
									]
								},
								"description": "Update a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) under your account.\n\n**Prerequisite**: Pro, Business, or Education account<br>\n**Scopes**: `group:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "The group does not belong to this account:{accountId}.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Developers\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Group updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Developers\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nA group with this {groupId} does not exist.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Developers\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Status Code:** `409`<br>\nConflict<br>\n**Error Code:** `4132`<br>\nGroup name {groupName} is already in use.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Developers\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List groups",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"groups"
							]
						},
						"description": "List [groups](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) under an account.\n\n**Prerequisite**: Pro or higher account.<br>\n**Scopes**: `group:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nList of groups returned.<br>\n**Error Code:** `200`\nOnly available for paid accounts.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"groups\": [\n    {\n      \"id\": \"SobVexyrQjqCkcxjpBWi6w\",\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"total_members\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"id\": \"SobVexyrQjqCkcxjpBWi6w\",\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"total_members\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"total_records\": 200\n}"
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `4130`<br> A group with this {groupId} does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a group",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"directory_privacy\": 2,\n  \"in_directory\": true,\n  \"name\": \"Developers\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"groups"
							]
						},
						"description": "Use this API to create a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management). You can add a **maximum** of 100 groups in one account per day, and a maximum of 5000 groups in one account.\n\nIf you enabled a new group via the user interface, you can also choose whether to display the group and set its privacy level.\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites**: \n* A Pro or higher account"
					},
					"response": [
						{
							"name": "**Error Code:** `200` <br>\nOnly available for Paid account: {accountId}",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"directory_privacy\": 2,\n  \"in_directory\": true,\n  \"name\": \"Developers\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `201` <br>\nGroup created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"directory_privacy\": 2,\n  \"in_directory\": true,\n  \"name\": \"Developers\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"directory_privacy\": 2,\n  \"id\": \"A4ql1FjgL913r\",\n  \"in_directory\": true,\n  \"name\": \"Developers\",\n  \"total_members\": 34\n}"
						},
						{
							"name": "**Error Code:** `300` <br>\nMissing field: {$name}",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"directory_privacy\": 2,\n  \"in_directory\": true,\n  \"name\": \"Developers\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` <br>\n Not Found \n\n**Error Code:** `4130` <br>\nA group with the name \"{groupId}\" does not exist.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"directory_privacy\": 2,\n  \"in_directory\": true,\n  \"name\": \"Developers\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `409` <br>\n Conflict \n\n**Error Code:** `4132` <br>\nThe group name \"{groupName}\" is already in use.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"directory_privacy\": 2,\n  \"in_directory\": true,\n  \"name\": \"Developers\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `429` <br>\nYou have exceeded the daily rate limit ({0}) of Create a Group API request for this account. This limit resets at GMT 00:00:00.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"directory_privacy\": 2,\n  \"in_directory\": true,\n  \"name\": \"Developers\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "h323/devices",
			"item": [
				{
					"name": "{device Id}",
					"item": [
						{
							"name": "Delete a H.323/SIP device",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/h323/devices/:deviceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"h323",
										"devices",
										":deviceId"
									],
									"variable": [
										{
											"key": "deviceId",
											"value": "abceHewahkrehwiK",
											"description": "(Required) The device ID."
										}
									]
								},
								"description": "A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to delete a H.323/SIP device from your Zoom account.<br><br>\n**Scopes:** `h323:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>"
							},
							"response": [
								{
									"name": "You do not have the permission to delete this device.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "abceHewahkrehwiK",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "H.323/SIP device deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "abceHewahkrehwiK",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "H.323 device does not exist: {deviceId}.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "abceHewahkrehwiK",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "H.323/SIP device not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "abceHewahkrehwiK",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a H.323/SIP device",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"api_test_20190508\",\n  \"protocol\": \"H.323\",\n  \"ip\": \"127.0.0.1\",\n  \"encryption\": \"auto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/h323/devices/:deviceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"h323",
										"devices",
										":deviceId"
									],
									"variable": [
										{
											"key": "deviceId",
											"value": "abceHewahkrehwiK",
											"description": "(Required) The device ID."
										}
									]
								},
								"description": "A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to edit information of a H.323/SIP device from your Zoom account.<br><br>\n**Scopes:** `h323:write:admin`<br>\n <br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nH.323/SIP device updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"api_test_20190508\",\n  \"protocol\": \"H.323\",\n  \"ip\": \"127.0.0.1\",\n  \"encryption\": \"auto\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "abceHewahkrehwiK",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300`<br>\nH.323 Device does not exist: {deviceId}.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"api_test_20190508\",\n  \"protocol\": \"H.323\",\n  \"ip\": \"127.0.0.1\",\n  \"encryption\": \"auto\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "abceHewahkrehwiK",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `2020`<br>\nH.323 device's display name:{displayName} is already in use.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"api_test_20190508\",\n  \"protocol\": \"H.323\",\n  \"ip\": \"127.0.0.1\",\n  \"encryption\": \"auto\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "abceHewahkrehwiK",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List H.323/SIP devices",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/h323/devices?page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"h323",
								"devices"
							],
							"query": [
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "page_number",
									"value": "1",
									"description": "**Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination."
								},
								{
									"key": "next_page_token",
									"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to list all H.323/SIP Devices on a Zoom account.<br><br>\n**Scopes:** `h323:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nList of H.323/SIP devices returned.<br>\n**Error Code:** `200`<br>\nNo permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/h323/devices?page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"h323",
										"devices"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"next_page_token\": \"w7587w4eiyfsudgf\",\n  \"page_count\": 1,\n  \"page_number\": 1,\n  \"page_size\": 30,\n  \"total_records\": 20,\n  \"devices\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Create a H.323/SIP device",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"api_test_20190508\",\n  \"protocol\": \"H.323\",\n  \"ip\": \"127.0.0.1\",\n  \"encryption\": \"auto\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/h323/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"h323",
								"devices"
							]
						},
						"description": "A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to add a H.323/SIP device to your Zoom account<br><br>\n**Scopes:** `h323:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` <br>"
					},
					"response": [
						{
							"name": "**Error Code:** `200`<br>\nNo permission.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"api_test_20190508\",\n  \"protocol\": \"H.323\",\n  \"ip\": \"127.0.0.1\",\n  \"encryption\": \"auto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/h323/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"h323",
										"devices"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `201`<br>\nH.323/SIP device created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"api_test_20190508\",\n  \"protocol\": \"H.323\",\n  \"ip\": \"127.0.0.1\",\n  \"encryption\": \"auto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/h323/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"h323",
										"devices"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"api_test_20190508\",\n  \"protocol\": \"H.323\",\n  \"ip\": \"127.0.0.1\",\n  \"encryption\": \"auto\",\n  \"id\": \"abceHewahkrehwiK\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `2020`<br>\nH.323 device's display name:{displayName} is already in use.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"api_test_20190508\",\n  \"protocol\": \"H.323\",\n  \"ip\": \"127.0.0.1\",\n  \"encryption\": \"auto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/h323/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"h323",
										"devices"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "im/groups",
			"item": [
				{
					"name": "{group Id}",
					"item": [
						{
							"name": "members",
							"item": [
								{
									"name": "List IM directory group members",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId/members?page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId",
												"members"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												},
												{
													"key": "page_number",
													"value": "1",
													"description": "**Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination."
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										},
										"description": "List the members of an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management).<br><br>\n**Scope:** `imgroup:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\nIM group member list returned.<br>\n**Error Code:** `200` <br> \nOnly available for paid account:{accountId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members?page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"next_page_token\": \"w7587w4eiyfsudgf\",\n  \"page_count\": 1,\n  \"page_number\": 1,\n  \"page_size\": 30,\n  \"total_records\": 20,\n  \"members\": [\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"first_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"last_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"first_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"last_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}"
										},
										{
											"name": "**Error Code:** `300` <br>\nMissing field: name.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members?page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nIM Group not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members?page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add IM directory group members",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"members\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId/members",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId",
												"members"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										},
										"description": "Add members to an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under an account.<br><br>\n**Scope:** `imgroup:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**Error Code:** `200` <br>\nOnly available for paid account:{accountId}.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"members\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `201` <br>\nMember added.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"members\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"added_at\": \"2022-03-25T03:08:12Z\",\n  \"ids\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n}"
										},
										{
											"name": "**Error Code:** `300` <br>\nMissing field: name.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"members\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nIM Group not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"members\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"v4iyWT1LTfy8QvPG4GTvdg\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete IM directory group member",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId/members/:memberId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId",
												"members",
												":memberId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												},
												{
													"key": "memberId",
													"value": "v4iyWT1LTfy8QvPG4GTvdg",
													"description": "(Required) The member ID."
												}
											]
										},
										"description": "Delete a member from an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under an account.<br><br>\nScopes: `imgroup:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**Error Code:** `200` <br>\nOnly available for paid account, {accountId}.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														},
														{
															"key": "memberId",
															"value": "v4iyWT1LTfy8QvPG4GTvdg",
															"description": "(Required) The member ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `204` <br>\nIM group member deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														},
														{
															"key": "memberId",
															"value": "v4iyWT1LTfy8QvPG4GTvdg",
															"description": "(Required) The member ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Error Code:** `300` <br>\nMissing field: name.<br>\nCan not delete account from default group:{groupId}.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														},
														{
															"key": "memberId",
															"value": "v4iyWT1LTfy8QvPG4GTvdg",
															"description": "(Required) The member ID."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nIM Group or IM Group member not found.<br>\n**Error Code:** `4130` <br>\nGroup does not exist:{groupId}.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "SobVexyrQjqCkcxjpBWi6w",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
														},
														{
															"key": "memberId",
															"value": "v4iyWT1LTfy8QvPG4GTvdg",
															"description": "(Required) The member ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Delete an IM directory group",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/im/groups/:groupId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"im",
										"groups",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "SobVexyrQjqCkcxjpBWi6w",
											"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
										}
									]
								},
								"description": "Delete an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>\nScopes: `imgroup:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` <br>\nIM group deleted.\n\n",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300` <br>\nMissing field: name.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nIM Group not found.\n**Error Code:** `4130` <br>\nGroup does not exist:{groupId}.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieve an IM directory group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/im/groups/:groupId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"im",
										"groups",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "SobVexyrQjqCkcxjpBWi6w",
											"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
										}
									]
								},
								"description": "Retrieve an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>\nScopes: `imgroup:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\nIM group object returned.<br>\n**Error Code:** `200` <br>\nOnly available for paid account:{accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"MIuNMURBTkuwfZ20jteRJg\",\n  \"name\": \"Developers\",\n  \"total_members\": 200,\n  \"search_by_account\": true,\n  \"search_by_domain\": true,\n  \"search_by_ma_account\": true,\n  \"type\": \"normal\"\n}"
								},
								{
									"name": "**Error Code:** `300` <br>\nMissing field: name.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** <br>\nIM Group not found.<br>\n**Error Code:** `4130` <br>\nGroup does not exist:{groupId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update an IM directory group",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Developers\",\n  \"search_by_account\": true,\n  \"search_by_domain\": true,\n  \"search_by_ma_account\": true,\n  \"type\": \"normal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/im/groups/:groupId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"im",
										"groups",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "SobVexyrQjqCkcxjpBWi6w",
											"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
										}
									]
								},
								"description": "Update an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>\n**Scopes**: `imgroup:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` <br>\nIM group updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Developers\",\n  \"search_by_account\": true,\n  \"search_by_domain\": true,\n  \"search_by_ma_account\": true,\n  \"type\": \"normal\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300` <br>\nMissing field: name",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Developers\",\n  \"search_by_account\": true,\n  \"search_by_domain\": true,\n  \"search_by_ma_account\": true,\n  \"type\": \"normal\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nIM Group not found.\n**Error Code:** `4130`<br>\nGroup does not exist:{groupId}.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Developers\",\n  \"search_by_account\": true,\n  \"search_by_domain\": true,\n  \"search_by_ma_account\": true,\n  \"type\": \"normal\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "SobVexyrQjqCkcxjpBWi6w",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List IM directory groups",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/im/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"im",
								"groups"
							]
						},
						"description": "List [IM directory groups](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management).<br><br>\n**Scopes**: `imgroup:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200` <br>\nList of groups returned.\n**Error Code:** `200` <br>\nList of IM groups returned.<br>\nOnly available for paid account:{accountId}.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/im/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"im",
										"groups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"total_records\": 200,\n  \"groups\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `404` <br>\n**Error Code:** `4130` <br>\nGroup does not exist:{groupId}.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/im/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"im",
										"groups"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create an IM directory group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Developers\",\n  \"search_by_account\": true,\n  \"search_by_domain\": true,\n  \"search_by_ma_account\": true,\n  \"type\": \"normal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/im/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"im",
								"groups"
							]
						},
						"description": "Create an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>\n**Scopes**: `imgroup:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
					},
					"response": [
						{
							"name": "**Error Code:** `200` <br>\nOnly available for paid account:{accountId}.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Developers\",\n  \"search_by_account\": true,\n  \"search_by_domain\": true,\n  \"search_by_ma_account\": true,\n  \"type\": \"normal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/im/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"im",
										"groups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `201`<br>\nIM Group created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Developers\",\n  \"search_by_account\": true,\n  \"search_by_domain\": true,\n  \"search_by_ma_account\": true,\n  \"type\": \"normal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/im/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"im",
										"groups"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"MIuNMURBTkuwfZ20jteRJg\",\n  \"name\": \"Developers\",\n  \"search_by_account\": true,\n  \"search_by_domain\": true,\n  \"search_by_ma_account\": true,\n  \"total_members\": 200\n}"
						},
						{
							"name": "**HTTP Status Code:** `404` <br>\n**Error Code:** `4130` <br>\nGroup does not exist:{groupId}.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Developers\",\n  \"search_by_account\": true,\n  \"search_by_domain\": true,\n  \"search_by_ma_account\": true,\n  \"type\": \"normal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/im/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"im",
										"groups"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `409` <br>\n**Error Code:** `4132` <br>\nGroup name {groupName} is already in use.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Developers\",\n  \"search_by_account\": true,\n  \"search_by_domain\": true,\n  \"search_by_ma_account\": true,\n  \"type\": \"normal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/im/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"im",
										"groups"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "{user Id}",
					"item": [
						{
							"name": "meetings",
							"item": [
								{
									"name": "List meetings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/meetings?type=scheduled&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&page_number=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"meetings"
											],
											"query": [
												{
													"key": "type",
													"value": "scheduled",
													"description": "The type of meeting: \n* `scheduled` — All valid previous (unexpired) meetings, live meetings, and upcoming scheduled meetings. \n* `live` — All the ongoing meetings. \n* `upcoming` — All upcoming meetings, including live meetings. \n* `upcoming_meetings` — All upcoming meetings, including live meetings. \n* `previous_meetings` — All the previous meetings."
												},
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												},
												{
													"key": "page_number",
													"value": "1",
													"description": "The page number of the current page in the returned records."
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Use this API to list a user's (meeting host) scheduled meetings. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n**Note:** \n* This API **only** supports scheduled meetings. This API does not return information about instant meetings. \n* This API only returns a user's [unexpired meetings](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844). \n\n **Scopes:** `meeting:read:admin`, `meeting:read` </br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nList of meeting objects returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/meetings?type=scheduled&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&page_number=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"meetings"
													],
													"query": [
														{
															"key": "type",
															"value": "scheduled"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														},
														{
															"key": "page_number",
															"value": "1"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_number\": 1,\n  \"page_size\": 30,\n  \"total_records\": 1,\n  \"meetings\": [\n    {\n      \"agenda\": \"My Meeting\",\n      \"created_at\": \"2022-03-23T05:31:16Z\",\n      \"duration\": 60,\n      \"host_id\": \"30R7kT7bTIKSNUFEuH_Qlg\",\n      \"id\": 97763643886,\n      \"join_url\": \"https://example.com/j/11111\",\n      \"pmi\": \"97891943927\",\n      \"start_time\": \"2022-03-23T06:00:00Z\",\n      \"timezone\": \"America/Los_Angeles\",\n      \"topic\": \"My Meeting\",\n      \"type\": 2,\n      \"uuid\": \"aDYlohsHRtCd4ii1uC2+hA==\"\n    },\n    {\n      \"agenda\": \"My Meeting\",\n      \"created_at\": \"2022-03-23T05:31:16Z\",\n      \"duration\": 60,\n      \"host_id\": \"30R7kT7bTIKSNUFEuH_Qlg\",\n      \"id\": 97763643886,\n      \"join_url\": \"https://example.com/j/11111\",\n      \"pmi\": \"97891943927\",\n      \"start_time\": \"2022-03-23T06:00:00Z\",\n      \"timezone\": \"America/Los_Angeles\",\n      \"topic\": \"My Meeting\",\n      \"type\": 2,\n      \"uuid\": \"aDYlohsHRtCd4ii1uC2+hA==\"\n    }\n  ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `3161` <br>\nMeeting hosting and scheduling capabilities are not allowed for your user account.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/meetings?type=scheduled&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&page_number=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"meetings"
													],
													"query": [
														{
															"key": "type",
															"value": "scheduled"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														},
														{
															"key": "page_number",
															"value": "1"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nUser ID not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} not exist or not belong to this account.<br>",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/meetings?type=scheduled&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&page_number=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"meetings"
													],
													"query": [
														{
															"key": "type",
															"value": "scheduled"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														},
														{
															"key": "page_number",
															"value": "1"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create a meeting",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"agenda\": \"My Meeting\",\n  \"default_password\": false,\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"pre_schedule\": false,\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"schedule_for\": \"jchill@example.com\",\n  \"settings\": {\n    \"additional_data_center_regions\": [\n      \"TY\",\n      \"TY\"\n    ],\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com;thill@example.com\",\n    \"alternative_hosts_email_notification\": true,\n    \"approval_type\": 2,\n    \"approved_or_denied_countries_or_regions\": {\n      \"approved_list\": [\n        \"CX\",\n        \"CX\"\n      ],\n      \"denied_list\": [\n        \"CA\",\n        \"CA\"\n      ],\n      \"enable\": true,\n      \"method\": \"approve\"\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_exception\": [\n      {\n        \"email\": \"jchill@example.com\",\n        \"name\": \"Jill Chill\"\n      },\n      {\n        \"email\": \"jchill@example.com\",\n        \"name\": \"Jill Chill\"\n      }\n    ],\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"breakout_room\": {\n      \"enable\": true,\n      \"rooms\": [\n        {\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"participants\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"participants\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ]\n    },\n    \"calendar_type\": 1,\n    \"close_registration\": false,\n    \"cn_meeting\": false,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"email_notification\": true,\n    \"encryption_type\": \"enhanced_encryption\",\n    \"focus_mode\": true,\n    \"global_dial_in_countries\": [\n      \"US\",\n      \"US\"\n    ],\n    \"host_video\": true,\n    \"in_meeting\": false,\n    \"jbh_time\": 0,\n    \"join_before_host\": false,\n    \"language_interpretation\": {\n      \"enable\": true,\n      \"interpreters\": [\n        {\n          \"email\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"languages\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"email\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"languages\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ]\n    },\n    \"meeting_authentication\": true,\n    \"meeting_invitees\": [\n      {\n        \"email\": \"jchill@example.com\"\n      },\n      {\n        \"email\": \"jchill@example.com\"\n      }\n    ],\n    \"mute_upon_entry\": false,\n    \"participant_video\": false,\n    \"private_meeting\": false,\n    \"registrants_confirmation_email\": true,\n    \"registrants_email_notification\": true,\n    \"registration_type\": 1,\n    \"show_share_button\": true,\n    \"use_pmi\": false,\n    \"waiting_room\": false,\n    \"watermark\": false\n  },\n  \"start_time\": \"2022-03-25T07:32:55Z\",\n  \"template_id\": \"Dv4YdINdTk+Z5RToadh5ug==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Meeting\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"type\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/meetings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"meetings"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Use this API to [create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n* A meeting's `start_url` value is the URL a host or an alternative host can use to start a meeting. The expiration time for the `start_url` value is **two hours** for all regular users.\n* For `custCreate` meeting hosts (users created with the `custCreate` parameter via the [**Create users**](/api-reference/zoom-api/methods#operation/userCreate) API), the expiration time of the `start_url` parameter is **90 days** from the generation of the `start_url`.\n\n**Note:** \n\nFor security reasons, the recommended way to programmatically (after expiry) get the updated `start_url` value is to call the [**Get a meeting**](/api-reference/zoom-api/methods#operation/meeting) API. Refer to the `start_url` value in the response. \n\n **Scopes:** `meeting:write:admin`, `meeting:write`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` <br>\n* This API has a daily rate limit of **100 requests per day**. The rate limit is applied against the `userId` of the **meeting host** used to make the request."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201`<br>\nMeeting created.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"agenda\": \"My Meeting\",\n  \"default_password\": false,\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"pre_schedule\": false,\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"schedule_for\": \"jchill@example.com\",\n  \"settings\": {\n    \"additional_data_center_regions\": [\n      \"TY\",\n      \"TY\"\n    ],\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com;thill@example.com\",\n    \"alternative_hosts_email_notification\": true,\n    \"approval_type\": 2,\n    \"approved_or_denied_countries_or_regions\": {\n      \"approved_list\": [\n        \"CX\",\n        \"CX\"\n      ],\n      \"denied_list\": [\n        \"CA\",\n        \"CA\"\n      ],\n      \"enable\": true,\n      \"method\": \"approve\"\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_exception\": [\n      {\n        \"email\": \"jchill@example.com\",\n        \"name\": \"Jill Chill\"\n      },\n      {\n        \"email\": \"jchill@example.com\",\n        \"name\": \"Jill Chill\"\n      }\n    ],\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"breakout_room\": {\n      \"enable\": true,\n      \"rooms\": [\n        {\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"participants\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"participants\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ]\n    },\n    \"calendar_type\": 1,\n    \"close_registration\": false,\n    \"cn_meeting\": false,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"email_notification\": true,\n    \"encryption_type\": \"enhanced_encryption\",\n    \"focus_mode\": true,\n    \"global_dial_in_countries\": [\n      \"US\",\n      \"US\"\n    ],\n    \"host_video\": true,\n    \"in_meeting\": false,\n    \"jbh_time\": 0,\n    \"join_before_host\": false,\n    \"language_interpretation\": {\n      \"enable\": true,\n      \"interpreters\": [\n        {\n          \"email\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"languages\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"email\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"languages\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ]\n    },\n    \"meeting_authentication\": true,\n    \"meeting_invitees\": [\n      {\n        \"email\": \"jchill@example.com\"\n      },\n      {\n        \"email\": \"jchill@example.com\"\n      }\n    ],\n    \"mute_upon_entry\": false,\n    \"participant_video\": false,\n    \"private_meeting\": false,\n    \"registrants_confirmation_email\": true,\n    \"registrants_email_notification\": true,\n    \"registration_type\": 1,\n    \"show_share_button\": true,\n    \"use_pmi\": false,\n    \"waiting_room\": false,\n    \"watermark\": false\n  },\n  \"start_time\": \"2022-03-25T07:32:55Z\",\n  \"template_id\": \"Dv4YdINdTk+Z5RToadh5ug==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Meeting\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"type\": 2\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/meetings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"meetings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"assistant_id\": \"kFFvsJc-Q1OSxaJQLvaa_A\",\n  \"host_email\": \"jchill@example.com\",\n  \"id\": 92674392836,\n  \"registration_url\": \"https://example.com/meeting/register/7ksAkRCoEpt1Jm0wa-E6lICLur9e7Lde5oW6\",\n  \"agenda\": \"My Meeting\",\n  \"created_at\": \"2022-03-25T07:29:29Z\",\n  \"duration\": 60,\n  \"h323_password\": \"123456\",\n  \"join_url\": \"https://example.com/j/11111\",\n  \"occurrences\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"password\": \"123456\",\n  \"pmi\": 97891943927,\n  \"pre_schedule\": false,\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"settings\": {\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com;thill@example.com\",\n    \"alternative_hosts_email_notification\": true,\n    \"alternative_host_update_polls\": true,\n    \"approval_type\": 0,\n    \"approved_or_denied_countries_or_regions\": {\n      \"approved_list\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"denied_list\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"method\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_exception\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"authentication_name\": \"Sign in to Zoom\",\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"breakout_room\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rooms\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"calendar_type\": 1,\n    \"close_registration\": false,\n    \"cn_meeting\": false,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"custom_keys\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"email_notification\": true,\n    \"encryption_type\": \"enhanced_encryption\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"focus_mode\": true,\n    \"global_dial_in_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"global_dial_in_numbers\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"host_video\": true,\n    \"in_meeting\": false,\n    \"jbh_time\": 0,\n    \"join_before_host\": true,\n    \"language_interpretation\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"interpreters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"meeting_authentication\": true,\n    \"mute_upon_entry\": false,\n    \"participant_video\": false,\n    \"private_meeting\": false,\n    \"registrants_confirmation_email\": true,\n    \"registrants_email_notification\": true,\n    \"registration_type\": 1,\n    \"show_share_button\": true,\n    \"use_pmi\": false,\n    \"waiting_room\": false,\n    \"watermark\": false\n  },\n  \"start_time\": \"2022-03-25T07:29:29Z\",\n  \"start_url\": \"https://example.com/s/11111\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Meeting\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\",\n      \"visible\": true\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\",\n      \"visible\": true\n    }\n  ],\n  \"type\": 2\n}"
										},
										{
											"name": "**HTTP Status Code:** `300`<br>\nInvalid enforce_login_domains, separate multiple domains by semicolon.<br>\nA maximum of {rateLimitNumber} meetings can be created/updated for a single user in one day.\n",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"agenda\": \"My Meeting\",\n  \"default_password\": false,\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"pre_schedule\": false,\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"schedule_for\": \"jchill@example.com\",\n  \"settings\": {\n    \"additional_data_center_regions\": [\n      \"TY\",\n      \"TY\"\n    ],\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com;thill@example.com\",\n    \"alternative_hosts_email_notification\": true,\n    \"approval_type\": 2,\n    \"approved_or_denied_countries_or_regions\": {\n      \"approved_list\": [\n        \"CX\",\n        \"CX\"\n      ],\n      \"denied_list\": [\n        \"CA\",\n        \"CA\"\n      ],\n      \"enable\": true,\n      \"method\": \"approve\"\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_exception\": [\n      {\n        \"email\": \"jchill@example.com\",\n        \"name\": \"Jill Chill\"\n      },\n      {\n        \"email\": \"jchill@example.com\",\n        \"name\": \"Jill Chill\"\n      }\n    ],\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"breakout_room\": {\n      \"enable\": true,\n      \"rooms\": [\n        {\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"participants\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"participants\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ]\n    },\n    \"calendar_type\": 1,\n    \"close_registration\": false,\n    \"cn_meeting\": false,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"email_notification\": true,\n    \"encryption_type\": \"enhanced_encryption\",\n    \"focus_mode\": true,\n    \"global_dial_in_countries\": [\n      \"US\",\n      \"US\"\n    ],\n    \"host_video\": true,\n    \"in_meeting\": false,\n    \"jbh_time\": 0,\n    \"join_before_host\": false,\n    \"language_interpretation\": {\n      \"enable\": true,\n      \"interpreters\": [\n        {\n          \"email\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"languages\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"email\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"languages\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ]\n    },\n    \"meeting_authentication\": true,\n    \"meeting_invitees\": [\n      {\n        \"email\": \"jchill@example.com\"\n      },\n      {\n        \"email\": \"jchill@example.com\"\n      }\n    ],\n    \"mute_upon_entry\": false,\n    \"participant_video\": false,\n    \"private_meeting\": false,\n    \"registrants_confirmation_email\": true,\n    \"registrants_email_notification\": true,\n    \"registration_type\": 1,\n    \"show_share_button\": true,\n    \"use_pmi\": false,\n    \"waiting_room\": false,\n    \"watermark\": false\n  },\n  \"start_time\": \"2022-03-25T07:32:55Z\",\n  \"template_id\": \"Dv4YdINdTk+Z5RToadh5ug==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Meeting\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"type\": 2\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/meetings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"meetings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `3000`<br> \n* Instant meetings do not support the schedule_for parameter; you cannot schedule an instant meeting for another user.<br>\n* Users in '{0}' have been blocked from joining meetings",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"agenda\": \"My Meeting\",\n  \"default_password\": false,\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"pre_schedule\": false,\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"schedule_for\": \"jchill@example.com\",\n  \"settings\": {\n    \"additional_data_center_regions\": [\n      \"TY\",\n      \"TY\"\n    ],\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com;thill@example.com\",\n    \"alternative_hosts_email_notification\": true,\n    \"approval_type\": 2,\n    \"approved_or_denied_countries_or_regions\": {\n      \"approved_list\": [\n        \"CX\",\n        \"CX\"\n      ],\n      \"denied_list\": [\n        \"CA\",\n        \"CA\"\n      ],\n      \"enable\": true,\n      \"method\": \"approve\"\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_exception\": [\n      {\n        \"email\": \"jchill@example.com\",\n        \"name\": \"Jill Chill\"\n      },\n      {\n        \"email\": \"jchill@example.com\",\n        \"name\": \"Jill Chill\"\n      }\n    ],\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"breakout_room\": {\n      \"enable\": true,\n      \"rooms\": [\n        {\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"participants\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"participants\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ]\n    },\n    \"calendar_type\": 1,\n    \"close_registration\": false,\n    \"cn_meeting\": false,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"email_notification\": true,\n    \"encryption_type\": \"enhanced_encryption\",\n    \"focus_mode\": true,\n    \"global_dial_in_countries\": [\n      \"US\",\n      \"US\"\n    ],\n    \"host_video\": true,\n    \"in_meeting\": false,\n    \"jbh_time\": 0,\n    \"join_before_host\": false,\n    \"language_interpretation\": {\n      \"enable\": true,\n      \"interpreters\": [\n        {\n          \"email\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"languages\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"email\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"languages\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ]\n    },\n    \"meeting_authentication\": true,\n    \"meeting_invitees\": [\n      {\n        \"email\": \"jchill@example.com\"\n      },\n      {\n        \"email\": \"jchill@example.com\"\n      }\n    ],\n    \"mute_upon_entry\": false,\n    \"participant_video\": false,\n    \"private_meeting\": false,\n    \"registrants_confirmation_email\": true,\n    \"registrants_email_notification\": true,\n    \"registration_type\": 1,\n    \"show_share_button\": true,\n    \"use_pmi\": false,\n    \"waiting_room\": false,\n    \"watermark\": false\n  },\n  \"start_time\": \"2022-03-25T07:32:55Z\",\n  \"template_id\": \"Dv4YdINdTk+Z5RToadh5ug==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Meeting\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"type\": 2\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/meetings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"meetings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\nUser not found.<br>\n\n**Error Code:** `1001`<br> User {userId} not exist or not belong to this account.\n",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"agenda\": \"My Meeting\",\n  \"default_password\": false,\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"pre_schedule\": false,\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"schedule_for\": \"jchill@example.com\",\n  \"settings\": {\n    \"additional_data_center_regions\": [\n      \"TY\",\n      \"TY\"\n    ],\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com;thill@example.com\",\n    \"alternative_hosts_email_notification\": true,\n    \"approval_type\": 2,\n    \"approved_or_denied_countries_or_regions\": {\n      \"approved_list\": [\n        \"CX\",\n        \"CX\"\n      ],\n      \"denied_list\": [\n        \"CA\",\n        \"CA\"\n      ],\n      \"enable\": true,\n      \"method\": \"approve\"\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_exception\": [\n      {\n        \"email\": \"jchill@example.com\",\n        \"name\": \"Jill Chill\"\n      },\n      {\n        \"email\": \"jchill@example.com\",\n        \"name\": \"Jill Chill\"\n      }\n    ],\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"breakout_room\": {\n      \"enable\": true,\n      \"rooms\": [\n        {\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"participants\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"participants\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ]\n    },\n    \"calendar_type\": 1,\n    \"close_registration\": false,\n    \"cn_meeting\": false,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"email_notification\": true,\n    \"encryption_type\": \"enhanced_encryption\",\n    \"focus_mode\": true,\n    \"global_dial_in_countries\": [\n      \"US\",\n      \"US\"\n    ],\n    \"host_video\": true,\n    \"in_meeting\": false,\n    \"jbh_time\": 0,\n    \"join_before_host\": false,\n    \"language_interpretation\": {\n      \"enable\": true,\n      \"interpreters\": [\n        {\n          \"email\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"languages\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"email\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"languages\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ]\n    },\n    \"meeting_authentication\": true,\n    \"meeting_invitees\": [\n      {\n        \"email\": \"jchill@example.com\"\n      },\n      {\n        \"email\": \"jchill@example.com\"\n      }\n    ],\n    \"mute_upon_entry\": false,\n    \"participant_video\": false,\n    \"private_meeting\": false,\n    \"registrants_confirmation_email\": true,\n    \"registrants_email_notification\": true,\n    \"registration_type\": 1,\n    \"show_share_button\": true,\n    \"use_pmi\": false,\n    \"waiting_room\": false,\n    \"watermark\": false\n  },\n  \"start_time\": \"2022-03-25T07:32:55Z\",\n  \"template_id\": \"Dv4YdINdTk+Z5RToadh5ug==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Meeting\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"type\": 2\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/meetings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"meetings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "assistants",
							"item": [
								{
									"name": "Delete user assistants",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/assistants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"assistants"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Delete all assistants of the current user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nAssistants are the users to whom the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meeting on behalf of the current user as well as manage and act as an alternative host for all meetings if the admin has enabled [Co-host option](https://zoom.us/account/setting) on the account.\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* The user as well as the assistant must have Licensed or an On-prem license.\n* Assistants must be under the current user's account."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **No Content**<br>\nAssistants deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "List user assistants",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/assistants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"assistants"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "List a user's assistants. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nAssistants are the users to whom the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meeting on behalf of the current user as well as manage and act as an alternative host for all meetings if the admin has enabled [Co-host option](https://zoom.us/account/setting) on the account.\n\n**Scopes:** `user:read:admin`, `user:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* Current user as well as the assistant must have Licensed or an On-prem license.\n* Assistants must be under the current user's account."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nSuccess.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"assistants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n    }\n  ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add assistants",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"assistants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/assistants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"assistants"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Use this API to assign assistants to a user. In the request body, provide either the user's ID or the user's email address. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n Assistants are users to whom the current user has assigned the [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meetings on behalf of the current user. Assistants can also manage and act as an alternative host for the user's meetings if the administrator has enabled the [co-host feature](https://support.zoom.us/hc/en-us/articles/206330935-Enabling-and-adding-a-co-host) on the account.\n\n**Scopes:** `user:write:admin`, `user:write` </br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n**Prerequisites:** \n* The user and the assistant must have a Licensed or an On-prem license. \n* Assistants must be under the current user's account or in the same organization with the current user's account."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201`<br>\nAssistant added.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"assistants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"add_at\": \"2018-10-31T04:32:37Z\",\n  \"ids\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nCurrent account must be paid account: $userId <br>\nThe user must either be a Licensed user or an On-prem user : $userId. <br>\nCan't assign scheduling privilege to yourself.<br>\n",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"assistants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"assistants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a user assistant",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/assistants/:assistantId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"assistants",
												":assistantId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												},
												{
													"key": "assistantId",
													"value": "KDcuGIm1QgePTO8WbOqwIQ",
													"description": "(Required) Assistant ID."
												}
											]
										},
										"description": "Delete a specific assistant of a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nAssistants are the users to whom the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meeting on behalf of the current user as well as manage and act as an alternative host for all meetings if the admin has enabled [Co-host option](https://zoom.us/account/setting) on the account.\n\n**Scopes:** `user:write:admin`, `user:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* The user as well as the assistant must have Licensed or an On-prem license.\n* Assistants must be under the current user's account."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **OK**<br>\nAssistant deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants/:assistantId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants",
														":assistantId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														},
														{
															"key": "assistantId",
															"value": "KDcuGIm1QgePTO8WbOqwIQ",
															"description": "(Required) Assistant ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants/:assistantId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants",
														":assistantId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														},
														{
															"key": "assistantId",
															"value": "KDcuGIm1QgePTO8WbOqwIQ",
															"description": "(Required) Assistant ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "picture",
							"item": [
								{
									"name": "Delete a user's profile picture",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/picture",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"picture"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Use this API to delete a user's profile picture. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n**Scopes:** `user:write:admin`, `user:write` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nNo Content<br>\nUser picture deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/picture",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"picture"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\nBad request<br><br>\n**Error Code:** `200`<br>\nOnly an account administrator can change a profile picture.<br>",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/picture",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"picture"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nNot Found<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/picture",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"picture"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Upload a user's profile picture",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "pic_file",
													"value": "profile.png",
													"description": "(Required) The file's path.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/picture",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"picture"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Upload a user's profile picture. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nProvide `multipart/form-data` as the value of the `content-type` header for this request. This API supports `.jpeg` and `.png` file formats.\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201`<br>Picture uploaded.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "pic_file",
															"value": "profile.png",
															"description": "(Required) The file's path.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/picture",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"picture"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `300`<br>\nYour request was not accepted because the profile picture contains invalid or explicit content.<br>\n**Error Code:** `200`<br>\nOnly an account administrator can change a profile pict",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "pic_file",
															"value": "profile.png",
															"description": "(Required) The file's path.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/picture",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"picture"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "pic_file",
															"value": "profile.png",
															"description": "(Required) The file's path.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/picture",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"picture"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "schedulers",
							"item": [
								{
									"name": "Delete user schedulers",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/schedulers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"schedulers"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Delete all of a user's schedulers. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nSchedulers are users on whose behalf the current user (assistant) can schedule meetings for. By calling this API, the current user will no longer be a scheduling assistant of any user. \n\n**Scopes:** `user:write:admin`, `user:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* Current user (assistant) must be under the same account as the scheduler."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br> All schedulers deleted.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/schedulers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"schedulers"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"\""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/schedulers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"schedulers"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "List user schedulers",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/schedulers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"schedulers"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "List all the schedulers of a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nSchedulers in this context are the users for whom the current user can schedule meetings for. For example, if the current user (the user whose `userId` was passed in the `path` parameter) is \"user A\", the response of this API will contain a list of user(s), for whom user A can schedule and manage meetings. User A is the assistant of these users and thus has scheduling privilege for these user(s).\n\n**Scopes:** `user:read:admin`, `user:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* Current user must be under the same account as the scheduler."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>Successfully listed all schedulers of the user.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/schedulers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"schedulers"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"schedulers\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\",\n      \"pmi\": 3542471135\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\",\n      \"pmi\": 3542471135\n    }\n  ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/schedulers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"schedulers"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a scheduler",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/schedulers/:schedulerId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"schedulers",
												":schedulerId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												},
												{
													"key": "schedulerId",
													"value": "KDcuGIm1QgePTO8WbOqwIQ",
													"description": "(Required) Scheduler's ID."
												}
											]
										},
										"description": "Delete a scheduler. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nSchedulers are users on whose behalf the current user (assistant) can schedule meetings for. By calling this API, the current user will no longer be a scheduling assistant of this scheduler.\n\n**Scopes:** `user:write:admin`, `user:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* Current user must be under the same account as the scheduler."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nScheduler deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/schedulers/:schedulerId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"schedulers",
														":schedulerId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														},
														{
															"key": "schedulerId",
															"value": "KDcuGIm1QgePTO8WbOqwIQ",
															"description": "(Required) Scheduler's ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/schedulers/:schedulerId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"schedulers",
														":schedulerId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														},
														{
															"key": "schedulerId",
															"value": "KDcuGIm1QgePTO8WbOqwIQ",
															"description": "(Required) Scheduler's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "settings",
							"item": [
								{
									"name": "virtual backgrounds",
									"item": [
										{
											"name": "Delete Virtual Background files",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds?file_ids=_l0MP1U7Qn2JgJ4oEJbVZQ",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings",
														"virtual_backgrounds"
													],
													"query": [
														{
															"key": "file_ids",
															"value": "_l0MP1U7Qn2JgJ4oEJbVZQ",
															"description": "A comma-separated list of the Virtual Background file IDs to delete."
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "KDcuGIm1QgePTO8WbOqwIQ",
															"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value."
														}
													]
												},
												"description": "Use this API to delete a user's Virtual Background files. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n **Scopes:** `user:write`, `user:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* The [Virtual Background feature](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) must be enabled on the account."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` <br>\n* No content. \n* Deleted.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds?file_ids=_l0MP1U7Qn2JgJ4oEJbVZQ",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "_l0MP1U7Qn2JgJ4oEJbVZQ"
																}
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "KDcuGIm1QgePTO8WbOqwIQ",
																	"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `300` <br>\n Invalid parameter: file_ids",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds?file_ids=_l0MP1U7Qn2JgJ4oEJbVZQ",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "_l0MP1U7Qn2JgJ4oEJbVZQ"
																}
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "KDcuGIm1QgePTO8WbOqwIQ",
																	"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1001` <br>\n* User does not exist. \n* User \"{userId}\" does not exist or does not belong to this account.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds?file_ids=_l0MP1U7Qn2JgJ4oEJbVZQ",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "_l0MP1U7Qn2JgJ4oEJbVZQ"
																}
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "KDcuGIm1QgePTO8WbOqwIQ",
																	"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Upload Virtual Background files",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "profile.png",
															"description": "The Virtual Background's file path.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings",
														"virtual_backgrounds"
													],
													"variable": [
														{
															"key": "userId",
															"value": "KDcuGIm1QgePTO8WbOqwIQ",
															"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value."
														}
													]
												},
												"description": "Use this API to [upload a Virtual Background files](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background) to a user's profile. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n **Note:** \n* A user profile cannot exceed more than 10 Virtual Background files. \n* You can only upload image files that are in JPG/JPEG, GIF or PNG format. \n* Video files must be in MP4 or MOV file format with a minimum resolution of 480 by 360 pixels (360p) and a maximum resolution of 1920 by 1080 pixels (1080p). \n* The Virtual Background file size cannot exceed 15 megabytes (MB). \n\n **Scopes:** `user:write`, `user:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n**Prerequisites:** \n* The [Virtual Background feature](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) must be enabled on the account."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `201` **Created**",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"value": "profile.png",
																	"description": "The Virtual Background's file path.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"settings",
																"virtual_backgrounds"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "KDcuGIm1QgePTO8WbOqwIQ",
																	"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"_l0MP1U7Qn2JgJ4oEJbVZQ\",\n  \"is_default\": true,\n  \"name\": \"profile.png\",\n  \"size\": \"8510\",\n  \"type\": \"image\"\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request** \n\n**Error Code:** `120`<br>\nNo file uploaded, verify that a file has been uploaded.<br>\nFile size cannot exceed 15M.<br>\nA maximum of 10 files are allowed for a user.<br>\nOnly jpg/jpeg, gif or png image file can",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"value": "profile.png",
																	"description": "The Virtual Background's file path.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"settings",
																"virtual_backgrounds"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "KDcuGIm1QgePTO8WbOqwIQ",
																	"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found** <br>\nGroup not found.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"value": "profile.png",
																	"description": "The Virtual Background's file path.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"settings",
																"virtual_backgrounds"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "KDcuGIm1QgePTO8WbOqwIQ",
																	"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get user settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/settings?login_type=101&option=meeting_security&custom_query_fields=host_video",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"settings"
											],
											"query": [
												{
													"key": "login_type",
													"value": "101",
													"description": "The user's login method: \n* `0` — Facebook OAuth \n* `1` — Google OAuth \n* `24` — Apple OAuth \n* `27` — Microsoft OAuth \n* `97` — Mobile device \n* `98` — RingCentral OAuth \n* `99` — API user \n* `100` — Zoom Work email \n* `101` — Single Sign-On (SSO) \n\nThe following login methods are only available in China: \n* `11` — Phone number \n* `21` — WeChat \n* `23` — Alipay"
												},
												{
													"key": "option",
													"value": "meeting_security",
													"description": "Optional query parameters: \n* `meeting_authentication` — Use this query parameter to view the [meeting authentication settings](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied to the user's account. \n* `recording_authentication` — Use this query parameter to view the [recording authentication settings](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied to the user's account. \n* `meeting_security` — Use this query parameter to view the meeting security settings applied to the user's account."
												},
												{
													"key": "custom_query_fields",
													"value": "host_video",
													"description": "Provide the name of the field by which you would like to filter the response. For example, if you provide \"host_video\" as the value of this field, you will get a response similar to the following:<br>\n{\n    \"schedule_meeting\": {\n        \"host_video\": false\n    }\n}\n<br>You can provide multiple values by separating them with commas(example: \"host_video,participant_video”)."
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Retrieve a user's settings. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n**Scopes:** `user:read:admin`, `user:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nUser settings returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings?login_type=101&option=meeting_security&custom_query_fields=host_video",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings"
													],
													"query": [
														{
															"key": "login_type",
															"value": "101"
														},
														{
															"key": "option",
															"value": "meeting_security"
														},
														{
															"key": "custom_query_fields",
															"value": "host_video"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"audio_conferencing\": {\n    \"toll_free_and_fee_based_toll_call\": {\n      \"allow_webinar_attendees_dial\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"numbers\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"feature\": {\n    \"cn_meeting\": true,\n    \"concurrent_meeting\": \"Basic\",\n    \"in_meeting\": true,\n    \"large_meeting\": true,\n    \"large_meeting_capacity\": 500,\n    \"meeting_capacity\": 500,\n    \"webinar\": true,\n    \"webinar_capacity\": 500,\n    \"zoom_events\": true,\n    \"zoom_events_capacity\": 500,\n    \"zoom_phone\": true,\n    \"zoom_iq_for_sales\": false\n  },\n  \"in_meeting\": {\n    \"allow_host_to_enable_focus_mode\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 1,\n    \"allow_users_save_chats\": 1,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"attention_mode_focus_mode\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"save_caption\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"third_party_captioning_service\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"view_full_transcript\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The custom live streaming service instructions\",\n    \"data_center_regions\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"all\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"languages\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"auto_generated_captions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"full_transcript\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"manual_captions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"save_captions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"third_party_captioning_service\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"meeting_reactions\": true,\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"polling\": true,\n    \"private_chat\": true,\n    \"record_play_voice\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"screen_sharing\": true,\n    \"share_dual_camera\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"unchecked_data_center_regions\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"virtual_background\": true,\n    \"virtual_background_settings\": {\n      \"allow_upload_custom\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"allow_videos\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"files\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"waiting_room\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"allow_auto_save_local_chat_file\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"allow_panelists_chat_with\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"allow_panelists_send_direct_message\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"allow_users_save_chats\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"default_attendees_chat_with\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"live_streaming_reminder\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"live_streaming_service\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"webinar_polling\": {\n      \"advanced_polls\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"webinar_survey\": true,\n    \"who_can_share_screen\": \"all\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"host\",\n    \"workplace_by_facebook\": true\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"recording\": {\n    \"ask_host_to_confirm_disclaimer\": true,\n    \"ask_participants_to_consent_disclaimer\": true,\n    \"auto_delete_cmr\": true,\n    \"auto_delete_cmr_days\": 90,\n    \"record_files_separately\": {\n      \"active_speaker\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gallery_view\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"shared_screen\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"auto_recording\": \"cloud\",\n    \"cloud_recording\": true,\n    \"host_pause_stop_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_addresses_or_ranges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"local_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"recording_disclaimer\": true,\n    \"recording_password_requirement\": {\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"telephony\",\n    \"default_password_for_scheduled_meetings\": \"1213434\",\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"meeting_password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_upper_and_lower_characters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"participants_video\": true,\n    \"personal_meeting\": true,\n    \"pmi_password\": \"113332424\",\n    \"pstn_password_protected\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"use_pmi_for_instant_meetings\": true,\n    \"use_pmi_for_scheduled_meetings\": true\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"show_international_numbers_link\": true,\n    \"telephony_regions\": {\n      \"allowed_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"third_party_audio\": true\n  },\n  \"tsp\": {\n    \"call_out\": true,\n    \"call_out_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"show_international_numbers_link\": true\n  }\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `1120`<br>\nA valid invitation to join the Zoom account was not found for this user. <br>\nThis error is thrown if you added a user in your account but the user did not accept the invitation o",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings?login_type=101&option=meeting_security&custom_query_fields=host_video",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings"
													],
													"query": [
														{
															"key": "login_type",
															"value": "101"
														},
														{
															"key": "option",
															"value": "meeting_security"
														},
														{
															"key": "custom_query_fields",
															"value": "host_video"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings?login_type=101&option=meeting_security&custom_query_fields=host_video",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings"
													],
													"query": [
														{
															"key": "login_type",
															"value": "101"
														},
														{
															"key": "option",
															"value": "meeting_security"
														},
														{
															"key": "custom_query_fields",
															"value": "host_video"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update user settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"feature\": {\n    \"concurrent_meeting\": \"Plus\",\n    \"large_meeting\": true,\n    \"large_meeting_capacity\": 500,\n    \"meeting_capacity\": 100,\n    \"webinar\": true,\n    \"webinar_capacity\": 100,\n    \"zoom_events\": true,\n    \"zoom_events_capacity\": 500,\n    \"zoom_phone\": true,\n    \"zoom_iq_for_sales\": false\n  },\n  \"in_meeting\": {\n    \"allow_host_to_enable_focus_mode\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 4,\n    \"allow_users_save_chats\": 3,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"attention_mode_focus_mode\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The custom livestreaming service instructions\",\n    \"data_center_regions\": [\n      \"US\",\n      \"US\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"all\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_reactions\": true,\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"polling\": true,\n    \"private_chat\": true,\n    \"record_play_voice\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"screen_sharing\": true,\n    \"share_dual_camera\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"virtual_background\": true,\n    \"virtual_background_settings\": {\n      \"allow_upload_custom\": true,\n      \"allow_videos\": true,\n      \"enable\": true,\n      \"files\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"waiting_room\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 1,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 2,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 1,\n      \"default_attendees_chat_with\": 2,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"webinar_polling\": {\n      \"advanced_polls\": true,\n      \"enable\": true\n    },\n    \"webinar_survey\": true,\n    \"who_can_share_screen\": \"all\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true,\n    \"auto_answer\": false,\n    \"allow_show_zoom_windows\": false\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"recording\": {\n    \"ask_host_to_confirm_disclaimer\": true,\n    \"ask_participants_to_consent_disclaimer\": true,\n    \"auto_delete_cmr\": true,\n    \"auto_delete_cmr_days\": 90,\n    \"record_files_separately\": {\n      \"active_speaker\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gallery_view\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"shared_screen\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"auto_recording\": \"cloud\",\n    \"cloud_recording\": true,\n    \"host_pause_stop_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_addresses_or_ranges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"local_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"recording_disclaimer\": true,\n    \"recording_password_requirement\": {\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"telephony\",\n    \"default_password_for_scheduled_meetings\": \"1213434\",\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"meeting_password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_upper_and_lower_characters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"participants_video\": true,\n    \"personal_meeting\": true,\n    \"pmi_password\": \"113332424\",\n    \"pstn_password_protected\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"use_pmi_for_instant_meetings\": true,\n    \"use_pmi_for_scheduled_meetings\": true\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"show_international_numbers_link\": true,\n    \"telephony_regions\": {\n      \"selection_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"third_party_audio\": true\n  },\n  \"tsp\": {\n    \"call_out\": true,\n    \"call_out_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"show_international_numbers_link\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/settings?option=meeting_security",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "meeting_security",
													"description": "Optional query parameters: \n* `meeting_authentication` — Use this query parameter to view the [meeting authentication settings](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied to the user's account. \n* `recording_authentication` — Use this query parameter to view the [recording authentication settings](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied to the user's account. \n* `meeting_security` — Use this query parameter to view the meeting security settings applied to the user's account."
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Update a user's settings. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nUser settings updated",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"feature\": {\n    \"concurrent_meeting\": \"Plus\",\n    \"large_meeting\": true,\n    \"large_meeting_capacity\": 500,\n    \"meeting_capacity\": 100,\n    \"webinar\": true,\n    \"webinar_capacity\": 100,\n    \"zoom_events\": true,\n    \"zoom_events_capacity\": 500,\n    \"zoom_phone\": true,\n    \"zoom_iq_for_sales\": false\n  },\n  \"in_meeting\": {\n    \"allow_host_to_enable_focus_mode\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 4,\n    \"allow_users_save_chats\": 3,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"attention_mode_focus_mode\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The custom livestreaming service instructions\",\n    \"data_center_regions\": [\n      \"US\",\n      \"US\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"all\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_reactions\": true,\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"polling\": true,\n    \"private_chat\": true,\n    \"record_play_voice\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"screen_sharing\": true,\n    \"share_dual_camera\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"virtual_background\": true,\n    \"virtual_background_settings\": {\n      \"allow_upload_custom\": true,\n      \"allow_videos\": true,\n      \"enable\": true,\n      \"files\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"waiting_room\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 1,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 2,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 1,\n      \"default_attendees_chat_with\": 2,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"webinar_polling\": {\n      \"advanced_polls\": true,\n      \"enable\": true\n    },\n    \"webinar_survey\": true,\n    \"who_can_share_screen\": \"all\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true,\n    \"auto_answer\": false,\n    \"allow_show_zoom_windows\": false\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"recording\": {\n    \"ask_host_to_confirm_disclaimer\": true,\n    \"ask_participants_to_consent_disclaimer\": true,\n    \"auto_delete_cmr\": true,\n    \"auto_delete_cmr_days\": 90,\n    \"record_files_separately\": {\n      \"active_speaker\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gallery_view\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"shared_screen\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"auto_recording\": \"cloud\",\n    \"cloud_recording\": true,\n    \"host_pause_stop_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_addresses_or_ranges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"local_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"recording_disclaimer\": true,\n    \"recording_password_requirement\": {\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"telephony\",\n    \"default_password_for_scheduled_meetings\": \"1213434\",\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"meeting_password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_upper_and_lower_characters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"participants_video\": true,\n    \"personal_meeting\": true,\n    \"pmi_password\": \"113332424\",\n    \"pstn_password_protected\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"use_pmi_for_instant_meetings\": true,\n    \"use_pmi_for_scheduled_meetings\": true\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"show_international_numbers_link\": true,\n    \"telephony_regions\": {\n      \"selection_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"third_party_audio\": true\n  },\n  \"tsp\": {\n    \"call_out\": true,\n    \"call_out_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"show_international_numbers_link\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings?option=meeting_security",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_security"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br><br>\n**Error Code:** `1108`<br> Only Licensed or On-prem users can enable the large meeting feature.<br><br>\n**Error Code:** `1204`<br> You can't enable the Webinar feature because you already have the Zoom ",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"feature\": {\n    \"concurrent_meeting\": \"Plus\",\n    \"large_meeting\": true,\n    \"large_meeting_capacity\": 500,\n    \"meeting_capacity\": 100,\n    \"webinar\": true,\n    \"webinar_capacity\": 100,\n    \"zoom_events\": true,\n    \"zoom_events_capacity\": 500,\n    \"zoom_phone\": true,\n    \"zoom_iq_for_sales\": false\n  },\n  \"in_meeting\": {\n    \"allow_host_to_enable_focus_mode\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 4,\n    \"allow_users_save_chats\": 3,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"attention_mode_focus_mode\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The custom livestreaming service instructions\",\n    \"data_center_regions\": [\n      \"US\",\n      \"US\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"all\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_reactions\": true,\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"polling\": true,\n    \"private_chat\": true,\n    \"record_play_voice\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"screen_sharing\": true,\n    \"share_dual_camera\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"virtual_background\": true,\n    \"virtual_background_settings\": {\n      \"allow_upload_custom\": true,\n      \"allow_videos\": true,\n      \"enable\": true,\n      \"files\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"waiting_room\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 1,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 2,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 1,\n      \"default_attendees_chat_with\": 2,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"webinar_polling\": {\n      \"advanced_polls\": true,\n      \"enable\": true\n    },\n    \"webinar_survey\": true,\n    \"who_can_share_screen\": \"all\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true,\n    \"auto_answer\": false,\n    \"allow_show_zoom_windows\": false\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"recording\": {\n    \"ask_host_to_confirm_disclaimer\": true,\n    \"ask_participants_to_consent_disclaimer\": true,\n    \"auto_delete_cmr\": true,\n    \"auto_delete_cmr_days\": 90,\n    \"record_files_separately\": {\n      \"active_speaker\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gallery_view\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"shared_screen\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"auto_recording\": \"cloud\",\n    \"cloud_recording\": true,\n    \"host_pause_stop_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_addresses_or_ranges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"local_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"recording_disclaimer\": true,\n    \"recording_password_requirement\": {\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"telephony\",\n    \"default_password_for_scheduled_meetings\": \"1213434\",\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"meeting_password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_upper_and_lower_characters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"participants_video\": true,\n    \"personal_meeting\": true,\n    \"pmi_password\": \"113332424\",\n    \"pstn_password_protected\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"use_pmi_for_instant_meetings\": true,\n    \"use_pmi_for_scheduled_meetings\": true\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"show_international_numbers_link\": true,\n    \"telephony_regions\": {\n      \"selection_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"third_party_audio\": true\n  },\n  \"tsp\": {\n    \"call_out\": true,\n    \"call_out_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"show_international_numbers_link\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings?option=meeting_security",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_security"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email_notification\": {\n    \"alternative_host_reminder\": true,\n    \"cancel_meeting_reminder\": true,\n    \"cloud_recording_available_reminder\": true,\n    \"jbh_reminder\": true,\n    \"recording_available_reminder_alternative_hosts\": true,\n    \"recording_available_reminder_schedulers\": true,\n    \"schedule_for_reminder\": true\n  },\n  \"feature\": {\n    \"concurrent_meeting\": \"Plus\",\n    \"large_meeting\": true,\n    \"large_meeting_capacity\": 500,\n    \"meeting_capacity\": 100,\n    \"webinar\": true,\n    \"webinar_capacity\": 100,\n    \"zoom_events\": true,\n    \"zoom_events_capacity\": 500,\n    \"zoom_phone\": true,\n    \"zoom_iq_for_sales\": false\n  },\n  \"in_meeting\": {\n    \"allow_host_to_enable_focus_mode\": true,\n    \"allow_live_streaming\": true,\n    \"allow_participants_chat_with\": 4,\n    \"allow_users_save_chats\": 3,\n    \"annotation\": true,\n    \"attendee_on_hold\": true,\n    \"attention_mode_focus_mode\": true,\n    \"auto_saving_chat\": true,\n    \"breakout_room\": true,\n    \"breakout_room_schedule\": true,\n    \"chat\": true,\n    \"closed_caption\": true,\n    \"closed_captioning\": {\n      \"auto_transcribing\": true,\n      \"enable\": true,\n      \"save_caption\": true,\n      \"third_party_captioning_service\": true,\n      \"view_full_transcript\": true\n    },\n    \"co_host\": true,\n    \"custom_data_center_regions\": true,\n    \"custom_live_streaming_service\": true,\n    \"custom_service_instructions\": \"The custom livestreaming service instructions\",\n    \"data_center_regions\": [\n      \"US\",\n      \"US\"\n    ],\n    \"disable_screen_sharing_for_host_meetings\": true,\n    \"disable_screen_sharing_for_in_meeting_guests\": true,\n    \"e2e_encryption\": true,\n    \"entry_exit_chime\": \"all\",\n    \"far_end_camera_control\": true,\n    \"feedback\": true,\n    \"file_transfer\": true,\n    \"group_hd\": true,\n    \"join_from_desktop\": true,\n    \"join_from_mobile\": true,\n    \"language_interpretation\": {\n      \"custom_languages\": null,\n      \"enable\": true\n    },\n    \"live_streaming_facebook\": true,\n    \"live_streaming_youtube\": true,\n    \"manual_captioning\": {\n      \"allow_to_type\": true,\n      \"auto_generated_captions\": true,\n      \"full_transcript\": true,\n      \"manual_captions\": true,\n      \"save_captions\": true,\n      \"third_party_captioning_service\": true\n    },\n    \"meeting_reactions\": true,\n    \"meeting_survey\": true,\n    \"non_verbal_feedback\": true,\n    \"polling\": true,\n    \"private_chat\": true,\n    \"record_play_voice\": true,\n    \"remote_control\": true,\n    \"remote_support\": true,\n    \"request_permission_to_unmute\": true,\n    \"screen_sharing\": true,\n    \"share_dual_camera\": true,\n    \"show_a_join_from_your_browser_link\": true,\n    \"show_meeting_control_toolbar\": true,\n    \"slide_control\": true,\n    \"virtual_background\": true,\n    \"virtual_background_settings\": {\n      \"allow_upload_custom\": true,\n      \"allow_videos\": true,\n      \"enable\": true,\n      \"files\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"waiting_room\": true,\n    \"webinar_chat\": {\n      \"allow_attendees_chat_with\": 1,\n      \"allow_auto_save_local_chat_file\": true,\n      \"allow_panelists_chat_with\": 2,\n      \"allow_panelists_send_direct_message\": true,\n      \"allow_users_save_chats\": 1,\n      \"default_attendees_chat_with\": 2,\n      \"enable\": true\n    },\n    \"webinar_live_streaming\": {\n      \"custom_service_instructions\": \"The specific instructions\",\n      \"enable\": true,\n      \"live_streaming_reminder\": true,\n      \"live_streaming_service\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"webinar_polling\": {\n      \"advanced_polls\": true,\n      \"enable\": true\n    },\n    \"webinar_survey\": true,\n    \"who_can_share_screen\": \"all\",\n    \"who_can_share_screen_when_someone_is_sharing\": \"all\",\n    \"workplace_by_facebook\": true,\n    \"auto_answer\": false,\n    \"allow_show_zoom_windows\": false\n  },\n  \"profile\": {\n    \"recording_storage_location\": {\n      \"allowed_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"recording\": {\n    \"ask_host_to_confirm_disclaimer\": true,\n    \"ask_participants_to_consent_disclaimer\": true,\n    \"auto_delete_cmr\": true,\n    \"auto_delete_cmr_days\": 90,\n    \"record_files_separately\": {\n      \"active_speaker\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gallery_view\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"shared_screen\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"display_participant_name\": true,\n    \"recording_thumbnails\": true,\n    \"optimize_recording_for_3rd_party_video_editor\": true,\n    \"recording_highlight\": true,\n    \"save_panelist_chat\": true,\n    \"save_poll_results\": true,\n    \"save_close_caption\": true,\n    \"auto_recording\": \"cloud\",\n    \"cloud_recording\": true,\n    \"host_pause_stop_recording\": true,\n    \"ip_address_access_control\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_addresses_or_ranges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"local_recording\": true,\n    \"record_audio_file\": true,\n    \"record_gallery_view\": true,\n    \"record_speaker_view\": true,\n    \"recording_audio_transcript\": true,\n    \"recording_disclaimer\": true,\n    \"recording_password_requirement\": {\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"save_chat_text\": true,\n    \"show_timestamp\": true\n  },\n  \"schedule_meeting\": {\n    \"audio_type\": \"telephony\",\n    \"default_password_for_scheduled_meetings\": \"1213434\",\n    \"embed_password_in_join_link\": true,\n    \"force_pmi_jbh_password\": true,\n    \"host_video\": true,\n    \"join_before_host\": true,\n    \"meeting_password_requirement\": {\n      \"consecutive_characters_length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_letter\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_special_character\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"have_upper_and_lower_characters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"length\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"only_allow_numeric\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"weak_enhance_detection\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"participants_video\": true,\n    \"personal_meeting\": true,\n    \"pmi_password\": \"113332424\",\n    \"pstn_password_protected\": true,\n    \"require_password_for_instant_meetings\": true,\n    \"require_password_for_pmi_meetings\": \"jbh_only\",\n    \"require_password_for_scheduled_meetings\": true,\n    \"require_password_for_scheduling_new_meetings\": true,\n    \"use_pmi_for_instant_meetings\": true,\n    \"use_pmi_for_scheduled_meetings\": true\n  },\n  \"telephony\": {\n    \"audio_conference_info\": \"test\",\n    \"show_international_numbers_link\": true,\n    \"telephony_regions\": {\n      \"selection_values\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"third_party_audio\": true\n  },\n  \"tsp\": {\n    \"call_out\": true,\n    \"call_out_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"show_international_numbers_link\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings?option=meeting_security",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_security"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "token",
							"item": [
								{
									"name": "Revoke a user's SSO token",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"token"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Revoke a user's SSO token. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nAfter calling this API, the SSO user will be logged out of their current Zoom session.\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nToken deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"token"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"token"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a user's token",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/token?type=zak&ttl=7200",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"token"
											],
											"query": [
												{
													"key": "type",
													"value": "zak",
													"description": "The user token type: \n* `zak` — A Zoom Access Token (ZAK) is used to generate a URL to start meetings. See [Getting a Zoom Access Token (ZAK)](https://marketplace.zoom.us/docs/sdk/native-sdks/auth#generating-zoom-access-token-zak) for details. The ZAK's expiration time is two hours. For API users, the expiration time is 90 days. An API user is a user created via the `custCreate` action in the **[Create users](/api-reference/zoom-api/methods#operation/userCreate)** API. The maximum length of this value is `512`. \n* `token` — **Deprecated.** A Zoom token. This token expires in 14 days. You must make the request again after expiration to receive a new token. This query parameter returns a null value if the user signed in to Zoom via Google or Facebook. The maximum length of this value is `512`. \n\n This value defaults to `token`."
												},
												{
													"key": "ttl",
													"value": "7200",
													"description": "The ZAK expiration time to live (TTL). The value of this query parameter denotes the expiry time of the ZAK, in seconds. To update the user's ZAK TTL, use this field with the `zak` value for the `type` query parameter. \n\n This value defaults to `7200` or `7776000` (90 days) for API users. The maximum value is one year."
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Use this API to get a user's Zoom token or Zoom Access Token (ZAK). For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n **Scopes:** `user:read:admin`, `user:read` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\n Token returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/token?type=zak&ttl=7200",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"token"
													],
													"query": [
														{
															"key": "type",
															"value": "zak"
														},
														{
															"key": "ttl",
															"value": "7200"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"6IjAwMDAwMSIsInptX3NrbSI6InptX\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1001` <br>\n User does not exist: $userId",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/token?type=zak&ttl=7200",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"token"
													],
													"query": [
														{
															"key": "type",
															"value": "zak"
														},
														{
															"key": "ttl",
															"value": "7200"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "tsp",
							"item": [
								{
									"name": "{tsp Id}",
									"item": [
										{
											"name": "Delete a user's TSP account",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp",
														":tspId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														},
														{
															"key": "tspId",
															"value": "1",
															"description": "(Required) TSP account ID."
														}
													]
												},
												"description": "Delete a user's TSP account.<br><br>\n**Scopes:** `tsp:write:admin` `tsp:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
											},
											"response": [
												{
													"name": "**Status Code:** `204` **No Content**<br>\nTSP account deleted.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "6dfgdfgdg444447b0egga",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n**Error Code:**`2024`<br>\nAccount not enable TSP.<br>\n**Error Code:** `300`<br>\nThe TSP id provided does not exist.<br>\n**Error Code:** `300`<br>\nTSP Config does not exist.<br>\n**Error Code:** `300`<br>\nAt ",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "6dfgdfgdg444447b0egga",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\nNot Found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>\n**Error Code:**`1120`<br>\nA valid invitation to join the Zoom account was not found for this user.<br>\nThis error is thrown if you added a user in ",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "6dfgdfgdg444447b0egga",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get a user's TSP account",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp",
														":tspId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														},
														{
															"key": "tspId",
															"value": "1",
															"description": "(Required) TSP account ID."
														}
													]
												},
												"description": "Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.<br><br>\n**Scopes:** `tsp:read:admin` `tsp:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nTSP account retrieved successfully.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "6dfgdfgdg444447b0egga",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"conference_code\": \"0125\",\n  \"leader_pin\": \"11189898\",\n  \"dial_in_numbers\": [\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    },\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    }\n  ],\n  \"id\": \"1\",\n  \"tsp_bridge\": \"US_TSP_TB\"\n}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n**Error Code:** `300`<br>\nThe TSP id provided does not exist.<br>\n**Error Code:** `300`<br>\nTSP Config does not exist.<br>\n**Error Code:**`2024`<br>\nAccount has not enabled TSP.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "6dfgdfgdg444447b0egga",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\nNot Found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>\n**Error Code:**`1120`<br>\nA valid invitation to join the Zoom account was not found for this user.<br>\nThis error is thrown if you added a user in ",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "6dfgdfgdg444447b0egga",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update a TSP account",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"conference_code\": \"0125\",\n  \"leader_pin\": \"11189898\",\n  \"dial_in_numbers\": [\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    },\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    }\n  ],\n  \"tsp_bridge\": \"US_TSP_TB\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp",
														":tspId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														},
														{
															"key": "tspId",
															"value": "1",
															"description": "(Required) TSP account ID."
														}
													]
												},
												"description": "Update a user's TSP account.<br><br>\n**Scopes:** `tsp:write:admin` `tsp:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:**`204` **No Content**<br>\nTSP account updated.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"conference_code\": \"0125\",\n  \"leader_pin\": \"11189898\",\n  \"dial_in_numbers\": [\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    },\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    }\n  ],\n  \"tsp_bridge\": \"US_TSP_TB\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "6dfgdfgdg444447b0egga",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n**Error Code:**`2024`<br>\nAccount has not enabled TSP.<br>\n**Error Code:**`300`<br>\nThe TSP id provided does not exist.<br>\n**Error Code:**`300`<br>\nTSP Config does not exist.<br>\n**Error Code:**`300`<br>\nA",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"conference_code\": \"0125\",\n  \"leader_pin\": \"11189898\",\n  \"dial_in_numbers\": [\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    },\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    }\n  ],\n  \"tsp_bridge\": \"US_TSP_TB\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "6dfgdfgdg444447b0egga",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\nNot Found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>\n**Error Code:**`1120`<br>\nA valid invitation to join the Zoom account was not found for this user.<br>\nThis error is thrown if you added a user in ",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"conference_code\": \"0125\",\n  \"leader_pin\": \"11189898\",\n  \"dial_in_numbers\": [\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    },\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    }\n  ],\n  \"tsp_bridge\": \"US_TSP_TB\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "6dfgdfgdg444447b0egga",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "List user's TSP accounts",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/tsp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"tsp"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.<br><br>\n**Scopes:** `tsp:read:admin` `tsp:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` **OK**<br>\nTSP account list returned successfully.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"tsp_accounts\": [\n    {\n      \"conference_code\": \"0125\",\n      \"leader_pin\": \"11189898\",\n      \"dial_in_numbers\": [\n        {\n          \"code\": \"1\",\n          \"country_label\": \"America\",\n          \"number\": \"+1 1000200200\",\n          \"type\": \"toll\"\n        },\n        {\n          \"code\": \"1\",\n          \"country_label\": \"America\",\n          \"number\": \"+1 1000200200\",\n          \"type\": \"toll\"\n        }\n      ],\n      \"id\": \"1\",\n      \"tsp_bridge\": \"US_TSP_TB\"\n    },\n    {\n      \"conference_code\": \"0125\",\n      \"leader_pin\": \"11189898\",\n      \"dial_in_numbers\": [\n        {\n          \"code\": \"1\",\n          \"country_label\": \"America\",\n          \"number\": \"+1 1000200200\",\n          \"type\": \"toll\"\n        },\n        {\n          \"code\": \"1\",\n          \"country_label\": \"America\",\n          \"number\": \"+1 1000200200\",\n          \"type\": \"toll\"\n        }\n      ],\n      \"id\": \"1\",\n      \"tsp_bridge\": \"US_TSP_TB\"\n    }\n  ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n**Error Code:** `2024`<br>\nAccount has not enabled TSP.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nNot Found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>\n**Error Code:**`1120`<br>\nA valid invitation to join the Zoom account was not found for this user.<br>\nThis error is thrown if you added a user in ",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a user's TSP account",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"conference_code\": \"0125\",\n  \"leader_pin\": \"US_TSP_TB\",\n  \"dial_in_numbers\": [\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    },\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    }\n  ],\n  \"tsp_bridge\": \"US_TSP_TB\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/tsp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"tsp"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Add a user's TSP account.<br><br>\n**Scopes:** `tsp:write:admin` `tsp:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201`<br>\nTSP account added.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"conference_code\": \"0125\",\n  \"leader_pin\": \"US_TSP_TB\",\n  \"dial_in_numbers\": [\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    },\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    }\n  ],\n  \"tsp_bridge\": \"US_TSP_TB\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"conference_code\": \"0125\",\n  \"leader_pin\": \"US_TSP_TB\",\n  \"dial_in_numbers\": [\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    },\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    }\n  ],\n  \"tsp_bridge\": \"US_TSP_TB\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\nBad Request.<br>\n**Error Code:**`2024`<br>\nAccount has not enabled TSP.<br>\n**Error Code:**`300`<br>\nMedia link is required for AT&T TSP accounts.<br>\n**Error Code:** `300`<br>\nYou can add a max of two tsp configs.\n",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"conference_code\": \"0125\",\n  \"leader_pin\": \"US_TSP_TB\",\n  \"dial_in_numbers\": [\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    },\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    }\n  ],\n  \"tsp_bridge\": \"US_TSP_TB\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nNot Found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>\n**Error Code:**`1120`<br>\nA valid invitation to join the Zoom account was not found for this user.<br>\nThis error is thrown if you added a user in ",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"conference_code\": \"0125\",\n  \"leader_pin\": \"US_TSP_TB\",\n  \"dial_in_numbers\": [\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    },\n    {\n      \"code\": \"1\",\n      \"country_label\": \"America\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    }\n  ],\n  \"tsp_bridge\": \"US_TSP_TB\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Set global dial-in URL for a TSP user",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"audio_url\": \"https://example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/tsp/settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"tsp",
												"settings"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The userId or email address of the user."
												}
											]
										},
										"description": "A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. <p></p>\n**Scopes:**`tsp:write:admin` `tsp:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
									},
									"response": [
										{
											"name": "**Status Code:** `204` **No Content** <br>\nURL set successfully.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"audio_url\": \"https://example.com\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp",
														"settings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The userId or email address of the user."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br><br>\n**Error Code**: `2000`<br>\nNot TSP special account.<br>\n\nThs error means that the account does not have special TSP privilege. Contact Zoom Developer Support for details.<br>\n**Error Code**: `2024`<br>\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"audio_url\": \"https://example.com\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp",
														"settings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The userId or email address of the user."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nUser ID not found.<br>\n**Error Code**: `1001`<br>\nUser {userId} not exist or not belong to this account.\n**Error Code**: `1120`<br>\nInvite not exist.\n\nThis error is thrown if you added a user in your account but the user di",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"audio_url\": \"https://example.com\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp",
														"settings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The userId or email address of the user."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "webinars",
							"item": [
								{
									"name": "List webinars",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/webinars?page_size=30&page_number=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"webinars"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												},
												{
													"key": "page_number",
													"value": "1",
													"description": "**Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination."
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Use this API to list all the webinars scheduled by or on-behalf a user (webinar host). For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees. \n\n**Note:** This API only returns a user's [unexpired webinars](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844). \n\n **Scopes:** `webinar:read:admin`, `webinar:read` </br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n **Prerequisites:** \n* A Pro or higher plan with the Webinar add-on."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nList of webinar objects returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/webinars?page_size=30&page_number=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"webinars"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"next_page_token\": \"w7587w4eiyfsudgf\",\n  \"page_count\": 1,\n  \"page_number\": 1,\n  \"page_size\": 30,\n  \"total_records\": 20,\n  \"webinars\": [\n    {\n      \"agenda\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"created_at\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"duration\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"host_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"join_url\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"start_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"timezone\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"topic\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"uuid\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"agenda\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"created_at\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"duration\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"host_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"join_url\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"start_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"timezone\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"topic\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"uuid\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser {userId} not exist or not belong to this account.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/webinars?page_size=30&page_number=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"webinars"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create a webinar",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"agenda\": \"My Webinar\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"settings\": {\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com;thill@example.com\",\n    \"alternative_host_update_polls\": true,\n    \"approval_type\": 0,\n    \"attendees_and_panelists_reminder_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"close_registration\": true,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"email_language\": \"en-US\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"follow_up_absentees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"follow_up_attendees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"global_dial_in_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"hd_video\": false,\n    \"hd_video_for_attendees\": false,\n    \"host_video\": true,\n    \"language_interpretation\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"interpreters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"meeting_authentication\": true,\n    \"on_demand\": false,\n    \"panelists_invitation_email_notification\": true,\n    \"panelists_video\": true,\n    \"post_webinar_survey\": true,\n    \"practice_session\": false,\n    \"question_and_answer\": {\n      \"allow_anonymous_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"answer_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_comment\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_upvote\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"registrants_email_notification\": true,\n    \"registrants_restrict_number\": 100,\n    \"registration_type\": 1,\n    \"send_1080p_video_to_attendees\": false,\n    \"show_share_button\": true,\n    \"survey_url\": \"https://example.com\",\n    \"enable_session_branding\": true\n  },\n  \"start_time\": \"2022-03-26T06:44:14Z\",\n  \"template_id\": \"5Cj3ceXoStO6TGOVvIOVPA==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Webinar\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"type\": 5\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/webinars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"webinars"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										},
										"description": "Use this API to schedule a webinar for a user (webinar host). For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\nZoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees. \n\n**Scopes:** `webinar:write:admin`, `webinar:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n* This API has a daily rate limit of **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request. \n\n**Prerequisites:** \n* A Pro or higher plan with a Webinar add-on."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201`<br>\nWebinar created.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"agenda\": \"My Webinar\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"settings\": {\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com;thill@example.com\",\n    \"alternative_host_update_polls\": true,\n    \"approval_type\": 0,\n    \"attendees_and_panelists_reminder_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"close_registration\": true,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"email_language\": \"en-US\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"follow_up_absentees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"follow_up_attendees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"global_dial_in_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"hd_video\": false,\n    \"hd_video_for_attendees\": false,\n    \"host_video\": true,\n    \"language_interpretation\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"interpreters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"meeting_authentication\": true,\n    \"on_demand\": false,\n    \"panelists_invitation_email_notification\": true,\n    \"panelists_video\": true,\n    \"post_webinar_survey\": true,\n    \"practice_session\": false,\n    \"question_and_answer\": {\n      \"allow_anonymous_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"answer_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_comment\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_upvote\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"registrants_email_notification\": true,\n    \"registrants_restrict_number\": 100,\n    \"registration_type\": 1,\n    \"send_1080p_video_to_attendees\": false,\n    \"show_share_button\": true,\n    \"survey_url\": \"https://example.com\",\n    \"enable_session_branding\": true\n  },\n  \"start_time\": \"2022-03-26T06:44:14Z\",\n  \"template_id\": \"5Cj3ceXoStO6TGOVvIOVPA==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Webinar\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"type\": 5\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/webinars",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"webinars"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"host_email\": \"jchill@example.com\",\n  \"host_id\": \"30R7kT7bTIKSNUFEuH_Qlg\",\n  \"id\": 95204914252,\n  \"registrants_confirmation_email\": true,\n  \"template_id\": \"ull6574eur\",\n  \"uuid\": \"Bznyg8KZTdCVbQxvS/oZ7w==\",\n  \"agenda\": \"My Webinar\",\n  \"created_at\": \"2022-03-26T07:18:32Z\",\n  \"duration\": 60,\n  \"join_url\": \"https://example.com/j/11111\",\n  \"occurrences\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"settings\": {\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com\",\n    \"alternative_host_update_polls\": true,\n    \"approval_type\": 0,\n    \"attendees_and_panelists_reminder_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_name\": \"Sign in to Zoom\",\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"close_registration\": true,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"email_language\": \"en-US\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"follow_up_absentees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"follow_up_attendees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"global_dial_in_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"hd_video\": false,\n    \"hd_video_for_attendees\": false,\n    \"host_video\": true,\n    \"language_interpretation\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"interpreters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"meeting_authentication\": true,\n    \"notify_registrants\": true,\n    \"on_demand\": false,\n    \"panelists_invitation_email_notification\": true,\n    \"panelists_video\": true,\n    \"post_webinar_survey\": true,\n    \"practice_session\": false,\n    \"question_and_answer\": {\n      \"allow_anonymous_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"answer_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_comment\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_upvote\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"registrants_confirmation_email\": true,\n    \"registrants_email_notification\": true,\n    \"registrants_restrict_number\": 100,\n    \"registration_type\": 1,\n    \"send_1080p_video_to_attendees\": false,\n    \"show_share_button\": true,\n    \"survey_url\": \"https://example.com\",\n    \"enable_session_branding\": true\n  },\n  \"start_time\": \"2022-03-26T07:18:32Z\",\n  \"start_url\": \"https://example.com/s/11111\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Webinar\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"type\": 5\n}"
										},
										{
											"name": "**HTTP Status Code:** `300`<br>\nA maximum of \"{rateLimitNumber}\" webinars can be created and updated for a single user in one day.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"agenda\": \"My Webinar\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"settings\": {\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com;thill@example.com\",\n    \"alternative_host_update_polls\": true,\n    \"approval_type\": 0,\n    \"attendees_and_panelists_reminder_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"close_registration\": true,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"email_language\": \"en-US\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"follow_up_absentees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"follow_up_attendees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"global_dial_in_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"hd_video\": false,\n    \"hd_video_for_attendees\": false,\n    \"host_video\": true,\n    \"language_interpretation\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"interpreters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"meeting_authentication\": true,\n    \"on_demand\": false,\n    \"panelists_invitation_email_notification\": true,\n    \"panelists_video\": true,\n    \"post_webinar_survey\": true,\n    \"practice_session\": false,\n    \"question_and_answer\": {\n      \"allow_anonymous_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"answer_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_comment\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_upvote\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"registrants_email_notification\": true,\n    \"registrants_restrict_number\": 100,\n    \"registration_type\": 1,\n    \"send_1080p_video_to_attendees\": false,\n    \"show_share_button\": true,\n    \"survey_url\": \"https://example.com\",\n    \"enable_session_branding\": true\n  },\n  \"start_time\": \"2022-03-26T06:44:14Z\",\n  \"template_id\": \"5Cj3ceXoStO6TGOVvIOVPA==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Webinar\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"type\": 5\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/webinars",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"webinars"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`\nSubscription plan for webinar is missing. Enable webinar for this user once the subscription plan is added:{userId}.<br>\n* Users in '{0}' have been blocked from joining meetings and web",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"agenda\": \"My Webinar\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"settings\": {\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com;thill@example.com\",\n    \"alternative_host_update_polls\": true,\n    \"approval_type\": 0,\n    \"attendees_and_panelists_reminder_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"close_registration\": true,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"email_language\": \"en-US\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"follow_up_absentees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"follow_up_attendees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"global_dial_in_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"hd_video\": false,\n    \"hd_video_for_attendees\": false,\n    \"host_video\": true,\n    \"language_interpretation\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"interpreters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"meeting_authentication\": true,\n    \"on_demand\": false,\n    \"panelists_invitation_email_notification\": true,\n    \"panelists_video\": true,\n    \"post_webinar_survey\": true,\n    \"practice_session\": false,\n    \"question_and_answer\": {\n      \"allow_anonymous_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"answer_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_comment\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_upvote\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"registrants_email_notification\": true,\n    \"registrants_restrict_number\": 100,\n    \"registration_type\": 1,\n    \"send_1080p_video_to_attendees\": false,\n    \"show_share_button\": true,\n    \"survey_url\": \"https://example.com\",\n    \"enable_session_branding\": true\n  },\n  \"start_time\": \"2022-03-26T06:44:14Z\",\n  \"template_id\": \"5Cj3ceXoStO6TGOVvIOVPA==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Webinar\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"type\": 5\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/webinars",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"webinars"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser {userId} not exist or not belong to this account.\n",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"agenda\": \"My Webinar\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"settings\": {\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com;thill@example.com\",\n    \"alternative_host_update_polls\": true,\n    \"approval_type\": 0,\n    \"attendees_and_panelists_reminder_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"close_registration\": true,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"email_language\": \"en-US\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"follow_up_absentees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"follow_up_attendees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"global_dial_in_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"hd_video\": false,\n    \"hd_video_for_attendees\": false,\n    \"host_video\": true,\n    \"language_interpretation\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"interpreters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"meeting_authentication\": true,\n    \"on_demand\": false,\n    \"panelists_invitation_email_notification\": true,\n    \"panelists_video\": true,\n    \"post_webinar_survey\": true,\n    \"practice_session\": false,\n    \"question_and_answer\": {\n      \"allow_anonymous_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"answer_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_comment\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_upvote\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"registrants_email_notification\": true,\n    \"registrants_restrict_number\": 100,\n    \"registration_type\": 1,\n    \"send_1080p_video_to_attendees\": false,\n    \"show_share_button\": true,\n    \"survey_url\": \"https://example.com\",\n    \"enable_session_branding\": true\n  },\n  \"start_time\": \"2022-03-26T06:44:14Z\",\n  \"template_id\": \"5Cj3ceXoStO6TGOVvIOVPA==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Webinar\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"type\": 5\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/webinars",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"webinars"
													],
													"variable": [
														{
															"key": "userId",
															"value": "6dfgdfgdg444447b0egga",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Delete a user",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId?action=delete&encrypted_email=false&transfer_email=jchill@example.com&transfer_meeting=true&transfer_webinar=false&transfer_recording=true&transfer_whiteboard=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"query": [
										{
											"key": "action",
											"value": "delete",
											"description": "Delete action options:<br>`disassociate` - Disassociate a user.<br>`delete`-  Permanently delete a user.<br>Note: To delete pending user in the account, use `disassociate`"
										},
										{
											"key": "encrypted_email",
											"value": "false",
											"description": "Whether the email address passed for the `userId` value is an encrypted email address: \n\n * `true` — The email address is encrypted. \n * `false` — The email address is not encrypted. \n\n If you do not query this parameter, this value defaults to null (`false`)."
										},
										{
											"key": "transfer_email",
											"value": "jchill@example.com",
											"description": "Transfer email. This field is **required** if the user has upcoming Zoom Events scheduled. After you delete or disassociate the user, the user's upcoming Zoom Events will be transferred to the target user."
										},
										{
											"key": "transfer_meeting",
											"value": "true",
											"description": "Transfer meeting."
										},
										{
											"key": "transfer_webinar",
											"value": "false",
											"description": "Transfer webinar."
										},
										{
											"key": "transfer_recording",
											"value": "true",
											"description": "Transfer recording."
										},
										{
											"key": "transfer_whiteboard",
											"value": "true",
											"description": "When you delete the user, whether to transfer all their [whiteboard](https://support.zoom.us/hc/en-us/articles/205677665) data to another user."
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "6dfgdfgdg444447b0egga",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
										}
									]
								},
								"description": "Use this API to disassociate (unlink) a user or permanently delete a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n**Deleting** a user **permanently** removes the user and their data from Zoom. Users can create a new Zoom account using the same email address. An account owner or an account admin can transfer meetings, webinars and cloud recordings to another Zoom user account before deleting.\n\n**Disassociating** a user unlinks the user from the associated Zoom account and provides the user their own basic free Zoom account. The disassociated user can then purchase their own Zoom licenses. An account owner or account admin can transfer the user's meetings, webinars, and cloud recordings to another user before disassociation.\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nUser deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?action=delete&encrypted_email=false&transfer_email=jchill@example.com&transfer_meeting=true&transfer_webinar=false&transfer_recording=true&transfer_whiteboard=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "action",
													"value": "delete"
												},
												{
													"key": "encrypted_email",
													"value": "false"
												},
												{
													"key": "transfer_email",
													"value": "jchill@example.com"
												},
												{
													"key": "transfer_meeting",
													"value": "true"
												},
												{
													"key": "transfer_webinar",
													"value": "false"
												},
												{
													"key": "transfer_recording",
													"value": "true"
												},
												{
													"key": "transfer_whiteboard",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br><br> **Error Code:** `300`<br>The transfer-to email address cannot be the same as the unlinked or deleted user's email address.<br> Unable to unlink API user(s).<br> This user has published events on Zoom Ev",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?action=delete&encrypted_email=false&transfer_email=jchill@example.com&transfer_meeting=true&transfer_webinar=false&transfer_recording=true&transfer_whiteboard=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "action",
													"value": "delete"
												},
												{
													"key": "encrypted_email",
													"value": "false"
												},
												{
													"key": "transfer_email",
													"value": "jchill@example.com"
												},
												{
													"key": "transfer_meeting",
													"value": "true"
												},
												{
													"key": "transfer_webinar",
													"value": "false"
												},
												{
													"key": "transfer_recording",
													"value": "true"
												},
												{
													"key": "transfer_whiteboard",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?action=delete&encrypted_email=false&transfer_email=jchill@example.com&transfer_meeting=true&transfer_webinar=false&transfer_recording=true&transfer_whiteboard=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "action",
													"value": "delete"
												},
												{
													"key": "encrypted_email",
													"value": "false"
												},
												{
													"key": "transfer_email",
													"value": "jchill@example.com"
												},
												{
													"key": "transfer_meeting",
													"value": "true"
												},
												{
													"key": "transfer_webinar",
													"value": "false"
												},
												{
													"key": "transfer_recording",
													"value": "true"
												},
												{
													"key": "transfer_whiteboard",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId?login_type=101&encrypted_email=false&search_by_unique_id=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"query": [
										{
											"key": "login_type",
											"value": "101",
											"description": "The user's login method: \n* `0` — Facebook OAuth \n* `1` — Google OAuth \n* `24` — Apple OAuth \n* `27` — Microsoft OAuth \n* `97` — Mobile device \n* `98` — RingCentral OAuth \n* `99` — API user \n* `100` — Zoom Work email \n* `101` — Single Sign-On (SSO) \n\nThe following login methods are only available in China: \n* `11` — Phone number \n* `21` — WeChat \n* `23` — Alipay"
										},
										{
											"key": "encrypted_email",
											"value": "false",
											"description": "Whether the email address passed for the `userId` value is an encrypted email address: \n\n * `true` — The email address is encrypted. \n * `false` — The email address is not encrypted. \n\n If you do not query this parameter, this value defaults to null (`false`)."
										},
										{
											"key": "search_by_unique_id",
											"value": "true",
											"description": "Whether the queried `userId` value is an employee unique ID: \n* `true` — The queried ID is an employee's unique ID. \n* `false` — The queried ID is not an employee's unique ID. \n\nThis value defaults to `false` (null)."
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "6dfgdfgdg444447b0egga",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
										}
									]
								},
								"description": "Use this API to view a user's information on a Zoom account. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n**Note:** Users who have not activated their account will have a `pending` status. These users' `created_at` timestamp will also display the time at which the API call was made, **not** the account's creation date. \n\n**Scopes:** `user:read:admin`, `user:read`, `user_info:read` <br> \n* **Note:** The `user_info:read` scope is only available when you pass the `me` value for the `$userId` value. \n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nUser object returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=101&encrypted_email=false&search_by_unique_id=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "101"
												},
												{
													"key": "encrypted_email",
													"value": "false"
												},
												{
													"key": "search_by_unique_id",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"email\": \"jchill@example.com\",\n  \"type\": 1,\n  \"id\": \"zJKyaiAyTNC-MWjiWC18KQ\",\n  \"created_at\": \"2018-10-31T04:32:37Z\",\n  \"dept\": \"Developers\",\n  \"first_name\": \"Jill\",\n  \"last_client_version\": \"5.9.6.4993(mac)\",\n  \"last_login_time\": \"2021-05-05T20:40:30Z\",\n  \"last_name\": \"Chill\",\n  \"pmi\": 3542471135,\n  \"role_name\": \"Admin\",\n  \"timezone\": \"Asia/Shanghai\",\n  \"use_pmi\": false,\n  \"account_id\": \"q6gBJVO5TzexKYTb_I2rpg\",\n  \"account_number\": 10009239,\n  \"cms_user_id\": \"KDcuGIm1QgePTO8WbOqwIQ\",\n  \"company\": \"Jill\",\n  \"custom_attributes\": {\n    \"key\": \"cbf_cywdkexrtqc73f97gd4w6g\",\n    \"name\": \"A1\",\n    \"value\": \"1\"\n  },\n  \"employee_unique_id\": \"HqDyI037Qjili1kNsSIrIg\",\n  \"group_ids\": [\n    \"RSMaSp8sTEGK0_oamiA2_w\",\n    \"RSMaSp8sTEGK0_oamiA2_w\"\n  ],\n  \"host_key\": \"299492849\",\n  \"im_group_ids\": [\n    \"t-_-d56CSWG-7BF15LLrOw\",\n    \"t-_-d56CSWG-7BF15LLrOw\"\n  ],\n  \"jid\": \"jchill@example.com\",\n  \"job_title\": \"API Developer\",\n  \"language\": \"en-US\",\n  \"location\": \"Paris\",\n  \"login_type\": 101,\n  \"manager\": \"thill@example.com\",\n  \"personal_meeting_url\": \"example.com\",\n  \"phone_country\": \"US\",\n  \"phone_number\": \"+1 800000000\",\n  \"phone_numbers\": [\n    {\n      \"code\": \"+1\",\n      \"country\": \"US\",\n      \"label\": \"Mobile\",\n      \"number\": \"800000000\",\n      \"verified\": true\n    },\n    {\n      \"code\": \"+1\",\n      \"country\": \"US\",\n      \"label\": \"Mobile\",\n      \"number\": \"800000000\",\n      \"verified\": true\n    }\n  ],\n  \"pic_url\": \"example.com\",\n  \"plan_united_type\": \"16\",\n  \"pronouns\": \"3123\",\n  \"pronouns_option\": 1,\n  \"role_id\": \"0\",\n  \"status\": \"pending\",\n  \"vanity_url\": \"example.com\",\n  \"verified\": 1\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\nBad request<br>\n**Error Code:** `1120`<br>\nA valid invitation to join the Zoom account was not found for this user. <br>\nThis error is thrown if you added a user in your account but the user did not accept t",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=101&encrypted_email=false&search_by_unique_id=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "101"
												},
												{
													"key": "encrypted_email",
													"value": "false"
												},
												{
													"key": "search_by_unique_id",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=101&encrypted_email=false&search_by_unique_id=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "101"
												},
												{
													"key": "encrypted_email",
													"value": "false"
												},
												{
													"key": "search_by_unique_id",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a user",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cms_user_id\": \"KDcuGIm1QgePTO8WbOqwIQ\",\n  \"company\": \"Example, Inc.\",\n  \"custom_attributes\": {\n    \"key\": \"cbf_cywdkexrtqc73f97gd4w6g\",\n    \"name\": \"A1\",\n    \"value\": \"1\"\n  },\n  \"dept\": \"Developers\",\n  \"first_name\": \"Jill\",\n  \"group_id\": \"RSMaSp8sTEGK0_oamiA2_w\",\n  \"host_key\": \"4692486817\",\n  \"job_title\": \"Developer\",\n  \"language\": \"English\",\n  \"last_name\": \"Chill\",\n  \"location\": \"San Jose\",\n  \"manager\": \"cWZp3JAc@OerAzWzYRYbxAkUuzxMWYFlQBpTxyxIOL.uni\",\n  \"phone_country\": \"US\",\n  \"phone_number\": \"5550100\",\n  \"phone_numbers\": [\n    {\n      \"code\": \"+1\",\n      \"country\": \"US\",\n      \"label\": \"Mobile\",\n      \"number\": \"5550100\"\n    },\n    {\n      \"code\": \"+1\",\n      \"country\": \"US\",\n      \"label\": \"Mobile\",\n      \"number\": \"5550100\"\n    }\n  ],\n  \"pmi\": 1234567890,\n  \"pronouns\": \"They/Them/Their\",\n  \"pronouns_option\": 1,\n  \"timezone\": \"America/Chicago\",\n  \"type\": 2,\n  \"use_pmi\": false,\n  \"vanity_name\": \"My Meeting Room\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId?login_type=101&remove_tsp_credentials=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"query": [
										{
											"key": "login_type",
											"value": "101",
											"description": "The user's login method: \n* `0` — Facebook OAuth \n* `1` — Google OAuth \n* `24` — Apple OAuth \n* `27` — Microsoft OAuth \n* `97` — Mobile device \n* `98` — RingCentral OAuth \n* `99` — API user \n* `100` — Zoom Work email \n* `101` — Single Sign-On (SSO) \n\nThe following login methods are only available in China: \n* `11` — Phone number \n* `21` — WeChat \n* `23` — Alipay"
										},
										{
											"key": "remove_tsp_credentials",
											"value": "true",
											"description": "Whether to remove the user's TSP credentials: \n* `true` — The queried ID is an employee's unique ID. \n* `false` — The queried ID is not an employee's unique ID. \n\n This value defaults to `false` (null)."
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "6dfgdfgdg444447b0egga",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
										}
									]
								},
								"description": "Use this API to update a user's [Zoom profile](https://support.zoom.us/hc/en-us/articles/201363203-My-Profile) information. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n**Scopes:** `user:write:admin` `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` <br>\nUser updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"cms_user_id\": \"KDcuGIm1QgePTO8WbOqwIQ\",\n  \"company\": \"Example, Inc.\",\n  \"custom_attributes\": {\n    \"key\": \"cbf_cywdkexrtqc73f97gd4w6g\",\n    \"name\": \"A1\",\n    \"value\": \"1\"\n  },\n  \"dept\": \"Developers\",\n  \"first_name\": \"Jill\",\n  \"group_id\": \"RSMaSp8sTEGK0_oamiA2_w\",\n  \"host_key\": \"4692486817\",\n  \"job_title\": \"Developer\",\n  \"language\": \"English\",\n  \"last_name\": \"Chill\",\n  \"location\": \"San Jose\",\n  \"manager\": \"J2oYJ6@YmcNyfqMByN.wvls\",\n  \"phone_country\": \"US\",\n  \"phone_number\": \"5550100\",\n  \"phone_numbers\": [\n    {\n      \"code\": \"+1\",\n      \"country\": \"US\",\n      \"label\": \"Mobile\",\n      \"number\": \"5550100\"\n    },\n    {\n      \"code\": \"+1\",\n      \"country\": \"US\",\n      \"label\": \"Mobile\",\n      \"number\": \"5550100\"\n    }\n  ],\n  \"pmi\": 1234567890,\n  \"pronouns\": \"They/Them/Their\",\n  \"pronouns_option\": 1,\n  \"timezone\": \"America/Chicago\",\n  \"type\": 2,\n  \"use_pmi\": false,\n  \"vanity_name\": \"My Meeting Room\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=101&remove_tsp_credentials=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "101"
												},
												{
													"key": "remove_tsp_credentials",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `200` \n* A Zoom Room user cannot be updated to a free user type: $userId \n* A Zoom Room user cannot be updated to a no-meeting-license user type: $userId. \n* You cannot update PMI information ",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"cms_user_id\": \"KDcuGIm1QgePTO8WbOqwIQ\",\n  \"company\": \"Example, Inc.\",\n  \"custom_attributes\": {\n    \"key\": \"cbf_cywdkexrtqc73f97gd4w6g\",\n    \"name\": \"A1\",\n    \"value\": \"1\"\n  },\n  \"dept\": \"Developers\",\n  \"first_name\": \"Jill\",\n  \"group_id\": \"RSMaSp8sTEGK0_oamiA2_w\",\n  \"host_key\": \"4692486817\",\n  \"job_title\": \"Developer\",\n  \"language\": \"English\",\n  \"last_name\": \"Chill\",\n  \"location\": \"San Jose\",\n  \"manager\": \"J2oYJ6@YmcNyfqMByN.wvls\",\n  \"phone_country\": \"US\",\n  \"phone_number\": \"5550100\",\n  \"phone_numbers\": [\n    {\n      \"code\": \"+1\",\n      \"country\": \"US\",\n      \"label\": \"Mobile\",\n      \"number\": \"5550100\"\n    },\n    {\n      \"code\": \"+1\",\n      \"country\": \"US\",\n      \"label\": \"Mobile\",\n      \"number\": \"5550100\"\n    }\n  ],\n  \"pmi\": 1234567890,\n  \"pronouns\": \"They/Them/Their\",\n  \"pronouns_option\": 1,\n  \"timezone\": \"America/Chicago\",\n  \"type\": 2,\n  \"use_pmi\": false,\n  \"vanity_name\": \"My Meeting Room\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=101&remove_tsp_credentials=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "101"
												},
												{
													"key": "remove_tsp_credentials",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1001` <br>\nUser does not exist: $userId",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"cms_user_id\": \"KDcuGIm1QgePTO8WbOqwIQ\",\n  \"company\": \"Example, Inc.\",\n  \"custom_attributes\": {\n    \"key\": \"cbf_cywdkexrtqc73f97gd4w6g\",\n    \"name\": \"A1\",\n    \"value\": \"1\"\n  },\n  \"dept\": \"Developers\",\n  \"first_name\": \"Jill\",\n  \"group_id\": \"RSMaSp8sTEGK0_oamiA2_w\",\n  \"host_key\": \"4692486817\",\n  \"job_title\": \"Developer\",\n  \"language\": \"English\",\n  \"last_name\": \"Chill\",\n  \"location\": \"San Jose\",\n  \"manager\": \"J2oYJ6@YmcNyfqMByN.wvls\",\n  \"phone_country\": \"US\",\n  \"phone_number\": \"5550100\",\n  \"phone_numbers\": [\n    {\n      \"code\": \"+1\",\n      \"country\": \"US\",\n      \"label\": \"Mobile\",\n      \"number\": \"5550100\"\n    },\n    {\n      \"code\": \"+1\",\n      \"country\": \"US\",\n      \"label\": \"Mobile\",\n      \"number\": \"5550100\"\n    }\n  ],\n  \"pmi\": 1234567890,\n  \"pronouns\": \"They/Them/Their\",\n  \"pronouns_option\": 1,\n  \"timezone\": \"America/Chicago\",\n  \"type\": 2,\n  \"use_pmi\": false,\n  \"vanity_name\": \"My Meeting Room\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=101&remove_tsp_credentials=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "101"
												},
												{
													"key": "remove_tsp_credentials",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List meeting templates",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/meeting_templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"meeting_templates"
									],
									"variable": [
										{
											"key": "userId",
											"value": "30R7kT7bTIKSNUFEuH_Qlg",
											"description": "(Required) Unique identifier of the user. Retrieve the value of this field by calling the [**List users**](/api-reference/zoom-api/methods#operation/users) API."
										}
									]
								},
								"description": "Use this API to list [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) that are available to be used by a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n**Scopes:** `meeting:read` or `meeting:read:admin`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK** <br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/meeting_templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"meeting_templates"
											],
											"variable": [
												{
													"key": "userId",
													"value": "30R7kT7bTIKSNUFEuH_Qlg",
													"description": "(Required) Unique identifier of the user. Retrieve the value of this field by calling the [**List users**](/api-reference/zoom-api/methods#operation/users) API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"templates\": [\n    {\n      \"id\": \"AdxbhxCzKgSiWAw\",\n      \"name\": \"My meeting template\",\n      \"type\": 1\n    },\n    {\n      \"id\": \"AdxbhxCzKgSiWAw\",\n      \"name\": \"My meeting template\",\n      \"type\": 1\n    }\n  ],\n  \"total_records\": 1\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `3161` <br>\nMeeting hosting and scheduling capabilities are not allowed for your user account.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/meeting_templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"meeting_templates"
											],
											"variable": [
												{
													"key": "userId",
													"value": "30R7kT7bTIKSNUFEuH_Qlg",
													"description": "(Required) Unique identifier of the user. Retrieve the value of this field by calling the [**List users**](/api-reference/zoom-api/methods#operation/users) API."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found** <br>\n**Error Code:** `1001`<br> User not exist: {userId}.<br>\nUser {userId} does not exist or does not belong to this account.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/meeting_templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"meeting_templates"
											],
											"variable": [
												{
													"key": "userId",
													"value": "30R7kT7bTIKSNUFEuH_Qlg",
													"description": "(Required) Unique identifier of the user. Retrieve the value of this field by calling the [**List users**](/api-reference/zoom-api/methods#operation/users) API."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a user's email",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"jchill@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"email"
									],
									"variable": [
										{
											"key": "userId",
											"value": "6dfgdfgdg444447b0egga",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
										}
									]
								},
								"description": "Change a user's [email address](https://support.zoom.us/hc/en-us/articles/201362563-How-Do-I-Change-the-Email-on-My-Account-) on a Zoom account that has managed domain set up. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n* If the Zoom account in which the user belongs has multiple [managed domains](https://support.zoom.us/hc/en-us/articles/203395207-What-is-Managed-Domain-), then the email to be updated **must** match one of the managed domains.\n* A user's email address can **only** be changed for a maximum of 3 times in a day (24 hours).\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* Managed domain must be enabled in the account. \n* The new email address should not already exist in Zoom."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **No Content**<br>\nEmail updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"jchill@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/email",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"email"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Not Found**<br>\n<br>**Error Code:** `200`<br>\nOnly an account administrator can change email.<br>",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"jchill@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/email",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"email"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n<br>**Error Code:** `1001`<br>\nUser does not exist: $email.<br>",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"jchill@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/email",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"email"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List a user's PAC accounts",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/pac",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"pac"
									],
									"variable": [
										{
											"key": "userId",
											"value": "6dfgdfgdg444447b0egga",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
										}
									]
								},
								"description": "Use this API to list a user's [Personal Audio Conference (PAC)](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) accounts. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n PAC allows Pro or higher account holders to host meetings through PSTN (phone dial-in) only. \n\n **Scopes:** `pac:read:admin`, `pac:read` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* A Pro or higher plan with an [Audio Conferencing](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) subscription. \n* The [**Personal Audio Conference**](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference#h_01F5BPM447M6QDJXX50RSFXKJ3) setting enabled in the user's profile."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\nPAC account list returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/pac",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"pac"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"pac_accounts\": [\n    {\n      \"conference_id\": 111111,\n      \"dedicated_dial_in_number\": [\n        {\n          \"country\": \"USA\",\n          \"number\": \"5550110\"\n        },\n        {\n          \"country\": \"USA\",\n          \"number\": \"5550110\"\n        }\n      ],\n      \"global_dial_in_numbers\": [\n        {\n          \"country\": \"USA\",\n          \"number\": \"5550100\"\n        },\n        {\n          \"country\": \"USA\",\n          \"number\": \"5550100\"\n        }\n      ],\n      \"listen_only_password\": \"3c2b1a\",\n      \"participant_password\": \"a1b2c3\"\n    },\n    {\n      \"conference_id\": 111111,\n      \"dedicated_dial_in_number\": [\n        {\n          \"country\": \"USA\",\n          \"number\": \"5550110\"\n        },\n        {\n          \"country\": \"USA\",\n          \"number\": \"5550110\"\n        }\n      ],\n      \"global_dial_in_numbers\": [\n        {\n          \"country\": \"USA\",\n          \"number\": \"5550100\"\n        },\n        {\n          \"country\": \"USA\",\n          \"number\": \"5550100\"\n        }\n      ],\n      \"listen_only_password\": \"3c2b1a\",\n      \"participant_password\": \"a1b2c3\"\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `2024` <br>\nUser does not have PAC enabled.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/pac",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"pac"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1001` <br>\nUser does not exist: $userId",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/pac",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"pac"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a user's password",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"if42!LfH@\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"password"
									],
									"variable": [
										{
											"key": "userId",
											"value": "6dfgdfgdg444447b0egga",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
										}
									]
								},
								"description": "Update the [password](https://support.zoom.us/hc/en-us/articles/206344385-Change-a-User-s-Password) of a user using which the user can login to Zoom. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nAfter this request is processed successfully, an email notification will be sent to the user stating that the password was changed.<br>\n**Scopes:** `user:write:admin` `user:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n**Prerequisites:**<br>\n* Owner or admin of the Zoom account."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **OK**<br>\nPassword updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"if42!LfH@\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"password"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br><br> **Error Code:** `300` <br>Your new password can not match the old password.<br>This password cannot be changed because it has already been changed the maximum number of times over the past 24 hours.<br>",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"if42!LfH@\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"password"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"if42!LfH@\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"password"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get user permissions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"permissions"
									],
									"variable": [
										{
											"key": "userId",
											"value": "6dfgdfgdg444447b0egga",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
										}
									]
								},
								"description": "Use this API to get permissions that have been granted to the user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nUsers can be assigned a set of permissions that allows them to access only the pages/information that a user needs to view or edit.\n\n**Scopes:** `user:read:admin`, `user:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nUser permissions returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/permissions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"permissions"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"permissions\": [\n    \"Branding:Edit\",\n    \"Branding:Edit\"\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/permissions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"permissions"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a user's presence status",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"duration\": 1000,\n  \"status\": \"Presenting\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/presence_status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"presence_status"
									],
									"variable": [
										{
											"key": "userId",
											"value": "KDcuGIm1QgePTO8WbOqwIQ",
											"description": "(Required) "
										}
									]
								},
								"description": "Use this API to update a user's presence status. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nA user's status **cannot** be updated more than once per minute. For example, you can only submit a maximum of one update request per minute for a single user.\n\nUsers in the Zoom desktop client and mobile apps are assigned with a [presence status](https://support.zoom.us/hc/en-us/articles/360032554051-Status-Icons). The presence status informs users of their contact's availability. Users can also change their own presence status to one the following:\n* **Away**\n* **Do not disturb**\n* **Available**\n* **In a calendar event**\n* **Presenting**\n* **In a Zoom meeting**\n* **On a call**\n\nNote that a user's presence status **cannot** be updated via this API if the user is not logged in to the Zoom client.\n\n**Scopes:** `user:write`, `user:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` <br>\nStatus updated successfully.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"duration\": 1000,\n  \"status\": \"Presenting\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/presence_status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"presence_status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "KDcuGIm1QgePTO8WbOqwIQ",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `5301` <br>\nRequest to update the presence status of this user failed. \n\n**Error Code:** `5411` <br>\nUnauthorized request. You do not have permission to update the presence status of this user",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"duration\": 1000,\n  \"status\": \"Presenting\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/presence_status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"presence_status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "KDcuGIm1QgePTO8WbOqwIQ",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1001` <br>\nUser does not exist: {userId}",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"duration\": 1000,\n  \"status\": \"Presenting\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/presence_status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"presence_status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "KDcuGIm1QgePTO8WbOqwIQ",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `429` <br>\n* Too many requests submitted to update the presence status of this user. Please wait for the request to be processed and try again later.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"duration\": 1000,\n  \"status\": \"Presenting\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/presence_status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"presence_status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "KDcuGIm1QgePTO8WbOqwIQ",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List all recordings",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/recordings?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&mc=false&trash=false&from=2020-06-30&to=2020-06-30&trash_type=meeting_recordings&meeting_id=6840331990",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"recordings"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "mc",
											"value": "false",
											"description": "Query Metadata of Recording if an On-Premise Meeting Connector was used for the meeting."
										},
										{
											"key": "trash",
											"value": "false",
											"description": "Query trash.\n`true`: List recordings from trash.<br> `false`: Do not list recordings from the trash.<br> The default value is `false`. If you set it to `true`, you can use the `trash_type` property to indicate the type of Cloud recording that you need to retrieve. "
										},
										{
											"key": "from",
											"value": "2020-06-30",
											"description": "The start date in 'yyyy-mm-dd' UTC format for the date range for which you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. For example, if you make the API request on June 30, 2020, without providing the “from” and “to” parameters, by default the value of 'from' field will be “2020-06-30” and the value of the 'to' field will be “2020-07-01”. \n\n**Note**: The \"trash\" files cannot be filtered by date range and thus, the \"from\" and \"to\" fields should not be used for trash files."
										},
										{
											"key": "to",
											"value": "2020-06-30",
											"description": "End date in 'yyyy-mm-dd' 'yyyy-mm-dd' UTC format. "
										},
										{
											"key": "trash_type",
											"value": "meeting_recordings",
											"description": "The type of Cloud recording that you would like to retrieve from the trash. The value can be one of the following:<br>\n    `meeting_recordings`: List all meeting recordings from the trash.<br>\n    `recording_file`: List all individual recording files from the trash. "
										},
										{
											"key": "meeting_id",
											"value": "6840331990",
											"description": "The meeting ID."
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "6dfgdfgdg444447b0egga",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
										}
									]
								},
								"description": "Use this API to list all [cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> To access a user's password protected cloud recording, add an <code>access_token</code> parameter to the download URL and provide either the <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app\">JWT</a> or the user's OAuth access token as the value of the <code>access_token</code> parameter.</p>\n\nWhen a user records a meeting or a webinar by choosing the **Record to the Cloud** option, the video, audio, and chat text are recorded in the Zoom cloud.\n\n**Scopes:** `recording:read:admin`, `recording:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* Pro or a higher plan.\n* Cloud Recording must be enabled on the user's account."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nList of recording objects returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/recordings?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&mc=false&trash=false&from=2020-06-30&to=2020-06-30&trash_type=meeting_recordings&meeting_id=6840331990",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"recordings"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "mc",
													"value": "false"
												},
												{
													"key": "trash",
													"value": "false"
												},
												{
													"key": "from",
													"value": "2020-06-30"
												},
												{
													"key": "to",
													"value": "2020-06-30"
												},
												{
													"key": "trash_type",
													"value": "meeting_recordings"
												},
												{
													"key": "meeting_id",
													"value": "6840331990"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"from\": \"2022-01-01\",\n  \"to\": \"2022-04-01\",\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"total_records\": 1,\n  \"meetings\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser {userId} not exist or not belong to this account.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/recordings?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&mc=false&trash=false&from=2020-06-30&to=2020-06-30&trash_type=meeting_recordings&meeting_id=6840331990",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"recordings"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "mc",
													"value": "false"
												},
												{
													"key": "trash",
													"value": "false"
												},
												{
													"key": "from",
													"value": "2020-06-30"
												},
												{
													"key": "to",
													"value": "2020-06-30"
												},
												{
													"key": "trash_type",
													"value": "meeting_recordings"
												},
												{
													"key": "meeting_id",
													"value": "6840331990"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update user status",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"activate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"status"
									],
									"variable": [
										{
											"key": "userId",
											"value": "6dfgdfgdg444447b0egga",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
										}
									]
								},
								"description": "Use this API to [deactivate](https://support.zoom.us/hc/en-us/articles/115005269946-Remove-User-from-your-Account#h_6a9bc1c3-d739-4945-b1f2-00b3b88fb5cc) an active user or to [reactivate](https://support.zoom.us/hc/en-us/articles/115005269946-Remove-User-from-your-Account#h_16319724-d120-4be6-af5d-31582d134ea0) a deactivated user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nAn account owner or admins can deactivate as well as activate a user in a Zoom account. Deactivating a user will remove all licenses associated with a user. It will prevent the deactivated user from logging into their Zoom account. A deactivated user can be reactivated. Reactivating a user grants the user access to login to their Zoom account.\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"activate\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204`<br>\nStatus updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"activate\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room and Admin users' status cannot be activated or deactivated.<br><br>\n**Error Code:** `300`<br>\nYou cannot deactivate this user because the user has an upcoming Zoom Eve",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"activate\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"activate\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List webinar templates",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/webinar_templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"webinar_templates"
									],
									"variable": [
										{
											"key": "userId",
											"value": "abcD3ojfdbjfg",
											"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value."
										}
									]
								},
								"description": "Use this API to list a user's [webinar templates](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates). For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\nWhen you schedule a webinar, you can save the settings for that webinar as a template for scheduling future webinars.  To use a template when scheduling a webinar, use the `id` value in this API response in the `template_id` field of the [**Create a webinar**](/api-reference/zoom-api/methods#operation/webinarCreate) API. \n\n**Scopes:** `webinar:read`, `webinar:read:admin` \n\n**Prerequisites:** \n* A Pro or a higher account with the [Zoom Webinar plan](https://zoom.us/pricing/webinar)."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK** <br>\nList of existing templates returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/webinar_templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"webinar_templates"
											],
											"variable": [
												{
													"key": "userId",
													"value": "abcD3ojfdbjfg",
													"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"templates\": [\n    {\n      \"id\": \"ull6574eur\",\n      \"name\": \"Weekly Meeting Template\"\n    },\n    {\n      \"id\": \"ull6574eur\",\n      \"name\": \"Weekly Meeting Template\"\n    }\n  ],\n  \"total_records\": 1\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n**Error Code:** `200`<br> Cannot use webinar API, you need to subscribe webinar plan and then enable webinar for this user:{userId}.<br>\n**Error Code:** `1001`<br>\n* User not exist: {userId}.\n* User {userId",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/webinar_templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"webinar_templates"
											],
											"variable": [
												{
													"key": "userId",
													"value": "abcD3ojfdbjfg",
													"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List users",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?status=active&page_size=30&role_id=0&page_number=1&include_fields=custom_attributes&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "status",
									"value": "active",
									"description": "The user's status: \n* `active` — An active user. \n* `inactive` — A deactivated user. \n* `pending` — A pending user.\n\nThis value defaults to `active`."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "role_id",
									"value": "0",
									"description": "The role's unique ID. Use this parameter to filter the response by a specific role. You can use the [**List roles**](/api-reference/zoom-api/methods#operation/roles) API to get a role's unique ID value."
								},
								{
									"key": "page_number",
									"value": "1",
									"description": "The page number of the current page in the returned records."
								},
								{
									"key": "include_fields",
									"value": "custom_attributes",
									"description": "Use this parameter to display one of the following attributes in the API call's response: \n* `custom_attributes` — Return the user's custom attributes. \n* `host_key` — Return the user's [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key)."
								},
								{
									"key": "next_page_token",
									"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "Use this API to list your account's users. \n\n**Scopes:** `user:read:admin` \n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nUser list returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?status=active&page_size=30&role_id=0&page_number=1&include_fields=custom_attributes&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "role_id",
											"value": "0"
										},
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "include_fields",
											"value": "custom_attributes"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"next_page_token\": \"8V8HigQkzm2O5r9RUn31D9ZyJHgrmFfbLa2\",\n  \"page_count\": 100,\n  \"page_number\": 1,\n  \"page_size\": 30,\n  \"total_records\": 8482,\n  \"users\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"type\": 1,\n      \"created_at\": \"2019-06-01T07:58:03Z\",\n      \"custom_attributes\": [\n        {\n          \"key\": \"cbf_cywdkexrtqc73f97gd4w6g\",\n          \"name\": \"A1\",\n          \"value\": \"2323\"\n        },\n        {\n          \"key\": \"cbf_cywdkexrtqc73f97gd4w6g\",\n          \"name\": \"A1\",\n          \"value\": \"2323\"\n        }\n      ],\n      \"dept\": \"Developers\",\n      \"employee_unique_id\": \"HqDyI037Qjili1kNsSIrIg\",\n      \"first_name\": \"Jill\",\n      \"group_ids\": [\n        \"t-_-d56CSWG-7BF15LLrOw\",\n        \"t-_-d56CSWG-7BF15LLrOw\"\n      ],\n      \"host_key\": \"299492849\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\",\n      \"im_group_ids\": [\n        \"t-_-d56CSWG-7BF15LLrOw\",\n        \"t-_-d56CSWG-7BF15LLrOw\"\n      ],\n      \"last_client_version\": \"5.2.45120.0906(win)\",\n      \"last_login_time\": \"2022-03-25T05:40:55Z\",\n      \"last_name\": \"Chill\",\n      \"plan_united_type\": \"0\",\n      \"pmi\": 6589310093,\n      \"role_id\": \"0\",\n      \"status\": \"active\",\n      \"timezone\": \"Asia/Shanghai\",\n      \"verified\": 1\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"type\": 1,\n      \"created_at\": \"2019-06-01T07:58:03Z\",\n      \"custom_attributes\": [\n        {\n          \"key\": \"cbf_cywdkexrtqc73f97gd4w6g\",\n          \"name\": \"A1\",\n          \"value\": \"2323\"\n        },\n        {\n          \"key\": \"cbf_cywdkexrtqc73f97gd4w6g\",\n          \"name\": \"A1\",\n          \"value\": \"2323\"\n        }\n      ],\n      \"dept\": \"Developers\",\n      \"employee_unique_id\": \"HqDyI037Qjili1kNsSIrIg\",\n      \"first_name\": \"Jill\",\n      \"group_ids\": [\n        \"t-_-d56CSWG-7BF15LLrOw\",\n        \"t-_-d56CSWG-7BF15LLrOw\"\n      ],\n      \"host_key\": \"299492849\",\n      \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\",\n      \"im_group_ids\": [\n        \"t-_-d56CSWG-7BF15LLrOw\",\n        \"t-_-d56CSWG-7BF15LLrOw\"\n      ],\n      \"last_client_version\": \"5.2.45120.0906(win)\",\n      \"last_login_time\": \"2022-03-25T05:40:55Z\",\n      \"last_name\": \"Chill\",\n      \"plan_united_type\": \"0\",\n      \"pmi\": 6589310093,\n      \"role_id\": \"0\",\n      \"status\": \"active\",\n      \"timezone\": \"Asia/Shanghai\",\n      \"verified\": 1\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Create users",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"create\",\n  \"user_info\": {\n    \"email\": \"jchill@example.com\",\n    \"type\": 1,\n    \"first_name\": \"Jill\",\n    \"last_name\": \"Chill\",\n    \"password\": \"if42!LfH@\",\n    \"feature\": {\n      \"zoom_phone\": true\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Use this API to add a new user to your Zoom account. \n\n**Scopes:** `user:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Note:** The following rate limits apply when you use the `create` value for the `action` field: \n* 50 requests per day for **Free** accounts. \n* 1,500 requests per day for **Pro** accounts. \n* 10,000 requests per day for **Business+** accounts. \n\n**Prerequisites:** \n* A Pro or higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `201`<br>\nUser created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"create\",\n  \"user_info\": {\n    \"email\": \"jchill@example.com\",\n    \"type\": 1,\n    \"first_name\": \"Jill\",\n    \"last_name\": \"Chill\",\n    \"password\": \"if42!LfH@\",\n    \"feature\": {\n      \"zoom_phone\": true\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"id\": \"KDcuGIm1QgePTO8WbOqwIQ\",\n  \"last_name\": \"Chill\",\n  \"type\": 1\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` <br> Bad Request \n\n **Error Code:** `300` <br> Invalid parameter: password \n\n **Error Code:** `200` <br> No privilege. <br> No permission, please contact Zoom customer support. \n\n **Error Code:** `1000` <br> The user cannot be ",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"create\",\n  \"user_info\": {\n    \"email\": \"jchill@example.com\",\n    \"type\": 1,\n    \"first_name\": \"Jill\",\n    \"last_name\": \"Chill\",\n    \"password\": \"if42!LfH@\",\n    \"feature\": {\n      \"zoom_phone\": true\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `4130` <br>\nGroup does not exist: $groupId \n\n**Error Code:** `1102` <br>\nYou cannot enable the \"Zoom Phone\" feature because you do not have any available licenses.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"create\",\n  \"user_info\": {\n    \"email\": \"jchill@example.com\",\n    \"type\": 1,\n    \"first_name\": \"Jill\",\n    \"last_name\": \"Chill\",\n    \"password\": \"if42!LfH@\",\n    \"feature\": {\n      \"zoom_phone\": true\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `409` <br>\nUser with that email already exists. \n\n**Error Code:** `1005` <br>\n Email \"$email\" has already been used.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"create\",\n  \"user_info\": {\n    \"email\": \"jchill@example.com\",\n    \"type\": 1,\n    \"first_name\": \"Jill\",\n    \"last_name\": \"Chill\",\n    \"password\": \"if42!LfH@\",\n    \"feature\": {\n      \"zoom_phone\": true\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `429` <br>\nYou have exceeded the daily rate limit ({0}) of user invite requests permitted for this account. You may resume these requests at GMT 00:00:00.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"create\",\n  \"user_info\": {\n    \"email\": \"jchill@example.com\",\n    \"type\": 1,\n    \"first_name\": \"Jill\",\n    \"last_name\": \"Chill\",\n    \"password\": \"if42!LfH@\",\n    \"feature\": {\n      \"zoom_phone\": true\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Check a user email",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/email?email=jchill@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"email"
							],
							"query": [
								{
									"key": "email",
									"value": "jchill@example.com",
									"description": "(Required) The email address to be verified."
								}
							]
						},
						"description": "Verify if a user's email is registered with Zoom.<br><br>\n\n<b>Note: </b>You can successfully check if a user is a registered Zoom user only if the user **signed up for Zoom via email and is within your account.** If you provide an email address of a user who is not in your account, the value of \"existed_email\" parameter will be \"false\" irrespective of whether or not the user is registered with Zoom. The response of this API call will not include users who joined Zoom using options such as \"Sign in with SSO\", \"Sign in with Google\" or \"Sign in with Facebook\" even if they are in the same account as yours.\n\n**Scopes:** `user:read:admin` `user:read`\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSuccess.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/email?email=jchill@example.com",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"email"
									],
									"query": [
										{
											"key": "email",
											"value": "jchill@example.com"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"existed_email\": true\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request** <br><br>\n**Error Code:** `300`<br> Email is required.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/email?email=jchill@example.com",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"email"
									],
									"query": [
										{
											"key": "email",
											"value": "jchill@example.com"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/email?email=jchill@example.com",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"email"
									],
									"query": [
										{
											"key": "email",
											"value": "jchill@example.com"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get user's ZAK",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/me/zak",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"me",
								"zak"
							]
						},
						"description": "Get the Zoom Access Token (ZAK) for the authenticated user associated with the access token in the API request. You can use a ZAK to start or join a meeting on behalf of this user.\n\nZAKs obtained with this endpoint expire five minutes after receipt.\n\nTo get a ZAK for a different user or with a different expiration, use the [Get a user token](https://marketplace.zoom.us/docs/api-reference/zoom-api/methods#operation/userToken) API with the `zak` `type` query parameter.\n\nSee [Getting a Zoom Access Token (ZAK)](https://marketplace.zoom.us/docs/sdk/native-sdks/auth#generating-zoom-access-token-zak) for details.\n\n**Scope:** `user_zak:read`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/me/zak",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me",
										"zak"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"eyJ0eXAiOiJKV1QiLCJzdiI6IjAwM\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `404` <br>\n\n**Error Code:** `1001`<br>\nUser not exist.<br>\nUser {userId} does not exist or does not belong to this account.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/me/zak",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me",
										"zak"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Check a user's PM room",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/vanity_name?vanity_name=Jill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"vanity_name"
							],
							"query": [
								{
									"key": "vanity_name",
									"value": "Jill",
									"description": "(Required) Personal meeting room name."
								}
							]
						},
						"description": "A personal meeting room is a virtual meeting room that can be permanently assigned to a user.\nUse this API to check if a personal meeting room with the given name exists or not.<br><br>\n**Scopes:** `user:read:admin` `user:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` "
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSuccess.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/vanity_name?vanity_name=Jill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"vanity_name"
									],
									"query": [
										{
											"key": "vanity_name",
											"value": "Jill"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"existed\": false\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `300`<br>Vanity name is required.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/vanity_name?vanity_name=Jill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"vanity_name"
									],
									"query": [
										{
											"key": "vanity_name",
											"value": "Jill"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "meetings",
			"item": [
				{
					"name": "{meeting Id}",
					"item": [
						{
							"name": "registrants",
							"item": [
								{
									"name": "{registrant Id}",
									"item": [
										{
											"name": "Get a meeting registrant",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														":registrantId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														},
														{
															"key": "registrantId",
															"value": "9tboDiHUQAeOnbmudzWa5g",
															"description": "(Required) The registrant ID."
														}
													]
												},
												"description": "Use this API to get details on a specific user who has registered for the meeting. A host or a user with administrative permissions can require [registration for Zoom meetings](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).\n\n**Scopes:** `meeting:read:admin`, `meeting:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* The account must have a Meeting plan"
											},
											"response": [
												{
													"name": "Success.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"registrants",
																":registrantId"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																},
																{
																	"key": "registrantId",
																	"value": "9tboDiHUQAeOnbmudzWa5g",
																	"description": "(Required) The registrant ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"id\": \"9tboDiHUQAeOnbmudzWa5g\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"country\": \"US\",\n  \"custom_questions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"last_name\": \"Chill\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"phone\": \"5550100\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"state\": \"CA\",\n  \"status\": \"approved\",\n  \"zip\": \"94045\",\n  \"create_time\": \"2022-03-22T05:58:44Z\",\n  \"join_url\": \"https://example.com/j/11111\"\n}"
												},
												{
													"name": "**Error Code:** `300`<br>Meeting \"{meetingId}\" is not valid or has expired.\nThis meeting has not set required registration: \"{meetingId}\"",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"registrants",
																":registrantId"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																},
																{
																	"key": "registrantId",
																	"value": "9tboDiHUQAeOnbmudzWa5g",
																	"description": "(Required) The registrant ID."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400`<br>**Error Code:** `1010`\nUser does not belong to this account: \"{accountId}\"<br>**Error Code:** `3003`\nYou are not the meeting host.<br>**Error Code:** `3000`>\nCannot access meeting info. \n\n **Error Code:** `3161` <br>\nMeeting",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"registrants",
																":registrantId"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																},
																{
																	"key": "registrantId",
																	"value": "9tboDiHUQAeOnbmudzWa5g",
																	"description": "(Required) The registrant ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`\nMeeting not found.<br>**Error Code:** `1001`<br>\nMeeting host does not exist: \"{userId}\"",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"registrants",
																":registrantId"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																},
																{
																	"key": "registrantId",
																	"value": "9tboDiHUQAeOnbmudzWa5g",
																	"description": "(Required) The registrant ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete a meeting registrant",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId?occurrence_id=approved",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "approved",
															"description": "The meeting occurrence ID."
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "91498058927",
															"description": "(Required) The meeting ID."
														},
														{
															"key": "registrantId",
															"value": "9tboDiHUQAeOnbmudzWa5g",
															"description": "(Required) The meeting registrant ID."
														}
													]
												},
												"description": "Delete a meeting registrant.<br><br>\n**Scopes**: `meeting:write:admin` `meeting:write`<br>\n <br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
											},
											"response": [
												{
													"name": "**HTTP status code:** `204` <br>\nOK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId?occurrence_id=approved",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"registrants",
																":registrantId"
															],
															"query": [
																{
																	"key": "occurrence_id",
																	"value": "approved"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "91498058927",
																	"description": "(Required) The meeting ID."
																},
																{
																	"key": "registrantId",
																	"value": "9tboDiHUQAeOnbmudzWa5g",
																	"description": "(Required) The meeting registrant ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP status code:** `400` <br>\nBad Request<br>\n\n**Error code:** `200`<br>\nOnly available for paid users: {0}.<br>\n\n**Error code:** `300`<br>\nThe value that you entered for the Registrant ID field is invalid. Enter a valid value and try again.<br>\n\n**Err",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId?occurrence_id=approved",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"registrants",
																":registrantId"
															],
															"query": [
																{
																	"key": "occurrence_id",
																	"value": "approved"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "91498058927",
																	"description": "(Required) The meeting ID."
																},
																{
																	"key": "registrantId",
																	"value": "9tboDiHUQAeOnbmudzWa5g",
																	"description": "(Required) The meeting registrant ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "questions",
									"item": [
										{
											"name": "List registration questions ",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												},
												"description": "List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).<br>\n\n**Scopes:** `meeting:read`, `meeting:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nMeeting Registrant Question object returned",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"registrants",
																"questions"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"custom_questions\": [\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    },\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    }\n  ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `3161` <br>\nMeeting hosting and scheduling capabilities are not allowed for your user account.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"registrants",
																"questions"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\nMeeting not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"registrants",
																"questions"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update registration questions",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"custom_questions\": [\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    },\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												},
												"description": "Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).<br><br>\n**Scopes:** `meeting:write`, `meeting:write:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n \n\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204`<br>\nMeeting Registrant Questions Updated",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"custom_questions\": [\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    },\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"registrants",
																"questions"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `3161` <br>\nMeeting hosting and scheduling capabilities are not allowed for your user account.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"custom_questions\": [\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    },\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"registrants",
																"questions"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\nMeeting not found.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"custom_questions\": [\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    },\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"registrants",
																"questions"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "List meeting registrants",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_id=1648194360000&status=pending&page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000",
													"description": "The meeting or webinar occurrence ID."
												},
												{
													"key": "status",
													"value": "pending",
													"description": "Query by the registrant's status: \n* `pending` — The registration is pending. \n* `approved` — The registrant is approved. \n* `denied` — The registration is denied."
												},
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												},
												{
													"key": "page_number",
													"value": "1",
													"description": "**Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination."
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										},
										"description": "A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). Use this API to list users that have registered for a meeting.<br><br>\n**Scopes**: `meeting:read:admin` `meeting:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nSuccessfully listed meeting registrants.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_id=1648194360000&status=pending&page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648194360000"
														},
														{
															"key": "status",
															"value": "pending"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"next_page_token\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"page_count\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"page_number\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"page_size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"total_records\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"registrants\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
										},
										{
											"name": "**Error Code:** `300`<br>\nMeeting {meetingId} is not found or has expired.<br>\nThis meeting has not set registration as required: {meetingId}.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_id=1648194360000&status=pending&page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648194360000"
														},
														{
															"key": "status",
															"value": "pending"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.<br>\n**Error Code:** `3003`<br>\nYou are not the meeting host.<br>\n**Error Code:** `3000`<br>\nCannot access meeting info. \n\n **Error Code:** `3161`",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_id=1648194360000&status=pending&page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648194360000"
														},
														{
															"key": "status",
															"value": "pending"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nMeeting not found.<br>\n**Error Code:** `1001`<br>\nMeeting host does not exist: {userId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_id=1648194360000&status=pending&page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648194360000"
														},
														{
															"key": "status",
															"value": "pending"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a meeting registrant",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"last_name\": \"Chill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"state\": \"CA\",\n  \"zip\": \"94045\",\n  \"country\": \"US\",\n  \"phone\": \"5550100\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"custom_questions\": [\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"language\": \"en-US\",\n  \"auto_approve\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_ids=1648194360000,1648367160000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "1648194360000,1648367160000",
													"description": "A comma-separated list of meeting occurrence IDs. You can get this value with the [Get a meeting](/api-reference/zoom-api/methods#operation/meeting) API."
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										},
										"description": "Use this API to create and submit a user's registration to a meeting. Note that there is a maximum limit of 4,999 registrants per meeting and users will see an error if the meeting's capacity is reached. \n\n **Scopes:** `meeting:write:admin`, `meeting:write` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* The host must be a **Licensed** user type."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201` <br>\nMeeting registration created.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"last_name\": \"Chill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"state\": \"CA\",\n  \"zip\": \"94045\",\n  \"country\": \"US\",\n  \"phone\": \"5550100\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"custom_questions\": [\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"language\": \"en-US\",\n  \"auto_approve\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_ids=1648194360000,1648367160000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants"
													],
													"query": [
														{
															"key": "occurrence_ids",
															"value": "1648194360000,1648367160000"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 85746065,\n  \"join_url\": \"https://example.com/j/11111\",\n  \"registrant_id\": \"fdgsfh2ey82fuh\",\n  \"start_time\": \"2021-07-13T21:44:51Z\",\n  \"topic\": \"My Meeting\",\n  \"occurrences\": [\n    {\n      \"duration\": 60,\n      \"occurrence_id\": \"1648194360000\",\n      \"start_time\": \"2022-03-25T07:46:00Z\",\n      \"status\": \"available\"\n    },\n    {\n      \"duration\": 60,\n      \"occurrence_id\": \"1648194360000\",\n      \"start_time\": \"2022-03-25T07:46:00Z\",\n      \"status\": \"available\"\n    }\n  ]\n}"
										},
										{
											"name": "**Error Code:** `300` <br>\nMeeting \"{meetingId}\" not found or has expired.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"last_name\": \"Chill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"state\": \"CA\",\n  \"zip\": \"94045\",\n  \"country\": \"US\",\n  \"phone\": \"5550100\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"custom_questions\": [\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"language\": \"en-US\",\n  \"auto_approve\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_ids=1648194360000,1648367160000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants"
													],
													"query": [
														{
															"key": "occurrence_ids",
															"value": "1648194360000,1648367160000"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n**Error Code:** `1010` <br>\nUser does not belong to this account: {accountId} \n\n**Error Code:** `3003` <br>\nYou are not the meeting host. \n\n**Error Code:** `3043` <br>\nMeeting has reached maximum attendee ca",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"last_name\": \"Chill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"state\": \"CA\",\n  \"zip\": \"94045\",\n  \"country\": \"US\",\n  \"phone\": \"5550100\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"custom_questions\": [\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"language\": \"en-US\",\n  \"auto_approve\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_ids=1648194360000,1648367160000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants"
													],
													"query": [
														{
															"key": "occurrence_ids",
															"value": "1648194360000,1648367160000"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` \n* Meeting not found. \n*Registration has not been enabled for this meeting: {meetingId} \n\n**Error Code:** `1001` <br>\n Meeting host does not exist: {userId}",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"last_name\": \"Chill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"state\": \"CA\",\n  \"zip\": \"94045\",\n  \"country\": \"US\",\n  \"phone\": \"5550100\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"custom_questions\": [\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"language\": \"en-US\",\n  \"auto_approve\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_ids=1648194360000,1648367160000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants"
													],
													"query": [
														{
															"key": "occurrence_ids",
															"value": "1648194360000,1648367160000"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `429` <br>\n You have exceeded the daily rate limit of \"{0}\" for **Add meeting registrant** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"last_name\": \"Chill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"state\": \"CA\",\n  \"zip\": \"94045\",\n  \"country\": \"US\",\n  \"phone\": \"5550100\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"custom_questions\": [\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"language\": \"en-US\",\n  \"auto_approve\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_ids=1648194360000,1648367160000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants"
													],
													"query": [
														{
															"key": "occurrence_ids",
															"value": "1648194360000,1648367160000"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update registrant's status",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants/status?occurrence_id=1648194360000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000",
													"description": "The meeting or webinar occurrence ID."
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										},
										"description": "Update a meeting registrant's status by either approving, cancelling or denying a registrant from joining the meeting.<br><br>\n**Scopes:** `meeting:write:admin` `meeting:write`\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nRegistrant status updated.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/status?occurrence_id=1648194360000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														"status"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648194360000"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Error Code:** `300`<br>\nThis meeting has not set registration as required:{meetingId}.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/status?occurrence_id=1648194360000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														"status"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648194360000"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.<br>\n**Error Code:** `3000`<br>\nCannot access meeting information.<br>\n**Error Code:** `3003`<br>\nYou're not the meeting host. \n\n **Error Code:** ",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/status?occurrence_id=1648194360000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														"status"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648194360000"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nMeeting or registrant not found.\n**Error Code:** `1001`<br>\nUser does not exist: {userId}.<br>\n",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/status?occurrence_id=1648194360000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														"status"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648194360000"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `429`<br>\nYou have exceeded the daily rate limit of \"{0}\" for meeting **Update registrant's status** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/status?occurrence_id=1648194360000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														"status"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648194360000"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "polls",
							"item": [
								{
									"name": "{poll Id}",
									"item": [
										{
											"name": "Get a meeting poll",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														},
														{
															"key": "pollId",
															"value": "QalIoKWLTJehBJ8e1xRrbQ",
															"description": "(Required) The poll ID"
														}
													]
												},
												"description": "Polls allow the meeting host to survey attendees. Use this API to get information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).<br><br>\n**Scopes**: `meeting:read:admin` `meeting:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200` <br>\nMeeting Poll object returned",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"polls",
																":pollId"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																},
																{
																	"key": "pollId",
																	"value": "QalIoKWLTJehBJ8e1xRrbQ",
																	"description": "(Required) The poll ID"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n  \"status\": \"notstart\",\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br> Meeting polls disabled. To enable this feature, enable the \"Meeting Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface. \n\n **Error Code:** `3161` <br>\nMeeting ",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"polls",
																":pollId"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																},
																{
																	"key": "pollId",
																	"value": "QalIoKWLTJehBJ8e1xRrbQ",
																	"description": "(Required) The poll ID"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**Error Code:** `404` <br>\nMeeting Poll not found.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"polls",
																":pollId"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																},
																{
																	"key": "pollId",
																	"value": "QalIoKWLTJehBJ8e1xRrbQ",
																	"description": "(Required) The poll ID"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update a meeting poll",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														},
														{
															"key": "pollId",
															"value": "QalIoKWLTJehBJ8e1xRrbQ",
															"description": "(Required) The poll ID"
														}
													]
												},
												"description": "Polls allow the meeting host to survey attendees. Use this API to update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)<br><br>\n**Scopes**: `meeting:write:admin` `meeting:write`\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` <br>\nMeeting Poll Updated",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"polls",
																":pollId"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																},
																{
																	"key": "pollId",
																	"value": "QalIoKWLTJehBJ8e1xRrbQ",
																	"description": "(Required) The poll ID"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br>\n* Meeting polls disabled. To enable this feature, enable the \"Meeting Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface. \n* Advanced meeting polls disabled. T",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"polls",
																":pollId"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																},
																{
																	"key": "pollId",
																	"value": "QalIoKWLTJehBJ8e1xRrbQ",
																	"description": "(Required) The poll ID"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**Error Code:** `404` <br>\nMeeting Poll not found",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"polls",
																":pollId"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																},
																{
																	"key": "pollId",
																	"value": "QalIoKWLTJehBJ8e1xRrbQ",
																	"description": "(Required) The poll ID"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete a meeting poll",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														},
														{
															"key": "pollId",
															"value": "QalIoKWLTJehBJ8e1xRrbQ",
															"description": "(Required) The poll ID"
														}
													]
												},
												"description": "Polls allow the meeting host to survey attendees. Use this API to delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).<br>\n**Scopes**: `meeting:write:admin` `meeting:write`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` <br>\n**Prerequisites**:<br>\n* Host user type must be **Pro**.\n* Polling feature should be enabled in the host's account.\n* Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` <br>\nMeeting Poll deleted",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"polls",
																":pollId"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																},
																{
																	"key": "pollId",
																	"value": "QalIoKWLTJehBJ8e1xRrbQ",
																	"description": "(Required) The poll ID"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br> Meeting polls disabled. To enable this feature, enable the \"Meeting Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface. \n\n **Error Code:** `3161` <br>\nMeeting ",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"polls",
																":pollId"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																},
																{
																	"key": "pollId",
																	"value": "QalIoKWLTJehBJ8e1xRrbQ",
																	"description": "(Required) The poll ID"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**Error Code:** `404`\nMeeting Poll not found",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"polls",
																":pollId"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																},
																{
																	"key": "pollId",
																	"value": "QalIoKWLTJehBJ8e1xRrbQ",
																	"description": "(Required) The poll ID"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "List meeting polls",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/polls?anonymous=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"polls"
											],
											"query": [
												{
													"key": "anonymous",
													"value": "true",
													"description": "Whether to query for polls with the **Anonymous** option enabled: \n* `true` — Query for polls with the **Anonymous** option enabled. \n* `false` — Do not query for polls with the **Anonymous** option enabled."
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										},
										"description": "Polls allow the meeting host to survey attendees. Use this API to list [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.<br><br>\n\n**Scopes**: `meeting:read:admin` `meeting:read`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites**:<br>\n* Host user type must be **Pro** or higher plan.\n* Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** <br>\nList polls of a Meeting  returned",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls?anonymous=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls"
													],
													"query": [
														{
															"key": "anonymous",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"polls\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"status\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"status\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"total_records\": 1\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br> Meeting polls disabled. To enable this feature, enable the \"Meeting Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface. \n\n **Error Code:** `3161` <br>\nMeeting ",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls?anonymous=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls"
													],
													"query": [
														{
															"key": "anonymous",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Error Code:** `404`\nMeeting Poll not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls?anonymous=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls"
													],
													"query": [
														{
															"key": "anonymous",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create a meeting poll",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"polls"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										},
										"description": "Polls allow the meeting host to survey attendees. Use this API to create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.<br><br>\n\n**Scopes**: `meeting:write:admin` `meeting:write`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites**:<br>\n* Host user type must be **Pro** or higher plan.\n* Polling feature must be enabled in the host's account.\n* Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201` <br>\nMeeting Poll Created",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n  \"status\": \"notstart\",\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br>\n* Meeting polls disabled. To enable this feature, enable the \"Meeting Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface. \n* Advanced meeting polls disabled. T",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Error Code:** `404` <br>\nMeeting not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "survey",
							"item": [
								{
									"name": "Get a meeting survey",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/survey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"survey"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										},
										"description": "Use this API to return information about a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting). \n\n **Scopes:** `meeting:read`, `meeting:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* The host must be a **Pro** user type. \n* The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature enabled in the host's account. \n* The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\n Meeting survey object returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/survey",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"survey"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"custom_survey\": {\n    \"anonymous\": false,\n    \"questions\": [\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  },\n  \"show_in_the_browser\": true,\n  \"third_party_survey\": \"https://example.com\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` <br> Bad Request \n\n **Error Code:** `300` <br>\n Invalid meeting ID. \n\n **Error Code:** `3000` <br>\n * Cannot access Webinar information. <br>\n * Meeting survey disabled. To enable this feature, enable the \"Meeting Survey\" setti",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/survey",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"survey"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br> Not Found \n\n **Error Code:** `300` <br>\n Meeting ID does not exist. \n\n **Error Code:** `3001` <br>\n Meeting does not exist: {meetingId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/survey",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"survey"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a meeting survey",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"custom_survey\": {\n    \"anonymous\": false,\n    \"questions\": [\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  },\n  \"show_in_the_browser\": true,\n  \"third_party_survey\": \"https://example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/survey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"survey"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										},
										"description": "Use this API to update a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting). \n\n **Scopes:** `meeting:write`, `meeting:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* The host must be a **Pro** user type. \n* The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature enabled in the host's account. \n* The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` <br>\n Meeting survey updated.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"custom_survey\": {\n    \"anonymous\": false,\n    \"questions\": [\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  },\n  \"show_in_the_browser\": true,\n  \"third_party_survey\": \"https://example.com\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/survey",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"survey"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br> Bad Request \n\n **Error Code:** `300` <br>\n * Invalid meeting ID. <br>\n * Invalid third party survey: {third_party_survey}. \n\n **Error Code:** `3000` <br>\n * Cannot access Webinar information. <br>\n * Meeting survey disable",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"custom_survey\": {\n    \"anonymous\": false,\n    \"questions\": [\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  },\n  \"show_in_the_browser\": true,\n  \"third_party_survey\": \"https://example.com\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/survey",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"survey"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br> Not Found \n\n **Error Code:** `300` <br>\n Meeting ID does not exist. \n\n **Error Code:** `3001` <br>\n Meeting does not exist: {meetingId}.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"custom_survey\": {\n    \"anonymous\": false,\n    \"questions\": [\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  },\n  \"show_in_the_browser\": true,\n  \"third_party_survey\": \"https://example.com\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/survey",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"survey"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a meeting survey",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/survey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"survey"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										},
										"description": "Use this API to delete a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting). \n\n **Scopes:** `meeting:write`, `meeting:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* The host must be a **Pro** user type. \n* The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature enabled in the host's account. \n* The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` <br>\n Meeting survey deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/survey",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"survey"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br> Bad Request \n\n **Error Code:** `300` <br>\n Invalid meeting ID. \n\n **Error Code:** `3000` <br>\n * Cannot access Webinar information. <br>\n * Meeting survey disabled. To enable this feature, enable the \"Meeting Survey\" setti",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/survey",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"survey"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br> Not Found \n\n **Error Code:** `300` <br>\n Meeting ID does not exist. \n\n **Error Code:** `3001` <br>\n Meeting does not exist: {meetingId}.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/survey",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"survey"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "livestream",
							"item": [
								{
									"name": "Get livestream details",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "93398114182",
													"description": "(Required) Unique identifier of the meeting."
												}
											]
										},
										"description": "Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to get a meeting's livestream configuration details such as Stream URL, Stream Key and Page URL.<br><br>\n**Prerequisites:**<br>\n* Meeting host must be a licensed user with a Pro or higher plan.<br>\n* Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.<br><br>\n**Scopes:** `meeting:read:admin` `meeting:read`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` **OK**<br>\nLive Stream details returned.\n\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"livestream"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "93398114182",
															"description": "(Required) Unique identifier of the meeting."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"page_url\": \"https://example.com/livestream/123\",\n  \"stream_key\": \"contact-ic@example.com\",\n  \"stream_url\": \"https://example.com/livestream\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br>\nMissing meetingId<br>\nInvalid meetingId<br><br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId} \n\n **Error Code:** `3161` <br>\nMeeting hosting and sched",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"livestream"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "93398114182",
															"description": "(Required) Unique identifier of the meeting."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist.\n\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"livestream"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "93398114182",
															"description": "(Required) Unique identifier of the meeting."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a livestream",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"stream_url\": \"https://example.com/livestream\",\n  \"stream_key\": \"contact-it@example.com\",\n  \"page_url\": \"https://example.com/livestream/123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										},
										"description": "Use this API to update a meeting's livestream information. Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.\n\n**Scopes:** `meeting:write:admin`, `meeting:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* Meeting host must have a Pro license."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nMeeting livestream updated.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"stream_url\": \"https://example.com/livestream\",\n  \"stream_key\": \"contact-it@example.com\",\n  \"page_url\": \"https://example.com/livestream/123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"livestream"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Error Code:** `300` <br>Missing meetingId <br> Invalid meetingId.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"stream_url\": \"https://example.com/livestream\",\n  \"stream_key\": \"contact-it@example.com\",\n  \"page_url\": \"https://example.com/livestream/123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"livestream"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400`<br>**Error Code:** `1010` <br>\n User does not belong to this account: {accountId}.<br>\n **Error Code:** `3000` Cannot access webinar info. \n\n **Error Code:** `3161` <br>\nMeeting hosting and scheduling capabilities are not allow",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"stream_url\": \"https://example.com/livestream\",\n  \"stream_key\": \"contact-it@example.com\",\n  \"page_url\": \"https://example.com/livestream/123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"livestream"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>**Error Code:** `1001` <br>User {userId} does not exist.\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"stream_url\": \"https://example.com/livestream\",\n  \"stream_key\": \"contact-it@example.com\",\n  \"page_url\": \"https://example.com/livestream/123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"livestream"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update Live Stream Status",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"start\",\n  \"settings\": {\n    \"active_speaker_name\": true,\n    \"display_name\": \"Jill Chill\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										},
										"description": "Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update the status of a meeting's livestream.<br><br>\n**Prerequisites:**<br>\n* Meeting host must have a Pro license.<br>\n**Scopes:** `meeting:write:admin` `meeting:write`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` <br>\nMeeting livestream updated.\n\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"start\",\n  \"settings\": {\n    \"active_speaker_name\": true,\n    \"display_name\": \"Jill Chill\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/livestream/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"livestream",
														"status"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Error Code:** `300` <br>\nMissing meetingId.<br>\nInvalid meetingId",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"start\",\n  \"settings\": {\n    \"active_speaker_name\": true,\n    \"display_name\": \"Jill Chill\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/livestream/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"livestream",
														"status"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\n**Error Code:**`3000`<br>\nCannot access webinar info.<br>\n**Error Code:**`1010`<br>User does not belong to this account: {accountId}. \n\n **Error Code:** `3161` <br>\nMeeting hosting and scheduling capabilities are not allow",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"start\",\n  \"settings\": {\n    \"active_speaker_name\": true,\n    \"display_name\": \"Jill Chill\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/livestream/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"livestream",
														"status"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\n**Error Code:**`1001`<br>\nUser {userId} does not exist.<br>\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"start\",\n  \"settings\": {\n    \"active_speaker_name\": true,\n    \"display_name\": \"Jill Chill\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/livestream/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"livestream",
														"status"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `429`<br>Too many requests submitted to start the livestream of this meeting: {meetingId}. If the livestream has not already started, retry making a new request after 30 seconds.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"start\",\n  \"settings\": {\n    \"active_speaker_name\": true,\n    \"display_name\": \"Jill Chill\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/livestream/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"livestream",
														"status"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "recordings",
							"item": [
								{
									"name": "registrants",
									"item": [
										{
											"name": "questions",
											"item": [
												{
													"name": "Get registration questions",
													"request": {
														"auth": {
															"type": "oauth2"
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"registrants",
																"questions"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "atsXxhSEQWit9t+U02HXNQ==",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																}
															]
														},
														"description": "For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.\n\nUse this API to retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.<br>\n**Scopes:** `recording:read:admin`, `recording:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
													},
													"response": [
														{
															"name": "**HTTP Status Code:** `200`<br>\nRecording Registrant Question object returned.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/questions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"meetings",
																		":meetingId",
																		"recordings",
																		"registrants",
																		"questions"
																	],
																	"variable": [
																		{
																			"key": "meetingId",
																			"value": "atsXxhSEQWit9t+U02HXNQ==",
																			"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"custom_questions\": [\n    {\n      \"answers\": [\n        \"Yes\",\n        \"Yes\"\n      ],\n      \"required\": true,\n      \"title\": \"What's your name?\",\n      \"type\": \"short\"\n    },\n    {\n      \"answers\": [\n        \"Yes\",\n        \"Yes\"\n      ],\n      \"required\": true,\n      \"title\": \"What's your name?\",\n      \"type\": \"short\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    }\n  ]\n}"
														},
														{
															"name": "**HTTP Status Code:** `404`<br>\nMeeting recording or registrant not found.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/questions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"meetings",
																		":meetingId",
																		"recordings",
																		"registrants",
																		"questions"
																	],
																	"variable": [
																		{
																			"key": "meetingId",
																			"value": "atsXxhSEQWit9t+U02HXNQ==",
																			"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Update registration questions",
													"request": {
														"auth": {
															"type": "oauth2"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"custom_questions\": [\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"What's your name?\",\n      \"type\": \"short\"\n    },\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"What's your name?\",\n      \"type\": \"short\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"registrants",
																"questions"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "atsXxhSEQWit9t+U02HXNQ==",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																}
															]
														},
														"description": "For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.\n\nUse this API to update registration questions that are to be answered by users while registering to view a recording.<br>\n**Scopes:** `recording:write:admin`, `recording:write`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n"
													},
													"response": [
														{
															"name": "**HTTP Status Code:** `200`<br>\nRecording Registrant Questions Updated",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"custom_questions\": [\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"What's your name?\",\n      \"type\": \"short\"\n    },\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"What's your name?\",\n      \"type\": \"short\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    }\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/questions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"meetings",
																		":meetingId",
																		"recordings",
																		"registrants",
																		"questions"
																	],
																	"variable": [
																		{
																			"key": "meetingId",
																			"value": "atsXxhSEQWit9t+U02HXNQ==",
																			"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "**HTTP Status Code:** `404`<br>\nMeeting recording or Registrant not found",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"custom_questions\": [\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"What's your name?\",\n      \"type\": \"short\"\n    },\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"What's your name?\",\n      \"type\": \"short\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    }\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/questions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"meetings",
																		":meetingId",
																		"recordings",
																		"registrants",
																		"questions"
																	],
																	"variable": [
																		{
																			"key": "meetingId",
																			"value": "atsXxhSEQWit9t+U02HXNQ==",
																			"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "List recording registrants",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants?status=pending&page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"registrants"
													],
													"query": [
														{
															"key": "status",
															"value": "pending",
															"description": "Query by the registrant's status: \n* `pending` — The registration is pending. \n* `approved` — The registrant is approved. \n* `denied` — The registration is denied."
														},
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														},
														{
															"key": "page_number",
															"value": "1",
															"description": "**Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination."
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												},
												"description": "Use this API to list registrants of a past meeting's [on-demand cloud recordings](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-recordings). Users must [register](/api-reference/zoom-api/methods#operation/meetingRecordingRegistrantCreate) to view the recordings. \n\n **Scopes:** `recording:read:admin`, `recording:read` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200` <br>\n Registrants returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants?status=pending&page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"registrants"
															],
															"query": [
																{
																	"key": "status",
																	"value": "pending"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "page_number",
																	"value": "1"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"next_page_token\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"page_count\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"page_number\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"page_size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"total_records\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"registrants\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `404` <br>\n Meeting recording not found.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants?status=pending&page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"registrants"
															],
															"query": [
																{
																	"key": "status",
																	"value": "pending"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "page_number",
																	"value": "1"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create a recording registrant",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"country\": \"US\",\n  \"custom_questions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"last_name\": \"Chill\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"phone\": \"5550100\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"state\": \"CA\",\n  \"status\": \"approved\",\n  \"zip\": \"94045\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"registrants"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												},
												"description": "Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](/api-reference/zoom-api/methods#operation/meetingRecordingRegistrantCreate) to view these recordings.\n\nUse this API to register a user to gain access to **On-demand Cloud Recordings** of a past meeting.<br>\n**Scopes:** `recording:write:admin`, `recording:write`.<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `201` <br>\nRegistration submitted.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"country\": \"US\",\n  \"custom_questions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"last_name\": \"Chill\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"phone\": \"5550100\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"state\": \"CA\",\n  \"status\": \"approved\",\n  \"zip\": \"94045\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"registrants"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": 6840331990,\n  \"registrant_id\": \"3Z7sEm0TQQieLav3c3OD_g\",\n  \"share_url\": \"https://example.com/recording/share/Qg75t7xZBtEbAkjdlgbfdngBBBB\",\n  \"topic\": \"My Personal Meeting Room\"\n}"
												},
												{
													"name": "**HTTP Status Code:** `404` <br>\nMeeting recording not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"country\": \"US\",\n  \"custom_questions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"last_name\": \"Chill\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"phone\": \"5550100\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"state\": \"CA\",\n  \"status\": \"approved\",\n  \"zip\": \"94045\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"registrants"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update registrant's status",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"id\": \"3Z7sEm0TQQieLav3c3OD_g\"\n    },\n    {\n      \"id\": \"3Z7sEm0TQQieLav3c3OD_g\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"registrants",
														"status"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "85746065",
															"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
														}
													]
												},
												"description": "A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording. \nUse this API to update a registrant's status.\n\n**Scopes:** `recording:write:admin`, `recording:write`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204`<br>\nRegistrant status updated.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"id\": \"3Z7sEm0TQQieLav3c3OD_g\"\n    },\n    {\n      \"id\": \"3Z7sEm0TQQieLav3c3OD_g\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"registrants",
																"status"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\nMeeting recording or Registrant not found",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"id\": \"3Z7sEm0TQQieLav3c3OD_g\"\n    },\n    {\n      \"id\": \"3Z7sEm0TQQieLav3c3OD_g\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"registrants",
																"status"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `429` <br> You have exceeded the daily rate limit of \"{0}\" for cloud recording **Update registrant's status** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"id\": \"3Z7sEm0TQQieLav3c3OD_g\"\n    },\n    {\n      \"id\": \"3Z7sEm0TQQieLav3c3OD_g\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"registrants",
																"status"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "85746065",
																	"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
																}
															]
														}
													},
													"status": "Too Many Requests",
													"code": 429,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "settings",
									"item": [
										{
											"name": "Get meeting recording settings",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"settings"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "atsXxhSEQWit9t+U02HXNQ==",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												},
												"description": "Retrieve settings applied to a meeting's [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).<br><br>\n**Scopes**: `recording:read:admin` `recording:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` <br>"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200` <br>\nMeeting recording settings returned",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/settings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"settings"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "atsXxhSEQWit9t+U02HXNQ==",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"approval_type\": 1,\n  \"authentication_domains\": \"test.com\",\n  \"authentication_option\": \"auth_option\",\n  \"on_demand\": true,\n  \"password\": \"975193018\",\n  \"recording_authentication\": true,\n  \"send_email_to_host\": true,\n  \"share_recording\": \"publicly\",\n  \"show_social_share_buttons\": true,\n  \"topic\": \"My Personal Meeting Room\",\n  \"viewer_download\": true\n}"
												},
												{
													"name": "**HTTP Status Code:** `404` <br>\nMeeting recording not found.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/settings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"settings"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "atsXxhSEQWit9t+U02HXNQ==",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update meeting recording settings",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"approval_type\": 1,\n  \"authentication_domains\": \"test.com\",\n  \"authentication_option\": \"auth_option\",\n  \"on_demand\": true,\n  \"password\": \"975193018\",\n  \"recording_authentication\": true,\n  \"send_email_to_host\": true,\n  \"share_recording\": \"publicly\",\n  \"show_social_share_buttons\": true,\n  \"topic\": \"My Personal Meeting Room\",\n  \"viewer_download\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"settings"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "atsXxhSEQWit9t+U02HXNQ==",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												},
												"description": "Update settings applied to a meeting's [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording)<br><br>\n**Scopes**: `recording:write:admin` `recording:write`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` <br>"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` <br>\nMeeting recording setting's updated",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"approval_type\": 1,\n  \"authentication_domains\": \"test.com\",\n  \"authentication_option\": \"auth_option\",\n  \"on_demand\": true,\n  \"password\": \"975193018\",\n  \"recording_authentication\": true,\n  \"send_email_to_host\": true,\n  \"share_recording\": \"publicly\",\n  \"show_social_share_buttons\": true,\n  \"topic\": \"My Personal Meeting Room\",\n  \"viewer_download\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/settings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"settings"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "atsXxhSEQWit9t+U02HXNQ==",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` <br>\nMeeting recording not found. ",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"approval_type\": 1,\n  \"authentication_domains\": \"test.com\",\n  \"authentication_option\": \"auth_option\",\n  \"on_demand\": true,\n  \"password\": \"975193018\",\n  \"recording_authentication\": true,\n  \"send_email_to_host\": true,\n  \"share_recording\": \"publicly\",\n  \"show_social_share_buttons\": true,\n  \"topic\": \"My Personal Meeting Room\",\n  \"viewer_download\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/settings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"settings"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "atsXxhSEQWit9t+U02HXNQ==",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "{recording Id}",
									"item": [
										{
											"name": "Delete a meeting recording file",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId?action=trash",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														":recordingId"
													],
													"query": [
														{
															"key": "action",
															"value": "trash",
															"description": "The recording delete actions:<br>`trash` - Move recording to trash.<br>`delete` - Delete recording permanently."
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "atsXxhSEQWit9t+U02HXNQ==",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														},
														{
															"key": "recordingId",
															"value": "a2f19f96-9294-4f51-8134-6f0eea108eb2",
															"description": "(Required) The recording ID."
														}
													]
												},
												"description": "Delete a specific recording file from a meeting.<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> To use this API, you must enable the <b>The host can delete cloud recordings</b> setting. You can find this setting in the <b>Recording</b> tab of the <b>Settings</b> interface in the [Zoom web portal](https://zoom.us/).</p>\n\n**Scopes**: `recording:write:admin`, `recording:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200` <br>\nRecording deleted. \n\n**Error Code:** `200`<br>\nYou do not have the right permissions.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId?action=trash",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																":recordingId"
															],
															"query": [
																{
																	"key": "action",
																	"value": "trash"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "atsXxhSEQWit9t+U02HXNQ==",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																},
																{
																	"key": "recordingId",
																	"value": "a2f19f96-9294-4f51-8134-6f0eea108eb2",
																	"description": "(Required) The recording ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `204` <br>\nMeeting recording file deleted.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId?action=trash",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																":recordingId"
															],
															"query": [
																{
																	"key": "action",
																	"value": "trash"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "atsXxhSEQWit9t+U02HXNQ==",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																},
																{
																	"key": "recordingId",
																	"value": "a2f19f96-9294-4f51-8134-6f0eea108eb2",
																	"description": "(Required) The recording ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` <br> **Error Code:** `1010` <br>\nUser does not belong to this account: {accountId}.<br> \n**Error Code:** `3303` <br>\nYou can not delete an uncompleted meeting.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId?action=trash",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																":recordingId"
															],
															"query": [
																{
																	"key": "action",
																	"value": "trash"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "atsXxhSEQWit9t+U02HXNQ==",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																},
																{
																	"key": "recordingId",
																	"value": "a2f19f96-9294-4f51-8134-6f0eea108eb2",
																	"description": "(Required) The recording ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` <br>\nMeeting recording file not found<br>\n**Error Code:** `1001` <br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3301` <br> There is no recording for this meeting.\n",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId?action=trash",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																":recordingId"
															],
															"query": [
																{
																	"key": "action",
																	"value": "trash"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "atsXxhSEQWit9t+U02HXNQ==",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																},
																{
																	"key": "recordingId",
																	"value": "a2f19f96-9294-4f51-8134-6f0eea108eb2",
																	"description": "(Required) The recording ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Recover a single recording",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"recover\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														":recordingId",
														"status"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "atsXxhSEQWit9t+U02HXNQ==",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														},
														{
															"key": "recordingId",
															"value": "a2f19f96-9294-4f51-8134-6f0eea108eb2",
															"description": "(Required) The recording ID."
														}
													]
												},
												"description": "Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover a single recording file from the meeting.<br>\n**Scopes:** `recording:write:admin` `recording:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` <br> Meeting recording recovered.\n\n",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"action\": \"recover\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																":recordingId",
																"status"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "atsXxhSEQWit9t+U02HXNQ==",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																},
																{
																	"key": "recordingId",
																	"value": "a2f19f96-9294-4f51-8134-6f0eea108eb2",
																	"description": "(Required) The recording ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` <br>\n**Error Code:** `1010` <br>\nUser does not belong to this account: {accountId}.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"action\": \"recover\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																":recordingId",
																"status"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "atsXxhSEQWit9t+U02HXNQ==",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																},
																{
																	"key": "recordingId",
																	"value": "a2f19f96-9294-4f51-8134-6f0eea108eb2",
																	"description": "(Required) The recording ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` <br>Meeting recording not found.<br>\n**Error Code:** `1001` <br> User {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3301`There is no recording for this meeting.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"action\": \"recover\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																":recordingId",
																"status"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "atsXxhSEQWit9t+U02HXNQ==",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																},
																{
																	"key": "recordingId",
																	"value": "a2f19f96-9294-4f51-8134-6f0eea108eb2",
																	"description": "(Required) The recording ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Delete meeting recordings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings?action=trash",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings"
											],
											"query": [
												{
													"key": "action",
													"value": "trash",
													"description": "The recording delete actions:<br>`trash` - Move recording to trash.<br>`delete` - Delete recording permanently."
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "atsXxhSEQWit9t+U02HXNQ==",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										},
										"description": "Delete all recording files of a meeting.<br><br>\n\n**Scopes:** `recording:write:admin` `recording:write`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites**:\n* Cloud Recording should be enabled on the user's account.<br>\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\nRecordings deleted. \n\n**Error Code:** `200` <br>\nYou do not have the right permission.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings?action=trash",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings"
													],
													"query": [
														{
															"key": "action",
															"value": "trash"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "atsXxhSEQWit9t+U02HXNQ==",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `204` <br>\nMeeting recording deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings?action=trash",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings"
													],
													"query": [
														{
															"key": "action",
															"value": "trash"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "atsXxhSEQWit9t+U02HXNQ==",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings?action=trash",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings"
													],
													"query": [
														{
															"key": "action",
															"value": "trash"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "atsXxhSEQWit9t+U02HXNQ==",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nMeeting recording not found\n**Error Code:** `1001` <br> User {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3301`<br>There is no recording for this meeting.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings?action=trash",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings"
													],
													"query": [
														{
															"key": "action",
															"value": "trash"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "atsXxhSEQWit9t+U02HXNQ==",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get meeting recordings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings?include_fields=a2f19f96-9294-4f51-8134-6f0eea108eb2&ttl=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings"
											],
											"query": [
												{
													"key": "include_fields",
													"value": "a2f19f96-9294-4f51-8134-6f0eea108eb2",
													"description": "The `download_access_token` value for downloading the meeting's recordings."
												},
												{
													"key": "ttl",
													"value": "1",
													"description": "The `download_access_token` Time to Live (TTL) value. This parameter is only valid if the `include_fields` query parameter contains the `download_access_token` value."
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "atsXxhSEQWit9t+U02HXNQ==",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										},
										"description": "Use this API to return all of a meeting's [recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording#h_7420acb5-1897-4061-87b4-5b76e99c03b4). The recording files can be downloaded via the `download_url` property listed in the response. \n\n To access a password-protected cloud recording, add an `access_token` parameter to the download URL and provide OAuth access token or [JWT](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app) as the `access_token` value. \n\n **Scopes:** `recording:read:admin`, `recording:read` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\nRecording object returned. \n\n**Error Code:** `200` <br>\nYou do not have the right permissions.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings?include_fields=a2f19f96-9294-4f51-8134-6f0eea108eb2&ttl=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings"
													],
													"query": [
														{
															"key": "include_fields",
															"value": "a2f19f96-9294-4f51-8134-6f0eea108eb2"
														},
														{
															"key": "ttl",
															"value": "1"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "atsXxhSEQWit9t+U02HXNQ==",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"account_id\": \"Cx3wERazSgup7ZWRHQM8-w\",\n  \"duration\": 20,\n  \"host_id\": \"_0ctZtY0REqWalTmwvrdIw\",\n  \"id\": 6840331990,\n  \"recording_count\": 22,\n  \"start_time\": \"2021-03-18T05:41:36Z\",\n  \"topic\": \"My Personal Meeting\",\n  \"total_size\": 22,\n  \"type\": \"4\",\n  \"uuid\": \"BOKXuumlTAGXuqwr3bLyuQ==\",\n  \"recording_files\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"download_access_token\": \"abJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJodHRwczovL2V2ZW50Lnpvb20udXMiLCJhY2NvdW50SWQiOiJNdDZzdjR1MFRBeVBrd2dzTDJseGlBIiwiYXVkIjoiaHR0cHM6Ly9vYXV0aC56b29tLnVzIiwibWlkIjoieFp3SEc0c3BRU2VuekdZWG16dnpiUT09IiwiZXhwIjoxNjI2MTM5NTA3LCJ1c2VySWQiOiJEWUhyZHBqclMzdWFPZjdkUGtrZzh3In0.a6KetiC6BlkDhf1dP4KBGUE1bb2brMeraoD45yhFx0eSSSTFdkHQnsKmlJQ-hdo9Zy-4vQw3rOxlyoHv583JyZ\",\n  \"password\": \"981651\",\n  \"participant_audio_files\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `1010` <br>\nUser not found on this account: {accountId}",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings?include_fields=a2f19f96-9294-4f51-8134-6f0eea108eb2&ttl=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings"
													],
													"query": [
														{
															"key": "include_fields",
															"value": "a2f19f96-9294-4f51-8134-6f0eea108eb2"
														},
														{
															"key": "ttl",
															"value": "1"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "atsXxhSEQWit9t+U02HXNQ==",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nMeeting recording not found. \n\n**Error Code:** `1001` <br>\nUser \"{userId}\" does not exist or does not belong to this account. \n\n**Error Code:** `3301` <br>\nThere is no recording for this meeting.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings?include_fields=a2f19f96-9294-4f51-8134-6f0eea108eb2&ttl=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings"
													],
													"query": [
														{
															"key": "include_fields",
															"value": "a2f19f96-9294-4f51-8134-6f0eea108eb2"
														},
														{
															"key": "ttl",
															"value": "1"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "atsXxhSEQWit9t+U02HXNQ==",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Delete a meeting",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId?schedule_for_reminder=true&cancel_meeting_reminder=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000",
											"disabled": true
										},
										{
											"key": "schedule_for_reminder",
											"value": "true"
										},
										{
											"key": "cancel_meeting_reminder",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": null
										}
									]
								},
								"description": "Delete a meeting.<br><br>\n**Scopes:** `meeting:write:admin` `meeting:write`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code**: `204` <br>\nMeeting deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=1648194360000&schedule_for_reminder=true&cancel_meeting_reminder=Excepteur ",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												},
												{
													"key": "schedule_for_reminder",
													"value": "true"
												},
												{
													"key": "cancel_meeting_reminder",
													"value": "Excepteur "
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code**: `400` <br>\n**Error Code**: `1010` <br>\nUser does not belong to this account: {accountId}.<br>\n**Error Code**: `3000` <br>Cannot access meeting information.<br>Invalid occurrence_id.<br>\n**Error Code**: `3002` <br>\nSorry, you cannot d",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=1648194360000&schedule_for_reminder=true&cancel_meeting_reminder=Excepteur ",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												},
												{
													"key": "schedule_for_reminder",
													"value": "true"
												},
												{
													"key": "cancel_meeting_reminder",
													"value": "Excepteur "
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code**: `404` <br>\nMeeting not found.\n**Error Code**: `1001` <br>\nUser does not exist: {userId}.<br>\n**Error Code**: `3001` <br>\nMeeting with this {meetingId} is not found or has expired.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=1648194360000&schedule_for_reminder=true&cancel_meeting_reminder=Excepteur ",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												},
												{
													"key": "schedule_for_reminder",
													"value": "true"
												},
												{
													"key": "cancel_meeting_reminder",
													"value": "Excepteur "
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a meeting",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=1648194360000&show_previous_occurrences=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000",
											"description": "Meeting Occurrence ID. Provide this field to view meeting details of a particular occurrence of the [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings)."
										},
										{
											"key": "show_previous_occurrences",
											"value": "true",
											"description": "Set the value of this field to `true` if you would like to view meeting details of all previous occurrences of a [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings). "
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "85746065",
											"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
										}
									]
								},
								"description": "Retrieve the details of a meeting.<br><br>\n**Scopes:** `meeting:read:admin` `meeting:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeeting object returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=1648194360000&show_previous_occurrences=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												},
												{
													"key": "show_previous_occurrences",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"assistant_id\": \"kFFvsJc-Q1OSxaJQLvaa_A\",\n  \"host_email\": \"jchill@example.com\",\n  \"host_id\": \"30R7kT7bTIKSNUFEuH_Qlg\",\n  \"id\": 97763643886,\n  \"uuid\": \"aDYlohsHRtCd4ii1uC2+hA==\",\n  \"agenda\": \"My Meeting\",\n  \"created_at\": \"2022-03-25T07:29:29Z\",\n  \"duration\": 60,\n  \"encrypted_password\": \"8pEkRweVXPV3Ob2KJYgFTRlDtl1gSn.1\",\n  \"h323_password\": \"123456\",\n  \"join_url\": \"https://example.com/j/11111\",\n  \"occurrences\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"password\": \"123456\",\n  \"pmi\": \"97891943927\",\n  \"pre_schedule\": false,\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"settings\": {\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com;thill@example.com\",\n    \"alternative_hosts_email_notification\": true,\n    \"alternative_host_update_polls\": true,\n    \"approval_type\": 0,\n    \"approved_or_denied_countries_or_regions\": {\n      \"approved_list\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"denied_list\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"method\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_exception\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"authentication_name\": \"Sign in to Zoom\",\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"breakout_room\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"rooms\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"calendar_type\": 1,\n    \"close_registration\": false,\n    \"cn_meeting\": false,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"custom_keys\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"email_notification\": true,\n    \"encryption_type\": \"enhanced_encryption\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"focus_mode\": true,\n    \"global_dial_in_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"global_dial_in_numbers\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"host_video\": true,\n    \"in_meeting\": false,\n    \"jbh_time\": 0,\n    \"join_before_host\": true,\n    \"language_interpretation\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"interpreters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"meeting_authentication\": true,\n    \"mute_upon_entry\": false,\n    \"participant_video\": false,\n    \"private_meeting\": false,\n    \"registrants_confirmation_email\": true,\n    \"registrants_email_notification\": true,\n    \"registration_type\": 1,\n    \"show_share_button\": true,\n    \"use_pmi\": false,\n    \"waiting_room\": false,\n    \"watermark\": false\n  },\n  \"start_time\": \"2022-03-25T07:29:29Z\",\n  \"start_url\": \"https://example.com/s/11111\",\n  \"status\": \"waiting\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Meeting\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\",\n      \"visible\": true\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\",\n      \"visible\": true\n    }\n  ],\n  \"type\": 2\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser not found on this account: {accountId}.<br>**Error Code:** `3000`<br>\nCannot access webinar info. \n\n **Error Code:** `3161` <br>\nMeeting hosting and scheduling capabilities are not allowed fo",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=1648194360000&show_previous_occurrences=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												},
												{
													"key": "show_previous_occurrences",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting not found.<br>\n**Error Code:** `1001`<br>\nUser not exist: {userId}.<br>**Error Code:** `3001`<br>\nMeeting {meetingId} is not found or has expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=1648194360000&show_previous_occurrences=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												},
												{
													"key": "show_previous_occurrences",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a meeting",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"schedule_for\": \"jchill@example.com\",\n  \"agenda\": \"My Meeting\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"pre_schedule\": false,\n  \"recurrence\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"settings\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"start_time\": \"2022-03-25T07:29:29Z\",\n  \"template_id\": \"5Cj3ceXoStO6TGOVvIOVPA==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Meeting\",\n  \"tracking_fields\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"type\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=1648194360000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000",
											"description": "Meeting occurrence id. Support change of agenda, start_time, duration, settings: {host_video, participant_video, join_before_host, mute_upon_entry, waiting_room, watermark, auto_recording}"
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "85746065",
											"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
										}
									]
								},
								"description": "Use this API to update a meeting's details.\n\n**Note:** \n* This API has a rate limit of **100 requests per day**. Because of this, a meeting can only be updated for a maximum of **100 times within a 24-hour period**. \n* The `start_time` value **must** be a future date. If the value is omitted or a date in the past, the API ignores this value and will **not** update any recurring meetings. \n* If the `start_time` value is a future date, the `recurrence` object is **required**.\n\n**Scopes:** `meeting:write:admin`, `meeting:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nMeeting updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"schedule_for\": \"jchill@example.com\",\n  \"agenda\": \"My Meeting\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"pre_schedule\": false,\n  \"recurrence\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"settings\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"start_time\": \"2022-03-25T07:29:29Z\",\n  \"template_id\": \"5Cj3ceXoStO6TGOVvIOVPA==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Meeting\",\n  \"tracking_fields\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"type\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=1648194360000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300`<br>\nInvalid enforce_login_domains, separate multiple domains by semicolon.<br>\nA maximum of {rateLimitNumber} meetings can be created/updated for a single user in one day.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"schedule_for\": \"jchill@example.com\",\n  \"agenda\": \"My Meeting\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"pre_schedule\": false,\n  \"recurrence\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"settings\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"start_time\": \"2022-03-25T07:29:29Z\",\n  \"template_id\": \"5Cj3ceXoStO6TGOVvIOVPA==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Meeting\",\n  \"tracking_fields\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"type\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=1648194360000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser not found on this account: {accountId}.<br>\n**Error Code:** `3000`<br>\nCannot access meeting information.<br>\n**Error Code:** `3003`<br>\nYou are not the meeting host.<br>\n**Error Code:** `300",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"schedule_for\": \"jchill@example.com\",\n  \"agenda\": \"My Meeting\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"pre_schedule\": false,\n  \"recurrence\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"settings\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"start_time\": \"2022-03-25T07:29:29Z\",\n  \"template_id\": \"5Cj3ceXoStO6TGOVvIOVPA==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Meeting\",\n  \"tracking_fields\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"type\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=1648194360000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting not found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: {userId}.<br>\n**Error Code:** `3001`<br>\nA meeting with this {meetingId} is not found or has expired.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"schedule_for\": \"jchill@example.com\",\n  \"agenda\": \"My Meeting\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"pre_schedule\": false,\n  \"recurrence\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"settings\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"start_time\": \"2022-03-25T07:29:29Z\",\n  \"template_id\": \"5Cj3ceXoStO6TGOVvIOVPA==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Meeting\",\n  \"tracking_fields\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"type\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=1648194360000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update meeting status",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"recover\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"status"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "85746065",
											"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
										}
									]
								},
								"description": "Update the status of a meeting.<br><br>\n**Scopes:** `meeting:write:admin` `meeting:write`\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nMeeting updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"recover\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.\n**Error Code:** `3000`<br>\nCannot access meeting info.\n**Error Code:** `3003`<br>\nYou're not the meeting host.\n**Error Code:** `3063`<br>\nCan not",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"recover\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting not found.<br>\n**Error Code:** `1001`<br>\nMeeting host does not exist: {userId}.\n\n",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"recover\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create meeting's invite links",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attendees\": [\n    {\n      \"name\": \"Jill Chill\"\n    },\n    {\n      \"name\": \"Jill Chill\"\n    }\n  ],\n  \"ttl\": 1000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/invite_links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"invite_links"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "85746065",
											"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
										}
									]
								},
								"description": "Use this API to create a batch of invitation links for a meeting.\n\n**Scopes**: `meeting:write:admin`, `meeting:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `201` <br>\nMeeting invitation links created.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"attendees\": [\n    {\n      \"name\": \"Jill Chill\"\n    },\n    {\n      \"name\": \"Jill Chill\"\n    }\n  ],\n  \"ttl\": 1000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/invite_links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"invite_links"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"attendees\": [\n    {\n      \"join_url\": \"https://example.com/j/11111\",\n      \"name\": \"Jill Chill\"\n    },\n    {\n      \"join_url\": \"https://example.com/j/11111\",\n      \"name\": \"Jill Chill\"\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `300` <br>\n* Meeting ID does not exist. \n* Invalid meeting ID. \n\n**Error Code:** `3000` <br>\nCannot access webinar information. \n\n**Error Code:** `3001` <br>\nMeeting does not exist: {meetingId",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"attendees\": [\n    {\n      \"name\": \"Jill Chill\"\n    },\n    {\n      \"name\": \"Jill Chill\"\n    }\n  ],\n  \"ttl\": 1000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/invite_links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"invite_links"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get meeting invitation",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/invitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"invitation"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "85746065",
											"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
										}
									]
								},
								"description": "Retrieve the meeting invite note that was sent for a specific meeting.<br><br>\n**Scopes:** `meeting:read:admin` `meeting:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeeting invitation returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/invitation",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"invitation"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"invitation\": \"Jill Chill is inviting you to a scheduled Zoom meeting.\\r\\n\\r\\nTopic: My Meeting\\r\\nTime: Mar 25, 2022 03:32 PM America, Los_Angeles\\r\\n\\r\\nJoin Zoom Meeting\\r\\nhttps://zoom.us/j/55544443210?pwd=8pEkRweVXPV3Ob2KJYgFTRlDtl1gSn.1\\r\\n\\r\\nMeeting ID: 555 4444 3210\\r\\nPasscode: 123456\\r\\nOne tap mobile\\r\\n+5678901234,,55544443210#,,,,*123456# US (gg)\\r\\n\\r\\nDial by your location\\r\\n+1 15550100 US (gg)\\r\\nMeeting ID: 555 4444 3210\\r\\nPasscode: 123456\\r\\nFind your local number: https://zoom.us/u/ab12cdef34jh\\r\\n\\r\\nJoin by SIP\\r\\n5550100@zoomcrc.com\\r\\n\\r\\nJoin by H.323\\r\\n192.0.2.1 (US West)\\r\\nMeeting ID: 555 4444 3210\\r\\nPasscode: 123456\\r\\n\\r\\n\",\n  \"sip_links\": [\n    \"5550100@zoomcrc.com\",\n    \"5550100@zoomcrc.com\"\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `3161` <br>\nMeeting hosting and scheduling capabilities are not allowed for your user account.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/invitation",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"invitation"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Perform batch registration",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"auto_approve\": true,\n  \"registrants\": [\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    },\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/batch_registrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"batch_registrants"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "91498058927",
											"description": "(Required) Unique identifier of the meeting (Meeting Number)."
										}
									]
								},
								"description": "Register up to 30 registrants at once for a meeting that requires [registration](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). <br>\n\n**Prerequisites:**<br>\n* The meeting host must be a Licensed user.\n* The meeting must require registration and should be of type `2`, i.e., they should be scheduled meetings. Instant meetings and Recurring meetings are not supported by this API.<br><br>\n**Scope:** `meeting:write`, `meeting:write:admin`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n\n\n\n\n\n\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK** <br>\nRegistrants added.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"auto_approve\": true,\n  \"registrants\": [\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    },\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/batch_registrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"batch_registrants"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "91498058927",
													"description": "(Required) Unique identifier of the meeting (Meeting Number)."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"join_url\": \"https://example.com/j/11111\",\n      \"registrant_id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"join_url\": \"https://example.com/j/11111\",\n      \"registrant_id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n**Error Code:** `3038`<br>\nMeeting is over, you can not register now. If you have any questions, please contact the Meeting host.<br><br>\n**Error Code:** `303`<br> \nThis API can only be used for scheduled m",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"auto_approve\": true,\n  \"registrants\": [\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    },\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/batch_registrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"batch_registrants"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "91498058927",
													"description": "(Required) Unique identifier of the meeting (Meeting Number)."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found** <br>\n**Error Code:** `3001`<br>\nMeeting does not exist: {meetingId}.<br>\n**Error Code:** `3043`<br>\nMeeting has reached maximum attendee capacity.<br>\n**Error Code:** `404`<br>\nRegistration has not been enabled fo",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"auto_approve\": true,\n  \"registrants\": [\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    },\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/batch_registrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"batch_registrants"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "91498058927",
													"description": "(Required) Unique identifier of the meeting (Meeting Number)."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `429`<br>\nYou have exceeded the daily rate limit of \"{0}\" for meeting **Perform batch registration** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"auto_approve\": true,\n  \"registrants\": [\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    },\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/batch_registrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"batch_registrants"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "91498058927",
													"description": "(Required) Unique identifier of the meeting (Meeting Number)."
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Perform batch poll creation",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"polls\": [\n    {\n      \"anonymous\": false,\n      \"poll_type\": 2,\n      \"questions\": [\n        {\n          \"answer_max_character\": 200,\n          \"answer_min_character\": 1,\n          \"answer_required\": false,\n          \"answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"case_sensitive\": false,\n          \"name\": \"How useful was this meeting?\",\n          \"prompts\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"rating_max_label\": \"Extremely Likely\",\n          \"rating_max_value\": 4,\n          \"rating_min_label\": \"Not likely\",\n          \"rating_min_value\": 1,\n          \"right_answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"show_as_dropdown\": false,\n          \"type\": \"single\"\n        },\n        {\n          \"answer_max_character\": 200,\n          \"answer_min_character\": 1,\n          \"answer_required\": false,\n          \"answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"case_sensitive\": false,\n          \"name\": \"How useful was this meeting?\",\n          \"prompts\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"rating_max_label\": \"Extremely Likely\",\n          \"rating_max_value\": 4,\n          \"rating_min_label\": \"Not likely\",\n          \"rating_min_value\": 1,\n          \"right_answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"show_as_dropdown\": false,\n          \"type\": \"single\"\n        }\n      ],\n      \"title\": \"Learn something new\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/batch_polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"batch_polls"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "93398114182",
											"description": "(Required) "
										}
									]
								},
								"description": "Polls allow the meeting host to survey attendees. Use this API to create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.<br><br>\n\n**Scopes**: `meeting:write:admin` `meeting:write`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites**:<br>\n* Host user type must be **Pro** or higher plan.\n* Polling feature must be enabled in the host's account.\n* Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `201` <br>\nMeeting Poll Created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"polls\": [\n    {\n      \"anonymous\": false,\n      \"poll_type\": 2,\n      \"questions\": [\n        {\n          \"answer_max_character\": 200,\n          \"answer_min_character\": 1,\n          \"answer_required\": false,\n          \"answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"case_sensitive\": false,\n          \"name\": \"How useful was this meeting?\",\n          \"prompts\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"rating_max_label\": \"Extremely Likely\",\n          \"rating_max_value\": 4,\n          \"rating_min_label\": \"Not likely\",\n          \"rating_min_value\": 1,\n          \"right_answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"show_as_dropdown\": false,\n          \"type\": \"single\"\n        },\n        {\n          \"answer_max_character\": 200,\n          \"answer_min_character\": 1,\n          \"answer_required\": false,\n          \"answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"case_sensitive\": false,\n          \"name\": \"How useful was this meeting?\",\n          \"prompts\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"rating_max_label\": \"Extremely Likely\",\n          \"rating_max_value\": 4,\n          \"rating_min_label\": \"Not likely\",\n          \"rating_min_value\": 1,\n          \"right_answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"show_as_dropdown\": false,\n          \"type\": \"single\"\n        }\n      ],\n      \"title\": \"Learn something new\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/batch_polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"batch_polls"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "93398114182",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"polls\": [\n    {\n      \"anonymous\": true,\n      \"id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n      \"poll_type\": 2,\n      \"questions\": [\n        {\n          \"answer_max_character\": 200,\n          \"answer_min_character\": 1,\n          \"answer_required\": false,\n          \"answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"case_sensitive\": false,\n          \"name\": \"How useful was this meeting?\",\n          \"prompts\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"rating_max_label\": \"Extremely Likely\",\n          \"rating_max_value\": 4,\n          \"rating_min_label\": \"Not likely\",\n          \"rating_min_value\": 0,\n          \"right_answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"show_as_dropdown\": false,\n          \"type\": \"single\"\n        },\n        {\n          \"answer_max_character\": 200,\n          \"answer_min_character\": 1,\n          \"answer_required\": false,\n          \"answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"case_sensitive\": false,\n          \"name\": \"How useful was this meeting?\",\n          \"prompts\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"rating_max_label\": \"Extremely Likely\",\n          \"rating_max_value\": 4,\n          \"rating_min_label\": \"Not likely\",\n          \"rating_min_value\": 0,\n          \"right_answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"show_as_dropdown\": false,\n          \"type\": \"single\"\n        }\n      ],\n      \"status\": \"notstart\",\n      \"title\": \"Learn something new\"\n    },\n    {\n      \"anonymous\": true,\n      \"id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n      \"poll_type\": 2,\n      \"questions\": [\n        {\n          \"answer_max_character\": 200,\n          \"answer_min_character\": 1,\n          \"answer_required\": false,\n          \"answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"case_sensitive\": false,\n          \"name\": \"How useful was this meeting?\",\n          \"prompts\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"rating_max_label\": \"Extremely Likely\",\n          \"rating_max_value\": 4,\n          \"rating_min_label\": \"Not likely\",\n          \"rating_min_value\": 0,\n          \"right_answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"show_as_dropdown\": false,\n          \"type\": \"single\"\n        },\n        {\n          \"answer_max_character\": 200,\n          \"answer_min_character\": 1,\n          \"answer_required\": false,\n          \"answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"case_sensitive\": false,\n          \"name\": \"How useful was this meeting?\",\n          \"prompts\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"rating_max_label\": \"Extremely Likely\",\n          \"rating_max_value\": 4,\n          \"rating_min_label\": \"Not likely\",\n          \"rating_min_value\": 0,\n          \"right_answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"show_as_dropdown\": false,\n          \"type\": \"single\"\n        }\n      ],\n      \"status\": \"notstart\",\n      \"title\": \"Learn something new\"\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found** <br>\n**Error Code:** `300` <br>\nInvalid Meeting ID.\n**Error Code:** `300` <br>\nMeeting id does not exist.\n**Error Code:** `3000` <br>\nCannot access meeting information.\n**Error Code:** `3001`<br>\nMeeting does not ",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"polls\": [\n    {\n      \"anonymous\": false,\n      \"poll_type\": 2,\n      \"questions\": [\n        {\n          \"answer_max_character\": 200,\n          \"answer_min_character\": 1,\n          \"answer_required\": false,\n          \"answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"case_sensitive\": false,\n          \"name\": \"How useful was this meeting?\",\n          \"prompts\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"rating_max_label\": \"Extremely Likely\",\n          \"rating_max_value\": 4,\n          \"rating_min_label\": \"Not likely\",\n          \"rating_min_value\": 1,\n          \"right_answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"show_as_dropdown\": false,\n          \"type\": \"single\"\n        },\n        {\n          \"answer_max_character\": 200,\n          \"answer_min_character\": 1,\n          \"answer_required\": false,\n          \"answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"case_sensitive\": false,\n          \"name\": \"How useful was this meeting?\",\n          \"prompts\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"rating_max_label\": \"Extremely Likely\",\n          \"rating_max_value\": 4,\n          \"rating_min_label\": \"Not likely\",\n          \"rating_min_value\": 1,\n          \"right_answers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"show_as_dropdown\": false,\n          \"type\": \"single\"\n        }\n      ],\n      \"title\": \"Learn something new\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/batch_polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"batch_polls"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "93398114182",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get meeting's token",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/token?type=closed_caption_token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"token"
									],
									"query": [
										{
											"key": "type",
											"value": "closed_caption_token",
											"description": "The meeting token type: \n* `closed_caption_token` — The third-party closed caption API token. \n\nThis defaults to `closed_caption_token`."
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "85746065",
											"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
										}
									]
								},
								"description": "Use this API to get a meeting's [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom meeting. \n\n**Scopes:** `meeting:read`, `meeting:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* The **Closed captioning** setting enabled in the Zoom web portal. \n* The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\nMeeting token returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/token?type=closed_caption_token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"token"
											],
											"query": [
												{
													"key": "type",
													"value": "closed_caption_token"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"token\": \"https://example.com/closedcaption?id=200610693&ns=GZHkEA==&expire=86400&spparams=id%2Cns%2Cexpire&signature=nYtXJqRKCW\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `300` <br>\nInvalid meeting ID. \n\n**Error Code:** `3000` <br>\n* Cannot access Webinar information. <br>\n* Meeting survey disabled. To enable this feature, enable the \"Meeting Survey\" setting in",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/token?type=closed_caption_token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"token"
											],
											"query": [
												{
													"key": "type",
													"value": "closed_caption_token"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `300` <br>\nMeeting ID does not exist. \n\n**Error Code:** `3001` <br>\nMeeting does not exist: {meetingId}",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/token?type=closed_caption_token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"token"
											],
											"query": [
												{
													"key": "type",
													"value": "closed_caption_token"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a meeting's join token for local recording",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/jointoken/local_recording",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"jointoken",
										"local_recording"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "85746065",
											"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
										}
									]
								},
								"description": "Use this API to get a meeting's join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom meeting. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types. \n\n**Scopes:** `meeting_token:read:admin:local_recording`, `meeting_token:read:local_recording` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* A Pro or higher plan for the meeting host. \n* The **Local recording** user setting enabled in the Zoom web portal."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\nMeeting local recording token returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/jointoken/local_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"jointoken",
												"local_recording"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"expire_in\": 120,\n  \"token\": \"2njt50mj\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `300` <br>\nInvalid meeting ID. \n\n**Error Code:** `3000` <br>\nCannot access Webinar information. \n\n**Error Code:** `124` <br>\nThis API only supports OAuth2 authorization. \n\n**Error Code:** `300",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/jointoken/local_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"jointoken",
												"local_recording"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `300` <br>\nMeeting ID does not exist. \n\n**Error Code:** `3001` Meeting does not exist: {meetingId}",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/jointoken/local_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"jointoken",
												"local_recording"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Recover meeting recordings",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"recover\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/meetings/:meetingUUID/recordings/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"meetings",
								":meetingUUID",
								"recordings",
								"status"
							],
							"variable": [
								{
									"key": "meetingUUID",
									"value": "4444AAAiAAAAAiAiAiiAii==",
									"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
								}
							]
						},
						"description": "Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover all deleted [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.<br><br>\n**Scopes**: `recording:write:admin` `recording:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites**:<br>\n* A Pro user with Cloud Recording enabled."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200` <br>\nRecordings recovered. \n\n**Error Code:** `200`<br>\nYou do not have the right permissions.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"recover\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingUUID/recordings/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingUUID",
										"recordings",
										"status"
									],
									"variable": [
										{
											"key": "meetingUUID",
											"value": "4444AAAiAAAAAiAiAiiAii==",
											"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `204` <br>\nDeleted recordings of the meeting recovered.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"recover\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingUUID/recordings/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingUUID",
										"recordings",
										"status"
									],
									"variable": [
										{
											"key": "meetingUUID",
											"value": "4444AAAiAAAAAiAiAiiAii==",
											"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400` <br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"recover\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingUUID/recordings/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingUUID",
										"recordings",
										"status"
									],
									"variable": [
										{
											"key": "meetingUUID",
											"value": "4444AAAiAAAAAiAiAiiAii==",
											"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` <br>\nMeeting recording not found.<br> **Error Code:** `1001`<br>  User does not exist: {userId}.<br>\n**Error Code:** `3301`<br>There is no recording for this meeting.\n\n\n\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"recover\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingUUID/recordings/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingUUID",
										"recordings",
										"status"
									],
									"variable": [
										{
											"key": "meetingUUID",
											"value": "4444AAAiAAAAAiAiAiiAii==",
											"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "past meetings",
			"item": [
				{
					"name": "{meeting Id}",
					"item": [
						{
							"name": "Get past meeting details",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_meetings/:meetingId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_meetings",
										":meetingId"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "5638296721",
											"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
										}
									]
								},
								"description": "Use this API to get information about a past meeting. \n\n **Scopes:** `meeting:read:admin`, `meeting:read` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\nMeeting information returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 5638296721,\n  \"uuid\": \"4444AAAiAAAAAiAiAiiAii==\",\n  \"duration\": 60,\n  \"start_time\": \"2021-07-13T21:44:51Z\",\n  \"end_time\": \"2021-07-13T23:00:51Z\",\n  \"host_id\": \"x1yCzABCDEfg23HiJKl4mN\",\n  \"dept\": \"Developers\",\n  \"participants_count\": 2,\n  \"source\": \"Zoom\",\n  \"topic\": \"My Meeting\",\n  \"total_minutes\": 55,\n  \"type\": 1,\n  \"user_email\": \"jchill@example.com\",\n  \"user_name\": \"Jill Chill\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\nMeeting not found. \n\n**Error Code:** `1010` \n* User does not exist: {userId} \n* User \"{userId}\" does not exist or does not belong to this account. \n\n**Error Code:** `300` <br>\nCannot access meeting information. \n\n**Error C",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nMeeting not found. \n\n**Error Code:** `3001` \n* This meeting is not available or the meeting ID is invalid. \n* The meeting ID is invalid or the meeting has not ended.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List past meeting instances",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_meetings/:meetingId/instances",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_meetings",
										":meetingId",
										"instances"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "93398114182",
											"description": "(Required) The past meeting's ID. The meeting ID must be from within the last 30 days. Past meeting IDs expire after 30 days."
										}
									]
								},
								"description": "Use this API to return a list of past meeting instances. \n\n **Scopes:** `meeting:read:admin`, `meeting:read` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\n List of ended meeting instances returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId",
												"instances"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "93398114182",
													"description": "(Required) The past meeting's ID. The meeting ID must be from within the last 30 days. Past meeting IDs expire after 30 days."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"meetings\": [\n    {\n      \"start_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"uuid\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"start_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"uuid\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\n Meeting not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId",
												"instances"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "93398114182",
													"description": "(Required) The past meeting's ID. The meeting ID must be from within the last 30 days. Past meeting IDs expire after 30 days."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List past meeting's poll results",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_meetings/:meetingId/polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_meetings",
										":meetingId",
										"polls"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "5638296721",
											"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
										}
									]
								},
								"description": "[Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. Use this API to list poll results of a meeting.<br><br>\n\n**Scopes**: `meeting:read:admin`, `meeting:read`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` <br>\n**Prerequisites**:<br>\n* Host user type must be **Pro**.\n* Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nPolls returned successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId",
												"polls"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 93398114182,\n  \"questions\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"name\": \"Jill Chill\",\n      \"question_details\": [\n        {\n          \"answer\": \"Good\",\n          \"date_time\": \"2022-03-26T05:37:59Z\",\n          \"polling_id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n          \"question\": \"How are you?\"\n        },\n        {\n          \"answer\": \"Good\",\n          \"date_time\": \"2022-03-26T05:37:59Z\",\n          \"polling_id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n          \"question\": \"How are you?\"\n        }\n      ]\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"name\": \"Jill Chill\",\n      \"question_details\": [\n        {\n          \"answer\": \"Good\",\n          \"date_time\": \"2022-03-26T05:37:59Z\",\n          \"polling_id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n          \"question\": \"How are you?\"\n        },\n        {\n          \"answer\": \"Good\",\n          \"date_time\": \"2022-03-26T05:37:59Z\",\n          \"polling_id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n          \"question\": \"How are you?\"\n        }\n      ]\n    }\n  ],\n  \"start_time\": \"2022-03-26T05:37:59Z\",\n  \"uuid\": \"Vg8IdgluR5WDeWIkpJlElQ==\"\n}"
								}
							]
						},
						{
							"name": "List past meeting's files",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_meetings/:meetingId/files",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_meetings",
										":meetingId",
										"files"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "85746065",
											"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
										}
									]
								},
								"description": "**Note: This API has been deprecated and is no longer supported due to GCM encryption updates for security purposes.** To learn about saving the in-meeting chat files via Zoom Client, refer to the [Saving in-meeting chat](https://support.zoom.us/hc/en-us/articles/115004792763-Saving-in-meeting-chat) guide.\n\nList files sent via in-meeting chat during a meeting. The in-meeting files are deleted after 24 hours of the meeting completion time. \n<br><br>\n**Scope:** `meeting:read`, `meeting:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nFiles retrieved successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId",
												"files"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"in_meeting_files\": [\n    {\n      \"download_url\": \"\",\n      \"file_name\": \"\",\n      \"file_size\": 51171275\n    },\n    {\n      \"download_url\": \"\",\n      \"file_name\": \"\",\n      \"file_size\": 41232018\n    }\n  ],\n  \"total_records\": -87013132\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId",
												"files"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `3001`<br>\nMeeting ID is invalid or not end.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId",
												"files"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "85746065",
													"description": "(Required) The meeting's ID. \n\n When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "{meeting UUID}",
					"item": [
						{
							"name": "archive files",
							"item": [
								{
									"name": "Delete a meeting's archived files",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingUUID",
												"archive_files"
											],
											"variable": [
												{
													"key": "meetingUUID",
													"value": "4444AAAiAAAAAiAiAiiAii==",
													"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
												}
											]
										},
										"description": "Use this API to delete all of a meeting's archived files. \n\n **Scopes:** `recording:write:admin`, `recording:write` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003)."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\n Meeting archived files returned.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"past_meetings",
														":meetingUUID",
														"archive_files"
													],
													"variable": [
														{
															"key": "meetingUUID",
															"value": "4444AAAiAAAAAiAiAiiAii==",
															"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `200` <br>\n Only available for Paid account. \n\n **Error Code:** `200` <br>\n Not available for this account.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"past_meetings",
														":meetingUUID",
														"archive_files"
													],
													"variable": [
														{
															"key": "meetingUUID",
															"value": "4444AAAiAAAAAiAiAiiAii==",
															"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `3001` <br>\n Meeting does not exist: {0}",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"past_meetings",
														":meetingUUID",
														"archive_files"
													],
													"variable": [
														{
															"key": "meetingUUID",
															"value": "4444AAAiAAAAAiAiAiiAii==",
															"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a meeting's archived files",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingUUID",
												"archive_files"
											],
											"variable": [
												{
													"key": "meetingUUID",
													"value": "4444AAAiAAAAAiAiAiiAii==",
													"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
												}
											]
										},
										"description": "Use this API to return a specific meeting instance's [archived files](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators). \n\n **Scopes:** `recording:read` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003)."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\n Meeting archived files returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"past_meetings",
														":meetingUUID",
														"archive_files"
													],
													"variable": [
														{
															"key": "meetingUUID",
															"value": "4444AAAiAAAAAiAiAiiAii==",
															"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"uuid\": \"yO3dfhh3t467UkQ==\",\n  \"id\": 553068284,\n  \"host_id\": \"Dhjdfgdkg8w\",\n  \"topic\": \"My Personal Meeting Room\",\n  \"type\": 1,\n  \"start_time\": \"2021-04-26T05:23:18Z\",\n  \"timezone\": \"Asia/Shanghai\",\n  \"duration\": 1,\n  \"total_size\": 364463,\n  \"recording_count\": 2,\n  \"meeting_type\": \"internal\",\n  \"account_name\": \"account_01\",\n  \"complete_time\": {},\n  \"is_breakout_room\": false,\n  \"archive_files\": [\n    {\n      \"id\": \"55hfgsd-sd8e2bd7255\",\n      \"file_type\": \"M4A\",\n      \"file_extension\": \"M4A\",\n      \"file_size\": 165743,\n      \"download_url\": \"https://example.com/recording/download/Qg75t7xZBtEbAkjdlgbfdngBBBB\",\n      \"status\": \"completed\",\n      \"recording_type\": \"audio_only\",\n      \"individual\": true,\n      \"participant_join_time\": \"2021-03-12T02:07:27Z\",\n      \"participant_leave_time\": \"2021-03-12T02:12:27Z\",\n      \"file_path\": \"/9090876528/path01/demo.mp4\",\n      \"participant_email\": \"jchill@example.com\"\n    },\n    {\n      \"id\": \"55hfgsd-sd8e2bd7255\",\n      \"file_type\": \"M4A\",\n      \"file_extension\": \"M4A\",\n      \"file_size\": 165743,\n      \"download_url\": \"https://example.com/recording/download/Qg75t7xZBtEbAkjdlgbfdngBBBB\",\n      \"status\": \"completed\",\n      \"recording_type\": \"audio_only\",\n      \"individual\": true,\n      \"participant_join_time\": \"2021-03-12T02:07:27Z\",\n      \"participant_leave_time\": \"2021-03-12T02:12:27Z\",\n      \"file_path\": \"/9090876528/path01/demo.mp4\",\n      \"participant_email\": \"jchill@example.com\"\n    }\n  ],\n  \"status\": \"completed\",\n  \"duration_in_second\": 1800,\n  \"parent_meeting_id\": \"atsXxhSEQWit9t+U02HXNQ==\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\n Meeting recording not found. \n\n **Error Code:** `3001` <br>\n Meeting {meetingUUId} does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"past_meetings",
														":meetingUUID",
														"archive_files"
													],
													"variable": [
														{
															"key": "meetingUUID",
															"value": "4444AAAiAAAAAiAiAiiAii==",
															"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get past meeting participants",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_meetings/:meetingUUID/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_meetings",
										":meetingUUID",
										"participants"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									],
									"variable": [
										{
											"key": "meetingUUID",
											"value": "4444AAAiAAAAAiAiAiiAii==",
											"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
										}
									]
								},
								"description": "Retrieve information on participants from a past meeting. <br><br>\n**Scopes:** `meeting:read:admin` `meeting:read`\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n**Prerequisites:**<br>\n* Paid account on a Pro or higher plan.\n\n<br> <br>  **Note**: Please double encode your UUID when using this API if the UUID begins with a '/'or contains '//' in it.\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeeting participants' report returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingUUID/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingUUID",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											],
											"variable": [
												{
													"key": "meetingUUID",
													"value": "4444AAAiAAAAAiAiAiiAii==",
													"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"total_records\": 1,\n  \"participants\": [\n    {\n      \"id\": \"urn:uuid:0b56b74d-ca82-394b-9ea0-9d7e38c304f0\",\n      \"name\": \"Jill Chill\",\n      \"user_email\": \"jchill@example.com\"\n    },\n    {\n      \"id\": \"4207ad0d-5c1f-03d5-9ef1-d5db7056a1de\",\n      \"name\": \"Jill Chill\",\n      \"user_email\": \"jchill@example.com\"\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser {userId} not exist or not belong to this account.<br><br>\n**Error Code:** `300`<br>\nCannot access meeting information.<br><br>\n**Error Code:** `200`<br>\nOnly available for paid account: {acco",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingUUID/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingUUID",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											],
											"variable": [
												{
													"key": "meetingUUID",
													"value": "4444AAAiAAAAAiAiAiiAii==",
													"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting not found<br>\n**Error Code:** `1001`<br>\nUser {userId} not exist or not belong to this account.<br>\nUser not exist: {userId}<br><br>\n**Error Code:** `3001`<br>\nThis meeting is not available or ID is not valid.<br>\nM",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingUUID/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingUUID",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											],
											"variable": [
												{
													"key": "meetingUUID",
													"value": "4444AAAiAAAAAiAiAiiAii==",
													"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "metrics",
			"item": [
				{
					"name": "client",
					"item": [
						{
							"name": "feedback",
							"item": [
								{
									"name": "List Zoom meetings client feedback",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/client/feedback?from=2022-01-01&to=2022-01-28",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"client",
												"feedback"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01",
													"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
												},
												{
													"key": "to",
													"value": "2022-01-28",
													"description": "(Required) End date."
												}
											]
										},
										"description": "Use this API to return [Zoom meetings client feedback](https://support.zoom.us/hc/en-us/articles/115005855266-End-of-Meeting-Feedback-Survey#h_e30d552b-6d8e-4e0a-a588-9ca8180c4dbf) survey results. You can specify a monthly date range for the Dashboard data using the `from` and `to` query parameters. The month should fall within the last six months. \n\n**Scopes:** `dashboard_home:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business or higher account. \n* The \"[**Feedback to Zoom**](https://support.zoom.us/hc/en-us/articles/115005838023)\" option enabled."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nClient Feedback details returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/client/feedback?from=2022-01-01&to=2022-01-28",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"client",
														"feedback"
													],
													"query": [
														{
															"key": "from",
															"value": "2022-01-01"
														},
														{
															"key": "to",
															"value": "2022-01-28"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"client_feedbacks\": [\n    {\n      \"feedback_id\": \"1\",\n      \"feedback_name\": \"Others\",\n      \"participants_count\": 0\n    },\n    {\n      \"feedback_id\": \"1\",\n      \"feedback_name\": \"Others\",\n      \"participants_count\": 0\n    }\n  ],\n  \"from\": \"2022-01-01\",\n  \"to\": \"2022-01-30\",\n  \"total_records\": 10\n}"
										}
									]
								},
								{
									"name": "Get zoom meetings client feedback",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/client/feedback/:feedbackId?from=2022-01-01&to=2022-01-30&page_size=30&next_page_token=uBTK3NzNksdkuCUAQaFVFd86kyOr59zg4U2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"client",
												"feedback",
												":feedbackId"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-30"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "uBTK3NzNksdkuCUAQaFVFd86kyOr59zg4U2"
												}
											],
											"variable": [
												{
													"key": "feedbackId",
													"value": "1",
													"description": "(Required) Feedback Detail Id"
												}
											]
										},
										"description": "Retrieve detailed information on a [Zoom meetings client feedback](https://support.zoom.us/hc/en-us/articles/115005855266-End-of-Meeting-Feedback-Survey#h_e30d552b-6d8e-4e0a-a588-9ca8180c4dbf). <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.\n\n**Prerequisites:**\n* Business or higher account\n* [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) enabled.\n\n**Scope:** `dashboard_home:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`\n\n`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nClient Feedback details returned",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/client/feedback/:feedbackId?from=2022-01-01&to=2022-01-30&page_size=30&next_page_token=uBTK3NzNksdkuCUAQaFVFd86kyOr59zg4U2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"client",
														"feedback",
														":feedbackId"
													],
													"query": [
														{
															"key": "from",
															"value": "2022-01-01"
														},
														{
															"key": "to",
															"value": "2022-01-30"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "uBTK3NzNksdkuCUAQaFVFd86kyOr59zg4U2"
														}
													],
													"variable": [
														{
															"key": "feedbackId",
															"value": "1",
															"description": "(Required) Feedback Detail Id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"from\": \"2022-01-01\",\n  \"to\": \"2022-01-30\",\n  \"next_page_token\": \"uBTK3NzNksdkuCUAQaFVFd86kyOr59zg4U2\",\n  \"page_size\": 30,\n  \"client_feedback_details\": [\n    {\n      \"email\": \"user@example.com\",\n      \"meeting_id\": \"99525891193\",\n      \"participant_name\": \"jchill\",\n      \"time\": \"2022-01-19T07:34:09Z\"\n    },\n    {\n      \"email\": \"user@example.com\",\n      \"meeting_id\": \"99525891193\",\n      \"participant_name\": \"jchill\",\n      \"time\": \"2022-01-19T07:34:09Z\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "List client meeting satisfaction",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/client/satisfaction?from=2022-01-01&to=2022-01-30",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"client",
										"satisfaction"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01",
											"description": "The start date for the query in “yyyy-mm-dd” format. "
										},
										{
											"key": "to",
											"value": "2022-01-30",
											"description": "The end date for the query in “yyyy-mm-dd” format. "
										}
									]
								},
								"description": "If the [End of Meeting Feedback Survey](https://support.zoom.us/hc/en-us/articles/115005855266) option is enabled, attendees will be prompted with a survey window where they can tap either the **Thumbs Up** or **Thumbs Down** button that indicates their Zoom meeting experience. With this API, you can get information on the attendees' meeting satisfaction. Specify a monthly date range for the query using the from and to query parameters. The month should fall within the last six months.\n\nTo get information on the survey results with negative experiences (indicated by **Thumbs Down**), use the [**Get Zoom meetings client feedback**](/api-reference/zoom-api/methods#operation/dashboardClientFeedbackDetail) API.<br>\n**Scopes:** `dashboard:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nClient satisfaction data returned. ",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/client/satisfaction?from=2022-01-01&to=2022-01-30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"client",
												"satisfaction"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-30"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"client_satisfaction\": [\n    {\n      \"date\": \"2022-01-01\",\n      \"good_count\": 0,\n      \"none_count\": 0,\n      \"not_good_count\": 0,\n      \"satisfaction_percent\": 100\n    },\n    {\n      \"date\": \"2022-01-01\",\n      \"good_count\": 0,\n      \"none_count\": 0,\n      \"not_good_count\": 0,\n      \"satisfaction_percent\": 100\n    }\n  ],\n  \"from\": \"2022-01-01\",\n  \"to\": \"2022-01-30\",\n  \"total_records\": 30\n}"
								}
							]
						}
					]
				},
				{
					"name": "issues/zoomrooms",
					"item": [
						{
							"name": "Get top 25 Zoom Rooms with issues",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/issues/zoomrooms?from=2022-01-01&to=2022-01-28",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"issues",
										"zoomrooms"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "2022-01-28",
											"description": "(Required) End date."
										}
									]
								},
								"description": "Get information on top 25 Zoom Rooms with issues in a month. The month specified with the \"from\" and \"to\" range should fall within the last six months.<br>\n**Scope:** `dashboard_home:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Business or a higher plan.\n* Zoom Room must be enabled in the account."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nZoom Room with issue details returned",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/issues/zoomrooms?from=2022-01-01&to=2022-01-28",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"issues",
												"zoomrooms"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"from\": \"2022-01-01\",\n  \"to\": \"2022-01-30\",\n  \"total_records\": 30,\n  \"zoom_rooms\": [\n    {\n      \"id\": \"NHwIXQQ2Ro-fJ13cxj_fuQ\",\n      \"issues_count\": 12,\n      \"room_name\": \"jchill room\"\n    },\n    {\n      \"id\": \"NHwIXQQ2Ro-fJ13cxj_fuQ\",\n      \"issues_count\": 12,\n      \"room_name\": \"jchill room\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get issues of Zoom Rooms",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/issues/zoomrooms/:zoomroomId?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"issues",
										"zoomrooms",
										":zoomroomId"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "2022-01-28",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									],
									"variable": [
										{
											"key": "zoomroomId",
											"value": "azGzXIVUTWOdEQB79aNHkA",
											"description": "(Required) The Zoom room ID."
										}
									]
								},
								"description": "Use this API to return information about the Zoom Rooms in an account with issues, such as disconnected hardware or bandwidth issues. You can specify a monthly date range for the Dashboard data using the `from` and `to` query parameters. The month should fall within the last six months. \n\n**Scopes:** `dashboard_home:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business or a higher plan. \n* A Zoom Room must be enabled in the account."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nZoom Room with issue details returned",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/issues/zoomrooms/:zoomroomId?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"issues",
												"zoomrooms",
												":zoomroomId"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											],
											"variable": [
												{
													"key": "zoomroomId",
													"value": "azGzXIVUTWOdEQB79aNHkA",
													"description": "(Required) The Zoom room ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"from\": \"2022-02-01\",\n  \"to\": \"2022-02-28\",\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"total_records\": 1,\n  \"issue_details\": [\n    {\n      \"issue\": \"Untrusted certificate is detected\",\n      \"time\": \"2022-02-27T08:37:05Z\"\n    },\n    {\n      \"issue\": \"Untrusted certificate is detected\",\n      \"time\": \"2022-02-27T08:37:05Z\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "meetings",
					"item": [
						{
							"name": "{meeting Id}",
							"item": [
								{
									"name": "participants",
									"item": [
										{
											"name": "List meeting participants",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants?type=past&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId",
														"participants"
													],
													"query": [
														{
															"key": "type",
															"value": "past",
															"description": "The type of meeting to query: \n* `past` — All past meetings. \n* `pastOne` — All past one-user meetings. \n* `live` - All live meetings. \n\nThis value defaults to `live`."
														},
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														},
														{
															"key": "include_fields",
															"value": "registrant_id",
															"description": "Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](/api-reference/zoom-api/methods#operation/meetingRegistrants). This is not supported for `live` meeting types."
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "5638296721",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												},
												"description": "Use this API to return a list of participants from live or past meetings. \n\n If you do not provide the `type` query parameter, the default value will be set to the `live` value. This API will only return metrics for participants in a live meeting, if any exist. You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n* Displays data for any users who are **not** part of the host's account (external users) unless they meet certain conditions. See [Email address display rules](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#email-address) for details. \n\n**Scopes:** `dashboard_meetings:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business or higher plan."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nMeeting participants returned.<br>\nOnly available for paid accounts that have enabled the dashboard feature.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants?type=past&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																},
																{
																	"key": "include_fields",
																	"value": "registrant_id"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"total_records\": 1,\n  \"participants\": [\n    {\n      \"audio_quality\": \"good\",\n      \"camera\": \"FaceTime HD Camera\",\n      \"connection_type\": \"UDP\",\n      \"customer_key\": \"349589LkJyeW\",\n      \"data_center\": \"United States (SC Top)\",\n      \"device\": \"Phone\",\n      \"domain\": \"example.com\",\n      \"email\": \"user@example.com\",\n      \"from_sip_uri\": \"example.com\",\n      \"full_data_center\": \"United States (SC Top);\",\n      \"harddisk_id\": \"Disk01\",\n      \"id\": \"zJKyaiAyTNC-MWjiWC18KQ\",\n      \"in_room_participants\": 2,\n      \"ip_address\": \"10.100.111.8\",\n      \"join_time\": \"2022-03-01T10:15:14Z\",\n      \"leave_reason\": \"Host ended the meeting.\",\n      \"leave_time\": \"2022-03-01T10:17:35Z\",\n      \"location\": \"United States\",\n      \"mac_addr\": \"f85e-a012-92d8\",\n      \"microphone\": \"Microphone (2- High Definition Audio Device)\",\n      \"network_type\": \"Wired\",\n      \"participant_user_id\": \"DYHrdpjrS3uaOf7dPkkg8w\",\n      \"pc_name\": \"HW0010449\",\n      \"recording\": false,\n      \"registrant_id\": \"fdgsfh2ey82fuh\",\n      \"role\": \"host\",\n      \"screen_share_quality\": \"good\",\n      \"share_application\": true,\n      \"share_desktop\": true,\n      \"share_whiteboard\": true,\n      \"sip_uri\": \"example.com\",\n      \"speaker\": \"speaker (2- High Definition Audio Device)\",\n      \"status\": \"in_meeting\",\n      \"user_id\": \"20162560\",\n      \"user_name\": \"jchill\",\n      \"version\": \"5.9.1.2581\",\n      \"video_quality\": \"good\"\n    },\n    {\n      \"audio_quality\": \"good\",\n      \"camera\": \"FaceTime HD Camera\",\n      \"connection_type\": \"UDP\",\n      \"customer_key\": \"349589LkJyeW\",\n      \"data_center\": \"United States (SC Top)\",\n      \"device\": \"Phone\",\n      \"domain\": \"example.com\",\n      \"email\": \"user@example.com\",\n      \"from_sip_uri\": \"example.com\",\n      \"full_data_center\": \"United States (SC Top);\",\n      \"harddisk_id\": \"Disk01\",\n      \"id\": \"zJKyaiAyTNC-MWjiWC18KQ\",\n      \"in_room_participants\": 2,\n      \"ip_address\": \"10.100.111.8\",\n      \"join_time\": \"2022-03-01T10:15:14Z\",\n      \"leave_reason\": \"Host ended the meeting.\",\n      \"leave_time\": \"2022-03-01T10:17:35Z\",\n      \"location\": \"United States\",\n      \"mac_addr\": \"f85e-a012-92d8\",\n      \"microphone\": \"Microphone (2- High Definition Audio Device)\",\n      \"network_type\": \"Wired\",\n      \"participant_user_id\": \"DYHrdpjrS3uaOf7dPkkg8w\",\n      \"pc_name\": \"HW0010449\",\n      \"recording\": false,\n      \"registrant_id\": \"fdgsfh2ey82fuh\",\n      \"role\": \"host\",\n      \"screen_share_quality\": \"good\",\n      \"share_application\": true,\n      \"share_desktop\": true,\n      \"share_whiteboard\": true,\n      \"sip_uri\": \"example.com\",\n      \"speaker\": \"speaker (2- High Definition Audio Device)\",\n      \"status\": \"in_meeting\",\n      \"user_id\": \"20162560\",\n      \"user_name\": \"jchill\",\n      \"version\": \"5.9.1.2581\",\n      \"video_quality\": \"good\"\n    }\n  ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info.<br>\n{meetingId} or the next page token is either invalid or expired.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants?type=past&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																},
																{
																	"key": "include_fields",
																	"value": "registrant_id"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nMeeting ID is invalid or has not ended.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants?type=past&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																},
																{
																	"key": "include_fields",
																	"value": "registrant_id"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List meeting participants QoS",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/qos?type=past&page_size=10&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId",
														"participants",
														"qos"
													],
													"query": [
														{
															"key": "type",
															"value": "past",
															"description": "The type of meeting to query: \n* `past` — All past meetings. \n* `live` - All live meetings. \n\nThis value defaults to `live`."
														},
														{
															"key": "page_size",
															"value": "10",
															"description": "The number of items returned per page."
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "5638296721",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												},
												"description": "Use this API to return a list of meeting participants from live or past meetings and their quality of service received during the meeting. The data returned indicates the connection quality for sending/receiving video, audio, and shared content. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n* Displays data for any users who are **not** part of the host's account (external users) unless they meet certain conditions. See [Email address display rules](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#email-address) for details. \n\n**Scopes:** `dashboard_meetings:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business or a higher plan."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nMeeting participants returned.<br>\nOnly available for paid accounts that have enabled the dashboard feature.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/qos?type=past&page_size=10&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "10"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"next_page_token\": \"y20RGLOiO2jTy3CMfnNRORmB51kAuhMy0e2\",\n  \"page_count\": 2,\n  \"page_size\": 10,\n  \"total_records\": 2,\n  \"participants\": [\n    {\n      \"device\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"domain\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"harddisk_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_address\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"join_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"leave_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"location\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"mac_addr\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"pc_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"user_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"user_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"user_qos\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"version\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"device\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"domain\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"harddisk_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_address\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"join_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"leave_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"location\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"mac_addr\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"pc_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"user_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"user_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"user_qos\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"version\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {meetingId}.<br>\nThe next page token is either invalid or expired.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/qos?type=past&page_size=10&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "10"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis meeting's detail info is not available.<br>\nThe Meeting ID is not valid or the meeting has not ended yet.\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/qos?type=past&page_size=10&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "10"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get post meeting feedback",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/satisfaction?type=past&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&page_size=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId",
														"participants",
														"satisfaction"
													],
													"query": [
														{
															"key": "type",
															"value": "past",
															"description": "Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>\n\nIf you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings."
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														},
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "5638296721",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												},
												"description": "When a meeting ends, each attendee will be prompted to share their meeting experience by clicking either thumbs up or thumbs down. Use this API to retrieve the feedback submitted for a specific meeting. Note that this API only works for meetings scheduled after December 20, 2020.\n\n**Prerequisites:**\n* [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) setting must be enabled by the participant prior to the meeting.\n* The user making the API request must be enrolled in a Business or a higher plan.\n\n<br> **Scope:** `dashboard_meetings:read:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\n\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/satisfaction?type=past&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&page_size=30",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"satisfaction"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																},
																{
																	"key": "page_size",
																	"value": "30"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"next_page_token\": \"ZkFS5lmGLWTjLMqt2IVCBpyKwSnbDrgJzo2\",\n  \"page_size\": 30,\n  \"participants\": [\n    {\n      \"date_time\": \"2022-01-19T07:34:09Z\",\n      \"email\": \"user@example.com\",\n      \"quality\": \"GOOD\",\n      \"user_id\": \"NJmuvOjlRm2r7yGUPLLOhw\"\n    },\n    {\n      \"date_time\": \"2022-01-19T07:34:09Z\",\n      \"email\": \"user@example.com\",\n      \"quality\": \"GOOD\",\n      \"user_id\": \"NJmuvOjlRm2r7yGUPLLOhw\"\n    }\n  ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `200`<br>\nOnly available for paid accounts that have dashboard feature enabled.\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/satisfaction?type=past&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&page_size=30",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"satisfaction"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																},
																{
																	"key": "page_size",
																	"value": "30"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nMeeting ID is invalid or not end.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/satisfaction?type=past&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&page_size=30",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"satisfaction"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																},
																{
																	"key": "page_size",
																	"value": "30"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get sharing/recording details",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/sharing?type=past&page_size=30&next_page_token=0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId",
														"participants",
														"sharing"
													],
													"query": [
														{
															"key": "type",
															"value": "past",
															"description": "The type of meeting to query: \n* `past` — All past meetings. \n* `live` - All live meetings. \n\nThis value defaults to `live`."
														},
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														},
														{
															"key": "next_page_token",
															"value": "0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "5638296721",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												},
												"description": "Retrieve the sharing and recording details of participants from live or past meetings.<br>\n**Scopes:** `dashboard_meetings:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:** <br>\n* Business or a higher plan."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nMeeting participants returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/sharing?type=past&page_size=30&next_page_token=0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"sharing"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"total_records\": 1,\n  \"participants\": [\n    {\n      \"details\": [\n        {\n          \"content\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"end_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"start_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"content\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"end_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"start_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ],\n      \"id\": \"pFyqVDCkQlCbrt-iADD4UA\",\n      \"user_id\": \"30321664\",\n      \"user_name\": \"jchill\"\n    },\n    {\n      \"details\": [\n        {\n          \"content\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"end_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"start_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"content\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"end_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"start_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ],\n      \"id\": \"pFyqVDCkQlCbrt-iADD4UA\",\n      \"user_id\": \"30321664\",\n      \"user_name\": \"jchill\"\n    }\n  ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {meetingId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/sharing?type=past&page_size=30&next_page_token=0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"sharing"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis meeting's detail info is not available or ID is not valid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/sharing?type=past&page_size=30&next_page_token=0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"sharing"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get meeting participant QoS",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/:participantId/qos?type=past",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId",
														"participants",
														":participantId",
														"qos"
													],
													"query": [
														{
															"key": "type",
															"value": "past",
															"description": "The type of meeting to query: \n* `past` — All past meetings. \n* `live` - All live meetings. \n\nThis value defaults to `live`."
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "5638296721",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
														},
														{
															"key": "participantId",
															"value": "32977920",
															"description": "(Required) The participant's ID."
														}
													]
												},
												"description": "Use this API to return the quality of service (QoS) report for participants from live or past meetings. The data returned indicates the connection quality for sending/receiving video, audio, and shared content. The API returns this data for either the API request or when the API request was last received. \n\nWhen the sender sends data, a timestamp is attached to the sender's data packet. The receiver then returns this timestamp to the sender. This helps determine the upstream and downstream latency, which includes the application processing time. The latency data returned is the five second average and five second maximum. \n\n This API will **not** return data if there is no data being sent or received at the time of request. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n* Displays data for any users who are **not** part of the host's account (external users) unless they meet certain conditions. See [Email address display rules](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#email-address) for details. \n\n**Scopes:** `dashboard_meetings:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nMeeting participant QOS returned.<br>\nOnly available for paid account that have enabled the dashboard feature.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/:participantId/qos?type=past",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																":participantId",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																},
																{
																	"key": "participantId",
																	"value": "32977920",
																	"description": "(Required) The participant's ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"device\": \"Phone\",\n  \"domain\": \"example.com\",\n  \"harddisk_id\": \"Disk01\",\n  \"ip_address\": \"10.100.111.8\",\n  \"join_time\": \"2022-03-01T10:15:14Z\",\n  \"leave_time\": \"2022-03-01T10:15:14Z\",\n  \"location\": \"United States\",\n  \"mac_addr\": \"f85e-a012-92d8\",\n  \"pc_name\": \"HW0010449\",\n  \"user_id\": \"20161536\",\n  \"user_name\": \"jchill\",\n  \"user_qos\": [\n    {\n      \"as_device_from_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"as_device_to_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"as_input\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"as_output\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"audio_device_from_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"audio_device_to_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"audio_input\": {\n        \"avg_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"bitrate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"jitter\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"latency\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"max_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"audio_output\": {\n        \"avg_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"bitrate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"jitter\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"latency\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"max_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"cpu_usage\": {\n        \"system_max_cpu_usage\": \"11%\",\n        \"zoom_avg_cpu_usage\": \"0%\",\n        \"zoom_max_cpu_usage\": \"2%\",\n        \"zoom_min_cpu_usage\": \"0%\"\n      },\n      \"date_time\": \"2022-03-01T10:16:00Z\",\n      \"video_device_from_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.03%\"\n      },\n      \"video_device_to_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"video_input\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"video_output\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"as_device_from_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"as_device_to_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"as_input\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"as_output\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"audio_device_from_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"audio_device_to_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"audio_input\": {\n        \"avg_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"bitrate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"jitter\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"latency\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"max_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"audio_output\": {\n        \"avg_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"bitrate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"jitter\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"latency\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"max_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"cpu_usage\": {\n        \"system_max_cpu_usage\": \"11%\",\n        \"zoom_avg_cpu_usage\": \"0%\",\n        \"zoom_max_cpu_usage\": \"2%\",\n        \"zoom_min_cpu_usage\": \"0%\"\n      },\n      \"date_time\": \"2022-03-01T10:16:00Z\",\n      \"video_device_from_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.03%\"\n      },\n      \"video_device_to_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"video_input\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"video_output\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"version\": \"5.9.1.2581\"\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {meetingId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/:participantId/qos?type=past",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																":participantId",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																},
																{
																	"key": "participantId",
																	"value": "32977920",
																	"description": "(Required) The participant's ID."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis meeting's detail info is not available.<br>\nThis meeting has not ended yet or the Meeting ID is invalid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/:participantId/qos?type=past",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																":participantId",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "5638296721",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
																},
																{
																	"key": "participantId",
																	"value": "32977920",
																	"description": "(Required) The participant's ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get meeting details",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/meetings/:meetingId?type=past",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"meetings",
												":meetingId"
											],
											"query": [
												{
													"key": "type",
													"value": "past",
													"description": "The type of meeting to query: \n* `past` — All past meetings. \n* `pastOne` — All past one-user meetings. \n* `live` - All live meetings. \n\nThis value defaults to `live`."
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										},
										"description": "Get details on live or past meetings. This overview will show if features such as audio, video, screen sharing, and recording were being used in the meeting. You can also see the license types of each user on your account.<br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  <br>\n**Scopes:** `dashboard_meetings:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:** <br>\n* Business or a higher plan."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nMeeting returned.<br>\nOnly available for paid accounts that have enabled the dashboard feature.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId?type=past",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId"
													],
													"query": [
														{
															"key": "type",
															"value": "past"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "5638296721",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"host\": \"API\",\n  \"custom_keys\": [\n    {\n      \"key\": \"Host Nation\",\n      \"value\": \"US\"\n    },\n    {\n      \"key\": \"Host Nation\",\n      \"value\": \"US\"\n    }\n  ],\n  \"dept\": \"Developers\",\n  \"duration\": \"02:21\",\n  \"email\": \"user@example.com\",\n  \"end_time\": \"2022-03-01T10:17:35Z\",\n  \"has_3rd_party_audio\": true,\n  \"has_archiving\": true,\n  \"has_pstn\": true,\n  \"has_recording\": true,\n  \"has_screen_share\": true,\n  \"has_sip\": true,\n  \"has_video\": true,\n  \"has_voip\": true,\n  \"id\": 575734086,\n  \"in_room_participants\": 2,\n  \"participants\": 2,\n  \"start_time\": \"2022-03-01T10:15:14Z\",\n  \"topic\": \"API Meeting\",\n  \"user_type\": \"Licensed\",\n  \"uuid\": \"gaqOKVN9RAaDHKYWEcASXg==\"\n}"
										},
										{
											"name": "**Error Code:** `300`<br>\nCan not access webinar info, {meetingId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId?type=past",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId"
													],
													"query": [
														{
															"key": "type",
															"value": "past"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "5638296721",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nMeeting ID is invalid or the meeting has not ended yet.<br>\nThis meeting's details are not available.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId?type=past",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId"
													],
													"query": [
														{
															"key": "type",
															"value": "past"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "5638296721",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List meetings",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/meetings?type=past&from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&group_id=TaVA8QKik_1233&include_fields=tracking_fields",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"meetings"
									],
									"query": [
										{
											"key": "type",
											"value": "past",
											"description": "Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>\n\nIf you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings."
										},
										{
											"key": "from",
											"value": "2022-01-01",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "2022-01-28",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "group_id",
											"value": "TaVA8QKik_1233",
											"description": "The group ID. To get a group ID, use the [**List groups**](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API. \n\n **Note:** The API response will only contain meetings where the host is a member of the queried group ID."
										},
										{
											"key": "include_fields",
											"value": "tracking_fields",
											"description": "Set the value of this field to \"tracking_fields\" if you would like to include tracking fields of each meeting in the response."
										}
									]
								},
								"description": "List total live or past meetings that occurred during a specified period of time. This overview will show if features such as audio, video, screen sharing, and recording were being used in the meeting. You can also see the license types of each user on your account.<br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.<br>\n**Scopes:** `dashboard_meetings:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br><br>\n**Prerequisites:** <br>\n* Business or a higher plan.<br><br>"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeetings returned.<br>\nOnly available for paid accounts that have dashboard feature enabled.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/meetings?type=past&from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&group_id=TaVA8QKik_1233&include_fields=tracking_fields",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"meetings"
											],
											"query": [
												{
													"key": "type",
													"value": "past"
												},
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "group_id",
													"value": "TaVA8QKik_1233"
												},
												{
													"key": "include_fields",
													"value": "tracking_fields"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"from\": \"2022-04-01\",\n  \"to\": \"2022-04-07\",\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"total_records\": 1,\n  \"meetings\": [\n    {\n      \"host\": \"jchill meeting\",\n      \"custom_keys\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"dept\": \"Developers\",\n      \"duration\": \"00:56\",\n      \"email\": \"user@example.com\",\n      \"end_time\": \"2022-01-04T07:50:47Z\",\n      \"has_3rd_party_audio\": true,\n      \"has_archiving\": true,\n      \"has_pstn\": true,\n      \"has_recording\": true,\n      \"has_screen_share\": true,\n      \"has_sip\": true,\n      \"has_video\": true,\n      \"has_voip\": true,\n      \"id\": 93201235621,\n      \"in_room_participants\": 2,\n      \"participants\": 2,\n      \"start_time\": \"2022-01-04T08:04:27Z\",\n      \"topic\": \"Share Now\",\n      \"tracking_fields\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"user_type\": \"Licensed\",\n      \"uuid\": \"gm8s9L+PTEC+FG3sFbd1Cw==\",\n      \"audio_quality\": \"good\",\n      \"video_quality\": \"good\",\n      \"screen_share_quality\": \"good\"\n    },\n    {\n      \"host\": \"jchill meeting\",\n      \"custom_keys\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"dept\": \"Developers\",\n      \"duration\": \"00:56\",\n      \"email\": \"user@example.com\",\n      \"end_time\": \"2022-01-04T07:50:47Z\",\n      \"has_3rd_party_audio\": true,\n      \"has_archiving\": true,\n      \"has_pstn\": true,\n      \"has_recording\": true,\n      \"has_screen_share\": true,\n      \"has_sip\": true,\n      \"has_video\": true,\n      \"has_voip\": true,\n      \"id\": 93201235621,\n      \"in_room_participants\": 2,\n      \"participants\": 2,\n      \"start_time\": \"2022-01-04T08:04:27Z\",\n      \"topic\": \"Share Now\",\n      \"tracking_fields\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"user_type\": \"Licensed\",\n      \"uuid\": \"gm8s9L+PTEC+FG3sFbd1Cw==\",\n      \"audio_quality\": \"good\",\n      \"video_quality\": \"good\",\n      \"screen_share_quality\": \"good\"\n    }\n  ]\n}"
								},
								{
									"name": "**Error Code:** `300`<br>\nThe next page token is invalid or expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/meetings?type=past&from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&group_id=TaVA8QKik_1233&include_fields=tracking_fields",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"meetings"
											],
											"query": [
												{
													"key": "type",
													"value": "past"
												},
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "group_id",
													"value": "TaVA8QKik_1233"
												},
												{
													"key": "include_fields",
													"value": "tracking_fields"
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "webinars",
					"item": [
						{
							"name": "{webinar Id}",
							"item": [
								{
									"name": "participants",
									"item": [
										{
											"name": "Get webinar participants",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants?type=past&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId",
														"participants"
													],
													"query": [
														{
															"key": "type",
															"value": "past",
															"description": "The type of webinar to query: \n* `past` — All past webinars. \n* `live` - All live webinars. \n\nThis value defaults to `live`."
														},
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														},
														{
															"key": "include_fields",
															"value": "registrant_id",
															"description": "Additional fields to include in the query: \n* `registrant_id` — Include the webinar registrant's ID. The registrant ID is the [webinar registrant's unique ID](/api-reference/zoom-api/methods#operation/webinarRegistrants)."
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "ABCDE12345",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												},
												"description": "Use this API to return information about participants from live or past webinars. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n* Displays data for any users who are **not** part of the host's account (external users) unless they meet certain conditions. See [Email address display rules](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#email-address) for details. \n\n**Scopes:** `dashboard_webinars:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business, Education, or API Plan with Webinar add-on."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nWebinar participants returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants?type=past&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																},
																{
																	"key": "include_fields",
																	"value": "registrant_id"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"total_records\": 1,\n  \"participants\": [\n    {\n      \"audio_quality\": \"good\",\n      \"connection_type\": \"UDP\",\n      \"customer_key\": \"349589LkJyeW\",\n      \"data_center\": \"United States\",\n      \"device\": \"Phone\",\n      \"domain\": \"example.com\",\n      \"email\": \"user@example.com\",\n      \"from_sip_uri\": \"example.com\",\n      \"full_data_center\": \"United States;China (TJ RWG);\",\n      \"harddisk_id\": \"Disk01\",\n      \"id\": \"_f08HhPJS82MIVLuuFaJPg\",\n      \"ip_address\": \"10.100.49.58\",\n      \"join_time\": \"2022-01-13T05:27:09Z\",\n      \"leave_reason\": \"Host ended the webinar.\",\n      \"leave_time\": \"2022-01-13T05:41:01Z\",\n      \"location\": \"United States\",\n      \"mac_addr\": \"f85e-a012-92d8\",\n      \"microphone\": \"Plantronics BT600\",\n      \"network_type\": \"Wired\",\n      \"pc_name\": \"My PC\",\n      \"recording\": true,\n      \"registrant_id\": \"_f08HhPJS82MIVLuuFaJPg\",\n      \"role\": \"host\",\n      \"screen_share_quality\": \"good\",\n      \"share_application\": true,\n      \"share_desktop\": true,\n      \"share_whiteboard\": true,\n      \"sip_uri\": \"example.com\",\n      \"speaker\": \"speaker (2- High Definition Audio Device)\",\n      \"user_id\": \"33080320\",\n      \"user_name\": \"jchill\",\n      \"version\": \"4.0.1062.0111.8d11a6de\",\n      \"video_quality\": \"good\"\n    },\n    {\n      \"audio_quality\": \"good\",\n      \"connection_type\": \"UDP\",\n      \"customer_key\": \"349589LkJyeW\",\n      \"data_center\": \"United States\",\n      \"device\": \"Phone\",\n      \"domain\": \"example.com\",\n      \"email\": \"user@example.com\",\n      \"from_sip_uri\": \"example.com\",\n      \"full_data_center\": \"United States;China (TJ RWG);\",\n      \"harddisk_id\": \"Disk01\",\n      \"id\": \"_f08HhPJS82MIVLuuFaJPg\",\n      \"ip_address\": \"10.100.49.58\",\n      \"join_time\": \"2022-01-13T05:27:09Z\",\n      \"leave_reason\": \"Host ended the webinar.\",\n      \"leave_time\": \"2022-01-13T05:41:01Z\",\n      \"location\": \"United States\",\n      \"mac_addr\": \"f85e-a012-92d8\",\n      \"microphone\": \"Plantronics BT600\",\n      \"network_type\": \"Wired\",\n      \"pc_name\": \"My PC\",\n      \"recording\": true,\n      \"registrant_id\": \"_f08HhPJS82MIVLuuFaJPg\",\n      \"role\": \"host\",\n      \"screen_share_quality\": \"good\",\n      \"share_application\": true,\n      \"share_desktop\": true,\n      \"share_whiteboard\": true,\n      \"sip_uri\": \"example.com\",\n      \"speaker\": \"speaker (2- High Definition Audio Device)\",\n      \"user_id\": \"33080320\",\n      \"user_name\": \"jchill\",\n      \"version\": \"4.0.1062.0111.8d11a6de\",\n      \"video_quality\": \"good\"\n    }\n  ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {webinarId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants?type=past&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																},
																{
																	"key": "include_fields",
																	"value": "registrant_id"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis webinar's detail info is not available or ID is not valid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants?type=past&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																},
																{
																	"key": "include_fields",
																	"value": "registrant_id"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List webinar participant QoS",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/qos?type=past&page_size=10&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId",
														"participants",
														"qos"
													],
													"query": [
														{
															"key": "type",
															"value": "past",
															"description": "The type of webinar to query: \n* `past` — All past webinars. \n* `live` - All live webinars. \n\nThis value defaults to `live`."
														},
														{
															"key": "page_size",
															"value": "10",
															"description": "The number of items returned per page."
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "ABCDE12345",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												},
												"description": "Use this API to return a list of webinar participants from live or past webinars and the quality of service they received during the webinar. The data returned indicates the connection quality for sending/receiving video, audio, and shared content. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n* Displays data for any users who are **not** part of the host's account (external users) unless they meet certain conditions. See [Email address display rules](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#email-address) for details. \n\n**Scopes:** `dashboard_webinars:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business, Education, or API Plan with Webinar add-on."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nWebinar participants returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/qos?type=past&page_size=10&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "10"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"next_page_token\": \"y20RGLOiO2jTy3CMfnNRORmB51kAuhMy0e2\",\n  \"page_count\": 2,\n  \"page_size\": 10,\n  \"total_records\": 2,\n  \"participants\": [\n    {\n      \"device\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"domain\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"harddisk_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_address\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"join_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"leave_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"location\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"mac_addr\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"pc_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"user_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"user_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"user_qos\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"version\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"device\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"domain\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"harddisk_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ip_address\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"join_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"leave_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"location\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"mac_addr\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"pc_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"user_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"user_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"user_qos\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"version\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {webinarId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/qos?type=past&page_size=10&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "10"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis webinar's detail is not available or the Webinar ID is not valid.<br>\nThis webinar has not ended yet.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/qos?type=past&page_size=10&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "10"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get post webinar feedback",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/satisfaction?type=past&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId",
														"participants",
														"satisfaction"
													],
													"query": [
														{
															"key": "type",
															"value": "past",
															"description": "Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>\n\nIf you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings."
														},
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "ABCDE12345",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												},
												"description": "When a Webinar ends, each attendee will be prompted to share their Webinar experience by clicking either thumbs up or thumbs down. Use this API to retrieve the feedback submitted for a specific webinar. Note that this API only works for meetings scheduled after December 20, 2020.\n\n**Prerequisites:**\n* [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) setting must be enabled by the participant prior to the meeting.\n* The user making the API request must be enrolled in a Business or a higher plan.\n\n\n<br> **Scope:** `dashboard_webinars:read:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\n\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/satisfaction?type=past&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"satisfaction"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"next_page_token\": \"ZkFS5lmGLWTjLMqt2IVCBpyKwSnbDrgJzo2\",\n  \"page_size\": 30,\n  \"participants\": [\n    {\n      \"date_time\": \"2022-01-19T07:34:09Z\",\n      \"email\": \"user@example.com\",\n      \"quality\": \"GOOD\",\n      \"user_id\": \"NJmuvOjlRm2r7yGUPLLOhw\"\n    },\n    {\n      \"date_time\": \"2022-01-19T07:34:09Z\",\n      \"email\": \"user@example.com\",\n      \"quality\": \"GOOD\",\n      \"user_id\": \"NJmuvOjlRm2r7yGUPLLOhw\"\n    }\n  ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `200`<br>\nOnly available for paid accounts that have dashboard feature enabled.\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/satisfaction?type=past&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"satisfaction"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nWebinar ID is invalid or not end.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/satisfaction?type=past&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"satisfaction"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get sharing/recording details",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/sharing?type=past&page_size=30&next_page_token=0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId",
														"participants",
														"sharing"
													],
													"query": [
														{
															"key": "type",
															"value": "past",
															"description": "The type of webinar to query: \n* `past` — All past webinars. \n* `live` - All live webinars. \n\nThis value defaults to `live`."
														},
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														},
														{
															"key": "next_page_token",
															"value": "0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "ABCDE12345",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												},
												"description": "Retrieve the sharing and recording details of participants from live or past webinars. <br><br>\n**Scopes:** `dashboard_webinars:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` <br>\n**Prerequisites:**<br>\n* Business, Education or API Plan with Webinar add-on.\n\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nWebinar participants returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/sharing?type=past&page_size=30&next_page_token=0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"sharing"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"total_records\": 1,\n  \"participants\": [\n    {\n      \"details\": [\n        {\n          \"content\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"end_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"start_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"content\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"end_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"start_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ],\n      \"id\": \"AVhfQ737SZ6aM8Lh60HrQg\",\n      \"user_id\": \"28513280\",\n      \"user_name\": \"jchill\"\n    },\n    {\n      \"details\": [\n        {\n          \"content\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"end_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"start_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"content\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"end_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"start_time\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ],\n      \"id\": \"AVhfQ737SZ6aM8Lh60HrQg\",\n      \"user_id\": \"28513280\",\n      \"user_name\": \"jchill\"\n    }\n  ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {webinarId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/sharing?type=past&page_size=30&next_page_token=0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"sharing"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis webinar's detail info is not available or ID is not valid.<br>\nThis webinar has not ended yet.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/sharing?type=past&page_size=30&next_page_token=0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"sharing"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "0JblM1ZHFIdXjAHefkYOfTdCw1Lq9H1urw2"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get webinar participant QoS",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/:participantId/qos?type=past",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId",
														"participants",
														":participantId",
														"qos"
													],
													"query": [
														{
															"key": "type",
															"value": "past",
															"description": "The type of webinar to query: \n* `past` — All past webinars. \n* `live` - All live webinars. \n\nThis value defaults to `live`."
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "ABCDE12345",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
														},
														{
															"key": "participantId",
															"value": "32977920",
															"description": "(Required) The participant's ID."
														}
													]
												},
												"description": "Use this API to return the quality of service (QoS) for participants during live or past webinars. This data returned indicates the connection quality for sending/receiving video, audio, and shared content. The API returns this data for either the API request or when the API request was last received. \n\nWhen the sender sends its data, a timestamp is attached to the sender's data packet. The receiver then returns this timestamp to the sender. This helps determine the upstream and downstream latency, which includes the application processing time. The latency data returned is the five second average and five second maximum. \n\nThis API will **not** return data if there is no data being sent or received at the time of request. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n* Displays data for any users who are **not** part of the host's account (external users) unless they meet certain conditions. See [Email address display rules](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#email-address) for details. \n\n**Scopes:** `dashboard_webinars:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business, Education, or API Plan with Zoom Rooms set up."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nWebinar participant QOS returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/:participantId/qos?type=past",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																":participantId",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																},
																{
																	"key": "participantId",
																	"value": "32977920",
																	"description": "(Required) The participant's ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"device\": \"Phone\",\n  \"domain\": \"example.com\",\n  \"harddisk_id\": \"Disk01\",\n  \"ip_address\": \"10.100.111.8\",\n  \"join_time\": \"2022-03-01T10:15:14Z\",\n  \"leave_time\": \"2022-03-01T10:15:14Z\",\n  \"location\": \"United States\",\n  \"mac_addr\": \"f85e-a012-92d8\",\n  \"pc_name\": \"HW0010449\",\n  \"user_id\": \"20161536\",\n  \"user_name\": \"jchill\",\n  \"user_qos\": [\n    {\n      \"as_device_from_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"as_device_to_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"as_input\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"as_output\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"audio_device_from_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"audio_device_to_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"audio_input\": {\n        \"avg_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"bitrate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"jitter\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"latency\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"max_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"audio_output\": {\n        \"avg_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"bitrate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"jitter\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"latency\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"max_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"cpu_usage\": {\n        \"system_max_cpu_usage\": \"11%\",\n        \"zoom_avg_cpu_usage\": \"0%\",\n        \"zoom_max_cpu_usage\": \"2%\",\n        \"zoom_min_cpu_usage\": \"0%\"\n      },\n      \"date_time\": \"2022-03-01T10:16:00Z\",\n      \"video_device_from_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.03%\"\n      },\n      \"video_device_to_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"video_input\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"video_output\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"as_device_from_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"as_device_to_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"as_input\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"as_output\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"audio_device_from_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"audio_device_to_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"audio_input\": {\n        \"avg_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"bitrate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"jitter\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"latency\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"max_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"audio_output\": {\n        \"avg_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"bitrate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"jitter\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"latency\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"max_loss\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"cpu_usage\": {\n        \"system_max_cpu_usage\": \"11%\",\n        \"zoom_avg_cpu_usage\": \"0%\",\n        \"zoom_max_cpu_usage\": \"2%\",\n        \"zoom_min_cpu_usage\": \"0%\"\n      },\n      \"date_time\": \"2022-03-01T10:16:00Z\",\n      \"video_device_from_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.03%\"\n      },\n      \"video_device_to_crc\": {\n        \"avg_loss\": \"0.03%\",\n        \"bitrate\": \"27.15kbps\",\n        \"jitter\": \"0ms\",\n        \"latency\": \"126 ms\",\n        \"max_loss\": \"0.4%\"\n      },\n      \"video_input\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"video_output\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"version\": \"5.9.1.2581\"\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {webinarId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/:participantId/qos?type=past",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																":participantId",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																},
																{
																	"key": "participantId",
																	"value": "32977920",
																	"description": "(Required) The participant's ID."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis webinar's detail info is not available or ID is not valid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/:participantId/qos?type=past",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																":participantId",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "past"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "ABCDE12345",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
																},
																{
																	"key": "participantId",
																	"value": "32977920",
																	"description": "(Required) The participant's ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get webinar details",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/webinars/:webinarId?type=past",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"webinars",
												":webinarId"
											],
											"query": [
												{
													"key": "type",
													"value": "past",
													"description": "The type of webinar to query: \n* `past` — All past webinars. \n* `live` - All live webinars. \n\nThis value defaults to `live`."
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										},
										"description": "Retrieve details from live or past webinars.<br><br>\n**Scopes:** `dashboard_webinars:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Business, Education or API Plan with Webinar add-on.\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nWebinar details returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId?type=past",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId"
													],
													"query": [
														{
															"key": "type",
															"value": "past"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "ABCDE12345",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"host\": \"user@example.com\",\n  \"custom_keys\": [\n    {\n      \"key\": \"key1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"key\": \"key1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"dept\": \"Developers\",\n  \"duration\": \"55:01\",\n  \"email\": \"user@example.com\",\n  \"end_time\": \"2022-01-13T07:00:46Z\",\n  \"has_3rd_party_audio\": true,\n  \"has_archiving\": true,\n  \"has_pstn\": true,\n  \"has_recording\": true,\n  \"has_screen_share\": true,\n  \"has_sip\": true,\n  \"has_video\": true,\n  \"has_voip\": true,\n  \"id\": 99264817135,\n  \"participants\": 1,\n  \"start_time\": \"2022-01-13T05:27:11Z\",\n  \"topic\": \"my webinar\",\n  \"user_type\": \"Licensed\",\n  \"uuid\": \"NknQtFSgSUSEYt2a9gc13A==\",\n  \"audio_quality\": \"good\",\n  \"video_quality\": \"good\",\n  \"screen_share_quality\": \"good\"\n}"
										},
										{
											"name": "**Error Code:** `200`<br>\nCan not access webinar info, {webinarId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId?type=past",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId"
													],
													"query": [
														{
															"key": "type",
															"value": "past"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "ABCDE12345",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThe webinar has not ended yet or the Webinar ID is not valid.<br>\nThis webinar's detail is not available.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId?type=past",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId"
													],
													"query": [
														{
															"key": "type",
															"value": "past"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "ABCDE12345",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List webinars",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/webinars?type=past&from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&group_id=TaVA8QKik_1233",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"webinars"
									],
									"query": [
										{
											"key": "type",
											"value": "past",
											"description": "The type of webinar to query: \n* `past` — All past webinars. \n* `live` - All live webinars. \n\nThis value defaults to `live`."
										},
										{
											"key": "from",
											"value": "2022-01-01",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "2022-01-28",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "group_id",
											"value": "TaVA8QKik_1233",
											"description": "The group ID. To get a group ID, use the [**List groups**](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API. \n\n **Note:** The API response will only contain meetings where the host is a member of the queried group ID."
										}
									]
								},
								"description": "List all the live or past webinars from a specified period of time. <br><br>\n**Scopes:** `dashboard_webinars:read:admin`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br>\n**Prerequisites:**<br>\n* Business, Education or API Plan with Webinar add-on.\n\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeetings returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/webinars?type=past&from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&group_id=TaVA8QKik_1233",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"webinars"
											],
											"query": [
												{
													"key": "type",
													"value": "past"
												},
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "group_id",
													"value": "TaVA8QKik_1233"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"from\": \"2022-01-01\",\n  \"to\": \"2022-01-30\",\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"total_records\": 1,\n  \"webinars\": [\n    {\n      \"host\": \"user@example.com\",\n      \"custom_keys\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"dept\": \"Developers\",\n      \"duration\": \"55:01\",\n      \"email\": \"user@example.com\",\n      \"end_time\": \"2022-01-13T07:00:46Z\",\n      \"has_3rd_party_audio\": true,\n      \"has_archiving\": true,\n      \"has_pstn\": true,\n      \"has_recording\": true,\n      \"has_screen_share\": true,\n      \"has_sip\": true,\n      \"has_video\": true,\n      \"has_voip\": true,\n      \"id\": 99264817135,\n      \"participants\": 1,\n      \"start_time\": \"2022-01-13T05:27:11Z\",\n      \"topic\": \"my webinar\",\n      \"user_type\": \"Licensed\",\n      \"uuid\": \"NknQtFSgSUSEYt2a9gc13A==\",\n      \"audio_quality\": \"good\",\n      \"video_quality\": \"good\",\n      \"screen_share_quality\": \"good\"\n    },\n    {\n      \"host\": \"user@example.com\",\n      \"custom_keys\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"dept\": \"Developers\",\n      \"duration\": \"55:01\",\n      \"email\": \"user@example.com\",\n      \"end_time\": \"2022-01-13T07:00:46Z\",\n      \"has_3rd_party_audio\": true,\n      \"has_archiving\": true,\n      \"has_pstn\": true,\n      \"has_recording\": true,\n      \"has_screen_share\": true,\n      \"has_sip\": true,\n      \"has_video\": true,\n      \"has_voip\": true,\n      \"id\": 99264817135,\n      \"participants\": 1,\n      \"start_time\": \"2022-01-13T05:27:11Z\",\n      \"topic\": \"my webinar\",\n      \"user_type\": \"Licensed\",\n      \"uuid\": \"NknQtFSgSUSEYt2a9gc13A==\",\n      \"audio_quality\": \"good\",\n      \"video_quality\": \"good\",\n      \"screen_share_quality\": \"good\"\n    }\n  ]\n}"
								},
								{
									"name": "**Error Code:** `200`<br>\nThe next page token is invalid or has expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/webinars?type=past&from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&group_id=TaVA8QKik_1233",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"webinars"
											],
											"query": [
												{
													"key": "type",
													"value": "past"
												},
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "group_id",
													"value": "TaVA8QKik_1233"
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "zoomrooms",
					"item": [
						{
							"name": "List Zoom Rooms",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/zoomrooms?page_size=30&page_number=1&next_page_token=LkbB9n92siRxgYkffZ8KhApZCQMZpNrN0d2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"zoomrooms"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "page_number",
											"value": "1",
											"description": "The page number of the current page in the returned records."
										},
										{
											"key": "next_page_token",
											"value": "LkbB9n92siRxgYkffZ8KhApZCQMZpNrN0d2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									]
								},
								"description": "List information on all Zoom Rooms in an account.<br><br>\n**Scopes:** `dashboard_zr:read:admin`\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br>\n **Prerequisites:**<br>\n* Business, Education or API Plan with Zoom Rooms set up.\n\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nList of Zoom rooms returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/zoomrooms?page_size=30&page_number=1&next_page_token=LkbB9n92siRxgYkffZ8KhApZCQMZpNrN0d2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"zoomrooms"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "LkbB9n92siRxgYkffZ8KhApZCQMZpNrN0d2"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"next_page_token\": \"LkbB9n92siRxgYkffZ8KhApZCQMZpNrN0d2\",\n  \"page_count\": 2,\n  \"page_number\": 1,\n  \"page_size\": 30,\n  \"total_records\": 30,\n  \"zoom_rooms\": [\n    {\n      \"account_type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"calender_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"camera\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"device_ip\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"health\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"issues\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"last_start_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"location\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"location_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"microphone\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"room_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"speaker\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"status\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"account_type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"calender_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"camera\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"device_ip\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"health\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"issues\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"last_start_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"location\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"location_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"microphone\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"room_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"speaker\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"status\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get top 25 issues of Zoom Rooms",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/zoomrooms/issues?from=2022-01-01&to=2022-01-28",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"zoomrooms",
										"issues"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "2022-01-28",
											"description": "(Required) End date."
										}
									]
								},
								"description": "Get top 25 issues of Zoom Rooms.<br>\n**Scopes:** `dashboard_zr:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n **Prerequisites:**<br>\n* Business, Education or API Plan with Zoom Rooms set up.\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nZoom Room Issue details returned",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/zoomrooms/issues?from=2022-01-01&to=2022-01-28",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"zoomrooms",
												"issues"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"from\": \"2022-01-01\",\n  \"to\": \"2022-01-30\",\n  \"total_records\": 20,\n  \"issues\": [\n    {\n      \"issue_name\": \"Untrusted certificate is detected\",\n      \"zoom_rooms_count\": 1\n    },\n    {\n      \"issue_name\": \"Untrusted certificate is detected\",\n      \"zoom_rooms_count\": 1\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get Zoom Rooms details",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/zoomrooms/:zoomroomId?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"zoomrooms",
										":zoomroomId"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "2022-01-28",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									],
									"variable": [
										{
											"key": "zoomroomId",
											"value": "azGzXIVUTWOdEQB79aNHkA",
											"description": "(Required) The Zoom room ID."
										}
									]
								},
								"description": "The Zoom Rooms dashboard metrics lets you know the type of configuration a Zoom room has and details on the meetings held in that room. \n\nUse this API to retrieve information on a specific room.<br><br>\n**Scopes:** `dashboard_zr:read:admin`<br> <br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`**Prerequisites:**<br>\n* Business, Education or API Plan with Zoom Rooms set up.\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nZoom room returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/zoomrooms/:zoomroomId?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"zoomrooms",
												":zoomroomId"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											],
											"variable": [
												{
													"key": "zoomroomId",
													"value": "azGzXIVUTWOdEQB79aNHkA",
													"description": "(Required) The Zoom room ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"account_type\": \"Work Email\",\n  \"calender_name\": \"666555\",\n  \"camera\": \"FaceTime HD Camera\",\n  \"device_ip\": \"Computer : 10.100.93.138\",\n  \"email\": \"user@example.com\",\n  \"health\": \"critical\",\n  \"id\": \"_hjJhB0cQRi9Xm3HX64Ggw\",\n  \"issues\": [\n    \"Zoom room is offline\",\n    \"Zoom room is offline\"\n  ],\n  \"last_start_time\": \"2020-11-04T01:06:41Z\",\n  \"location\": \"floor1\",\n  \"microphone\": \"Built-in Microphone (External Microphone)\",\n  \"room_name\": \"jchill room\",\n  \"speaker\": \"Built-in Output (Headphones)\",\n  \"status\": \"Offline\",\n  \"live_meeting\": {\n    \"host\": \"API\",\n    \"custom_keys\": [\n      {\n        \"key\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"key\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ],\n    \"dept\": \"Developers\",\n    \"duration\": \"02:21\",\n    \"email\": \"user@example.com\",\n    \"end_time\": \"2022-03-01T10:17:35Z\",\n    \"has_3rd_party_audio\": true,\n    \"has_archiving\": true,\n    \"has_pstn\": true,\n    \"has_recording\": true,\n    \"has_screen_share\": true,\n    \"has_sip\": true,\n    \"has_video\": true,\n    \"has_voip\": true,\n    \"id\": 575734086,\n    \"in_room_participants\": 2,\n    \"participants\": 2,\n    \"start_time\": \"2022-03-01T10:15:14Z\",\n    \"topic\": \"API Meeting\",\n    \"user_type\": \"Licensed\",\n    \"uuid\": \"gaqOKVN9RAaDHKYWEcASXg==\"\n  },\n  \"past_meetings\": {\n    \"from\": \"2022-04-07\",\n    \"to\": \"2022-04-08\",\n    \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n    \"page_count\": 1,\n    \"page_size\": 30,\n    \"total_records\": 1,\n    \"meetings\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}"
								},
								{
									"name": "**Error Code:** `300`<br>\nThe next page token is either invalid or has expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/zoomrooms/:zoomroomId?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"zoomrooms",
												":zoomroomId"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											],
											"variable": [
												{
													"key": "zoomroomId",
													"value": "azGzXIVUTWOdEQB79aNHkA",
													"description": "(Required) The Zoom room ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get chat metrics",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/metrics/chat?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"metrics",
								"chat"
							],
							"query": [
								{
									"key": "from",
									"value": "2022-01-01",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "2022-01-28",
									"description": "(Required) End date."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "Get [metrics](https://support.zoom.us/hc/en-us/articles/204654719-Dashboard#h_cc7e9749-1c70-4afb-a9a2-9680654821e4) for how users are utilizing Zoom Chat to send messages.\n\nUse the `from` and `to` query parameters to specify a monthly date range for the dashboard data. The monthly date range must be within the last six months.\n\n> **Note:** To query chat metrics from July 1, 2021 and later, use this endpoint instead of the [**Get IM metrics**](/api-reference/zoom-api/methods#operation/dashboardIM) API.\n\n**Scope:** `dashboard_im:read:admin`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`\n\n**Prerequisites:**\n\n* Business or a higher plan"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nChat details returned.<br>\nOnly available for paid accounts that have enabled the dashboard feature.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/chat?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"chat"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01"
										},
										{
											"key": "to",
											"value": "2022-01-28"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"from\": \"2022-04-06\",\n  \"next_page_token\": \"LkbB9n92siRxgYkffZ8KhApZCQMZpNrN0d2\",\n  \"page_size\": 30,\n  \"to\": \"2022-04-07\",\n  \"users\": [\n    {\n      \"audio_sent\": 0,\n      \"code_sippet_sent\": 0,\n      \"email\": \"user@example.com\",\n      \"files_sent\": 0,\n      \"giphys_sent\": 0,\n      \"group_sent\": 0,\n      \"images_sent\": 0,\n      \"p2p_sent\": 0,\n      \"text_sent\": 0,\n      \"total_sent\": 0,\n      \"user_id\": \"-0hwjTHMR9uteSRrygQXMA\",\n      \"user_name\": \"jchill\",\n      \"video_sent\": 0\n    },\n    {\n      \"audio_sent\": 0,\n      \"code_sippet_sent\": 0,\n      \"email\": \"user@example.com\",\n      \"files_sent\": 0,\n      \"giphys_sent\": 0,\n      \"group_sent\": 0,\n      \"images_sent\": 0,\n      \"p2p_sent\": 0,\n      \"text_sent\": 0,\n      \"total_sent\": 0,\n      \"user_id\": \"-0hwjTHMR9uteSRrygQXMA\",\n      \"user_name\": \"jchill\",\n      \"video_sent\": 0\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Get CRC port usage",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/metrics/crc?from=2022-01-01&to=2022-01-28",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"metrics",
								"crc"
							],
							"query": [
								{
									"key": "from",
									"value": "2022-01-01",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "2022-01-28",
									"description": "(Required) End date."
								}
							]
						},
						"description": "A Cloud Room Connector allows H.323/SIP endpoints to connect to a Zoom meeting. \n\nUse this API to get the hour by hour CRC Port usage for a specified period of time. <aside class='notice'>We will provide the report for a maximum of one month. For example, if \"from\" is set to \"2017-08-05\" and \"to\" is set to \"2017-10-10\", we will adjust \"from\" to \"2017-09-10\".</aside><br><br>\n**Prerequisites:**<br>\n* Business, Education or API Plan.\n* Room Connector must be enabled on the account.<br><br>\n**Scopes:** `dashboard_crc:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` "
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nCRC usage returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/crc?from=2022-01-01&to=2022-01-28",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"crc"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01"
										},
										{
											"key": "to",
											"value": "2022-01-28"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"from\": \"2022-03-01\",\n  \"to\": \"2022-03-30\",\n  \"crc_ports_usage\": [\n    {\n      \"crc_ports_hour_usage\": [\n        {\n          \"hour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"max_usage\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"total_usage\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"hour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"max_usage\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"total_usage\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ],\n      \"date_time\": \"2022-03-01\"\n    },\n    {\n      \"crc_ports_hour_usage\": [\n        {\n          \"hour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"max_usage\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"total_usage\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"hour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"max_usage\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"total_usage\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ],\n      \"date_time\": \"2022-03-01\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Get IM metrics",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/metrics/im?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"metrics",
								"im"
							],
							"query": [
								{
									"key": "from",
									"value": "2022-01-01",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "2022-01-28",
									"description": "(Required) End date."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "Get [metrics](https://support.zoom.us/hc/en-us/articles/204654719-Dashboard#h_cc7e9749-1c70-4afb-a9a2-9680654821e4) on how users are utilizing the Zoom Chat client.\n\nYou can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.<p style=\"background-color:#e1f5fe; color:#000000; padding:8px\"><b>Deprecated:</b> We will completely deprecate this endpoint in a future release. You can continue using this endpoint to query data for messages sent <b>before</b> July 1, 2021.</br></br>To get metrics on chat messages sent <b>on and after</b> July 1, 2021, use the [**Get chat metrics**](/api-reference/zoom-api/methods#operation/dashboardChat) API.</p>\n\n**Scopes:** `dashboard_im:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`\n\n**Prerequisites:**\n\n* Business or a higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nIM details returned.<br>\nOnly available for paid accounts that have enabled the dashboard feature.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/im?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"im"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01"
										},
										{
											"key": "to",
											"value": "2022-01-28"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"from\": \"2022-04-06\",\n  \"to\": \"2022-04-07\",\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"total_records\": 1,\n  \"users\": [\n    {\n      \"calls_receive\": 0,\n      \"calls_send\": 0,\n      \"email\": \"user@example.com\",\n      \"emoji_receive\": 0,\n      \"emoji_send\": 0,\n      \"files_receive\": 0,\n      \"files_send\": 0,\n      \"group_receive\": 0,\n      \"group_send\": 0,\n      \"images_receive\": 0,\n      \"images_send\": 0,\n      \"total_receive\": 0,\n      \"total_send\": 0,\n      \"user_id\": \"-tbjQOvySz6EGd8DPQYvhw\",\n      \"user_name\": \"jchill\",\n      \"videos_receive\": 0,\n      \"videos_send\": 0,\n      \"voice_receive\": 0,\n      \"voice_send\": 0\n    },\n    {\n      \"calls_receive\": 0,\n      \"calls_send\": 0,\n      \"email\": \"user@example.com\",\n      \"emoji_receive\": 0,\n      \"emoji_send\": 0,\n      \"files_receive\": 0,\n      \"files_send\": 0,\n      \"group_receive\": 0,\n      \"group_send\": 0,\n      \"images_receive\": 0,\n      \"images_send\": 0,\n      \"total_receive\": 0,\n      \"total_send\": 0,\n      \"user_id\": \"-tbjQOvySz6EGd8DPQYvhw\",\n      \"user_name\": \"jchill\",\n      \"videos_receive\": 0,\n      \"videos_send\": 0,\n      \"voice_receive\": 0,\n      \"voice_send\": 0\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Get meeting quality scores",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/metrics/quality?from=2022-01-01&to=2022-01-28&type=meeting",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"metrics",
								"quality"
							],
							"query": [
								{
									"key": "from",
									"value": "2022-01-01",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "2022-01-28",
									"description": "(Required) End date."
								},
								{
									"key": "type",
									"value": "meeting",
									"description": "The type of meeting quality score to query: \n* `meeting` — Query by meetings. \n* `participants` — Query by meeting participants."
								}
							]
						},
						"description": "Use this API to return [meeting quality score](https://support.zoom.us/hc/en-us/articles/360061244651-Meeting-quality-scores-and-network-alerts-on-Dashboard) information. Meeting quality scores are based on the mean opinion score (MOS). The MOS measures a meeting's quality on a scale of \"Good\" (5-4), \"Fair\" (4-3), \"Poor\" (3-2), or \"Bad\" (2-1). \n\n**Scopes:** `dashboard_home:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business or a higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nMeeting quality returned",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/quality?from=2022-01-01&to=2022-01-28&type=meeting",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"quality"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01"
										},
										{
											"key": "to",
											"value": "2022-01-28"
										},
										{
											"key": "type",
											"value": "meeting"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"from\": \"2022-02-01\",\n  \"quality\": {\n    \"audio\": {\n      \"bad\": 0,\n      \"fair\": 0,\n      \"good\": 0,\n      \"poor\": 0\n    },\n    \"screen_share\": {\n      \"bad\": 0,\n      \"fair\": 0,\n      \"good\": 0,\n      \"poor\": 0\n    },\n    \"video\": {\n      \"bad\": 0,\n      \"fair\": 0,\n      \"good\": 0,\n      \"poor\": 0\n    }\n  },\n  \"to\": \"2022-02-28\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "past webinars",
			"item": [
				{
					"name": "{webinar Id}",
					"item": [
						{
							"name": "List past webinar files",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:webinarId/files",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":webinarId",
										"files"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "",
											"description": "(Required) "
										}
									]
								},
								"description": "**Note: This API has been deprecated and is no longer supported due to GCM encryption updates for security purposes.**\n\nList files sent via in-meeting chat during a meeting. The in-meeting files are deleted after 24 hours of the meeting completion time. \n<br><br>\n**Scope:** `webinar:read`, `webinar:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nFiles retrieved successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"files"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"in_meeting_files\": [\n    {\n      \"download_url\": \"\",\n      \"file_name\": \"\",\n      \"file_size\": 51171275\n    },\n    {\n      \"download_url\": \"\",\n      \"file_name\": \"\",\n      \"file_size\": 41232018\n    }\n  ],\n  \"total_records\": -87013132\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"files"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `3001`<br>\nWebinar ID is invalid or not end.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"files"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List past webinar instances",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:webinarId/instances",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":webinarId",
										"instances"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "List past webinar instances.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nList of past webinar instances returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"instances"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"webinars\": [\n    {\n      \"start_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"uuid\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"start_time\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"uuid\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>\nInvalid webinar ID.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"instances"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"instances"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List webinar participants",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:webinarId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":webinarId",
										"participants"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "95204914252",
											"description": "(Required) The webinar's ID. To get this value, use the [**List webinars**](/api-reference/zoom-api/methods#operation/webinars) API."
										}
									]
								},
								"description": "Use this API to list all the participants who attended a webinar hosted in the past. \n\n**Scopes:** `webinar:read:admin`, `webinar:read` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n**Prerequisites:** \n* A Pro or higher plan with a Webinar add-on."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nParticipants list returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "95204914252",
													"description": "(Required) The webinar's ID. To get this value, use the [**List webinars**](/api-reference/zoom-api/methods#operation/webinars) API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"participants\": [\n    {\n      \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\",\n      \"name\": \"Jill Chill\",\n      \"user_email\": \"jchill@example.com\"\n    },\n    {\n      \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\",\n      \"name\": \"Jill Chill\",\n      \"user_email\": \"jchill@example.com\"\n    }\n  ],\n  \"total_records\": 1\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad request**<br>\n\n**Error Code:** `200`<br>\nNo permission.<br>\nOnly available for paid account: {accountId}.<br><br>\n**Error Code:**  `300`<br>\nThe next page token is invalid or expired.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "95204914252",
													"description": "(Required) The webinar's ID. To get this value, use the [**List webinars**](/api-reference/zoom-api/methods#operation/webinars) API."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`\n**Error Code:**`3001`<br>\nWebinar does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "95204914252",
													"description": "(Required) The webinar's ID. To get this value, use the [**List webinars**](/api-reference/zoom-api/methods#operation/webinars) API."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List past webinar poll results",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:webinarId/polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":webinarId",
										"polls"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "ABCDE12345",
											"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
										}
									]
								},
								"description": "The polling feature for webinar allows you to create single choice or multiple choice polling questions for your webinars. Use this API to retrieve the results for Webinar Polls of a specific Webinar.\n\n**Prerequisites:**<br>\n* [Webinar license](https://zoom.us/webinar)<br>\n**Scopes**: `webinar:read:admin`, `webinar:read`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nPolls returned successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 95204914252,\n  \"questions\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"name\": \"Jill Chill\",\n      \"question_details\": [\n        {\n          \"answer\": \"Good\",\n          \"date_time\": \"2022-03-26T05:37:59Z\",\n          \"polling_id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n          \"question\": \"How are you?\"\n        },\n        {\n          \"answer\": \"Good\",\n          \"date_time\": \"2022-03-26T05:37:59Z\",\n          \"polling_id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n          \"question\": \"How are you?\"\n        }\n      ]\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"name\": \"Jill Chill\",\n      \"question_details\": [\n        {\n          \"answer\": \"Good\",\n          \"date_time\": \"2022-03-26T05:37:59Z\",\n          \"polling_id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n          \"question\": \"How are you?\"\n        },\n        {\n          \"answer\": \"Good\",\n          \"date_time\": \"2022-03-26T05:37:59Z\",\n          \"polling_id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n          \"question\": \"How are you?\"\n        }\n      ]\n    }\n  ],\n  \"start_time\": \"2022-03-26T05:37:59Z\",\n  \"uuid\": \"Bznyg8KZTdCVbQxvS/oZ7w==\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `401` **Unauthorized**<br>\n**Error Code:** `1010`<br>  User does not belong to this account:{accountId}.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not found**<br>\nWebinar not found.<br>\n\n**Error Code:** `3001`<br>\nWebinar ID is invalid or not end.<br>\nThis webinar id does not belong to you:{webinarId}.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List Q&A of past webinar",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:webinarId/qa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":webinarId",
										"qa"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "ABCDE12345",
											"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
										}
									]
								},
								"description": "The [Question & Answer (Q&A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for Webinars allows attendees to ask questions during the Webinar and for the panelists, co-hosts and host to answer their questions.<br>\nUse this API to list Q&A of a specific Webinar.\n\n**Prerequisites:**<br>\n* [Webinar license](https://zoom.us/webinar)<br>\n**Scopes**: `webinar:read:admin`, `webinar:read`<br>\n <br>\n\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nQ&A returned successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/qa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"qa"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 95204914252,\n  \"questions\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"name\": \"Jill Chill\",\n      \"question_details\": [\n        {\n          \"answer\": \"Good\",\n          \"question\": \"How are you?\"\n        },\n        {\n          \"answer\": \"Good\",\n          \"question\": \"How are you?\"\n        }\n      ]\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"name\": \"Jill Chill\",\n      \"question_details\": [\n        {\n          \"answer\": \"Good\",\n          \"question\": \"How are you?\"\n        },\n        {\n          \"answer\": \"Good\",\n          \"question\": \"How are you?\"\n        }\n      ]\n    }\n  ],\n  \"start_time\": \"2022-03-26T06:44:14Z\",\n  \"uuid\": \"Bznyg8KZTdCVbQxvS/oZ7w==\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `401` **Unauthorized**<br>\n**Error Code:** `1010`<br>  User does not belong to this account:{accountId}.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/qa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"qa"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not found**<br>\nWebinar not found.<br>\n\n**Error Code:** `3001`<br>\nWebinar ID is invalid or not end.<br>\nThis webinar id does not belong to you:{webinarId}.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/qa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"qa"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get webinar absentees",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/past_webinars/:WebinarUUID/absentees?occurrence_id=1648194360000&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"past_webinars",
								":WebinarUUID",
								"absentees"
							],
							"query": [
								{
									"key": "occurrence_id",
									"value": "1648194360000",
									"description": "The meeting or webinar occurrence ID."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							],
							"variable": [
								{
									"key": "WebinarUUID",
									"value": "Bznyg8KZTdCVbQxvS/oZ7w==",
									"description": "(Required) The Webinar UUID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."
								}
							]
						},
						"description": "List absentees of a webinar.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSuccess.<br>**Error Code:** `200`<br>\nWebinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:WebinarUUID/absentees?occurrence_id=1648194360000&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":WebinarUUID",
										"absentees"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										}
									],
									"variable": [
										{
											"key": "WebinarUUID",
											"value": "Bznyg8KZTdCVbQxvS/oZ7w==",
											"description": "(Required) The Webinar UUID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"next_page_token\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"page_count\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"page_number\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"page_size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"total_records\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"registrants\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
						},
						{
							"name": "**Error Code:** `300`<br>Invalid webinar UUID.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:WebinarUUID/absentees?occurrence_id=1648194360000&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":WebinarUUID",
										"absentees"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										}
									],
									"variable": [
										{
											"key": "WebinarUUID",
											"value": "Bznyg8KZTdCVbQxvS/oZ7w==",
											"description": "(Required) The Webinar UUID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."
										}
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `300`<br>\nThe request could not be completed because you have provided an invalid occurrence ID: {occurrenceId}<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n**Error Co",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:WebinarUUID/absentees?occurrence_id=1648194360000&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":WebinarUUID",
										"absentees"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										}
									],
									"variable": [
										{
											"key": "WebinarUUID",
											"value": "Bznyg8KZTdCVbQxvS/oZ7w==",
											"description": "(Required) The Webinar UUID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>Meeting ID is invalid or not end.\n\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:WebinarUUID/absentees?occurrence_id=1648194360000&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":WebinarUUID",
										"absentees"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										}
									],
									"variable": [
										{
											"key": "WebinarUUID",
											"value": "Bznyg8KZTdCVbQxvS/oZ7w==",
											"description": "(Required) The Webinar UUID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "report",
			"item": [
				{
					"name": "billing",
					"item": [
						{
							"name": "Get billing reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/billing",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"billing"
									]
								},
								"description": "Get department billing reports of a Zoom account.\n\n**Prerequisites:**<br>\n* Pro or a higher account with Department Billing option enabled. Contact Zoom Support team for details.\n\n**Scopes:** `report:read:admin`, `report:master`\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nBilling report returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/billing",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"billing"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"billing_reports\": [\n    {\n      \"end_date\": \"2022-03-25\",\n      \"id\": \"indfhgfhfho\",\n      \"start_date\": \"2022-03-25\",\n      \"tax_amount\": \"456\",\n      \"total_amount\": \"456\",\n      \"type\": 1\n    },\n    {\n      \"end_date\": \"2022-03-25\",\n      \"id\": \"indfhgfhfho\",\n      \"start_date\": \"2022-03-25\",\n      \"tax_amount\": \"456\",\n      \"total_amount\": \"456\",\n      \"type\": 1\n    }\n  ],\n  \"currency\": \"USD\",\n  \"download_url\": \"https://zoom.us/file/download/qreigNgqTk24RNnGJDxpDg?filename=48k.png&jwt=downloadjwt\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br> No permission.\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/billing",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"billing"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get billing invoice reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/billing/invoices?billing_id=indfhgfhfho",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"billing",
										"invoices"
									],
									"query": [
										{
											"key": "billing_id",
											"value": "indfhgfhfho",
											"description": "Unique Identifier of the Billing Report. Retrieve this ID from the response of **Get Billing Reports** API request. \n\n"
										}
									]
								},
								"description": "Get department billing invoices reports for a specific billing period. Provide the `billing_id` of the billing period for which you would like to retrieve the invoices for. This ID can be retrieved from **Get Billing Reports** API. \n\n**Prerequisites:**<br>\n* Pro or a higher account with Department Billing option enabled. Contact the Zoom Support team to enable this feature.\n\n**Scopes:** `report:read:admin`, `report:master`\n\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nBilling Invoice reports returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/billing/invoices?billing_id=indfhgfhfho",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"billing",
												"invoices"
											],
											"query": [
												{
													"key": "billing_id",
													"value": "indfhgfhfho"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"currency\": \"USD\",\n  \"invoices\": [\n    {\n      \"end_date\": \"2022-03-25\",\n      \"invoice_charge_name\": \"Audio Conferencing Options\",\n      \"invoice_number\": \"3\",\n      \"quantity\": 45,\n      \"start_date\": \"2022-03-25\",\n      \"tax_amount\": \"34\",\n      \"total_amount\": \"45\"\n    },\n    {\n      \"end_date\": \"2022-03-25\",\n      \"invoice_charge_name\": \"Audio Conferencing Options\",\n      \"invoice_number\": \"3\",\n      \"quantity\": 45,\n      \"start_date\": \"2022-03-25\",\n      \"tax_amount\": \"34\",\n      \"total_amount\": \"45\"\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `5010`<br>\nReport does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/billing/invoices?billing_id=indfhgfhfho",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"billing",
												"invoices"
											],
											"query": [
												{
													"key": "billing_id",
													"value": "indfhgfhfho"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "chat/sessions",
					"item": [
						{
							"name": "Get chat sessions reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/chat/sessions?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"chat",
										"sessions"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "2022-01-28",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									]
								},
								"description": "Use this API to get Zoom Chat session reports for a specified period of time. The monthly date range **must** be within the last six months.\n\n**Scopes:** `report_chat:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`\n\n**Prerequisites:** \n* A Pro or higher plan \n* Report chat permissions."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\nArchived chat sessions returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/chat/sessions?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"chat",
												"sessions"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"from\": \"2022-03-01\",\n  \"next_page_token\": \"peU2gkVkRebcqMTzOPnidf0OxlA3WD9Cunrp\",\n  \"page_size\": 30,\n  \"sessions\": [\n    {\n      \"id\": \"c38230acb7f009282c1b0d367a08102d65d12629bbcca58dfe2168bd335f5849\",\n      \"last_message_sent_time\": \"2022-03-18T10:16:13Z\",\n      \"name\": \"jchill@example.com\",\n      \"type\": \"1:1\"\n    },\n    {\n      \"id\": \"c38230acb7f009282c1b0d367a08102d65d12629bbcca58dfe2168bd335f5849\",\n      \"last_message_sent_time\": \"2022-03-18T10:16:13Z\",\n      \"name\": \"jchill@example.com\",\n      \"type\": \"1:1\"\n    }\n  ],\n  \"to\": \"2022-03-25\"\n}"
								},
								{
									"name": "**Error Code:** `300` <br>\nThe next page token is invalid or expired. <br>\nReport requested exceeds 6 month limit.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/chat/sessions?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"chat",
												"sessions"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get chat messages reports",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/chat/sessions/:sessionId?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=edited_messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"chat",
										"sessions",
										":sessionId"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "2022-01-28",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "include_fields",
											"value": "edited_messages",
											"description": "Return all edited and deleted messages. The API only returns this value if the `include_fields` query parameter contains the `edited_messages` and/or the `deleted_messages` values.\n\nTo include **both** edited and deleted messages, comma-separate both values."
										}
									],
									"variable": [
										{
											"key": "sessionId",
											"value": "c38230acb7f009282c1b0d367a08102d65d12629bbcca58dfe2168bd335f5849",
											"description": "(Required) Chat session ID."
										}
									]
								},
								"description": "Use this API to get Zoom Chat message reports for a specified period of time. The monthly date range must be within the last six months.\n\n**Scopes:** `report_chat:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* A Pro or higher plan \n* Report chat permissions"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\nArchived chat messages returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/chat/sessions/:sessionId?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=edited_messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"chat",
												"sessions",
												":sessionId"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "include_fields",
													"value": "edited_messages"
												}
											],
											"variable": [
												{
													"key": "sessionId",
													"value": "c38230acb7f009282c1b0d367a08102d65d12629bbcca58dfe2168bd335f5849",
													"description": "(Required) Chat session ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"deleted_messages\": [\n    {\n      \"date_time\": \"2022-03-18T10:16:13Z\",\n      \"files\": [\n        {\n          \"download_url\": \"https://zoom.us/file/download/qreigNgqTk24RNnGJDxpDg?filename=48k.png&jwt=downloadjwt\",\n          \"file_id\": \"qreigNgqTk24RNnGJDxpDg\",\n          \"file_name\": \"48k.png\",\n          \"file_size\": 224251\n        },\n        {\n          \"download_url\": \"https://zoom.us/file/download/qreigNgqTk24RNnGJDxpDg?filename=48k.png&jwt=downloadjwt\",\n          \"file_id\": \"qreigNgqTk24RNnGJDxpDg\",\n          \"file_name\": \"48k.png\",\n          \"file_size\": 224251\n        }\n      ],\n      \"id\": \"7ba4d98b-0a6a-4fb4-a71b-dd13fd689dc8\",\n      \"message\": \"How are you\",\n      \"receiver\": \"jchill@example.com\",\n      \"reply_main_message_id\": \"{27ED2949-6457-417C-83EA-72515DAF00BD}\",\n      \"reply_main_message_timestamp\": 1647494500135,\n      \"sender\": \"thill@example.com\",\n      \"timestamp\": 1647494500135\n    },\n    {\n      \"date_time\": \"2022-03-18T10:16:13Z\",\n      \"files\": [\n        {\n          \"download_url\": \"https://zoom.us/file/download/qreigNgqTk24RNnGJDxpDg?filename=48k.png&jwt=downloadjwt\",\n          \"file_id\": \"qreigNgqTk24RNnGJDxpDg\",\n          \"file_name\": \"48k.png\",\n          \"file_size\": 224251\n        },\n        {\n          \"download_url\": \"https://zoom.us/file/download/qreigNgqTk24RNnGJDxpDg?filename=48k.png&jwt=downloadjwt\",\n          \"file_id\": \"qreigNgqTk24RNnGJDxpDg\",\n          \"file_name\": \"48k.png\",\n          \"file_size\": 224251\n        }\n      ],\n      \"id\": \"7ba4d98b-0a6a-4fb4-a71b-dd13fd689dc8\",\n      \"message\": \"How are you\",\n      \"receiver\": \"jchill@example.com\",\n      \"reply_main_message_id\": \"{27ED2949-6457-417C-83EA-72515DAF00BD}\",\n      \"reply_main_message_timestamp\": 1647494500135,\n      \"sender\": \"thill@example.com\",\n      \"timestamp\": 1647494500135\n    }\n  ],\n  \"edited_messages\": [\n    {\n      \"date_time\": \"2022-03-17T08:27:57Z\",\n      \"files\": [\n        {\n          \"download_url\": \"https://zoom.us/file/download/qreigNgqTk24RNnGJDxpDg?filename=48k.png&jwt=downloadjwt\",\n          \"file_id\": \"qreigNgqTk24RNnGJDxpDg\",\n          \"file_name\": \"48k.png\",\n          \"file_size\": 224251\n        },\n        {\n          \"download_url\": \"https://zoom.us/file/download/qreigNgqTk24RNnGJDxpDg?filename=48k.png&jwt=downloadjwt\",\n          \"file_id\": \"qreigNgqTk24RNnGJDxpDg\",\n          \"file_name\": \"48k.png\",\n          \"file_size\": 224251\n        }\n      ],\n      \"id\": \"7ba4d98b-0a6a-4fb4-a71b-dd13fd689dc8\",\n      \"message\": \"How are you\",\n      \"receiver\": \"jchill@example.com\",\n      \"reply_main_message_id\": \"jchill@example.com\",\n      \"reply_main_message_timestamp\": 1647494500135,\n      \"sender\": \"thill@example.com\",\n      \"timestamp\": 1647494500135\n    },\n    {\n      \"date_time\": \"2022-03-17T08:27:57Z\",\n      \"files\": [\n        {\n          \"download_url\": \"https://zoom.us/file/download/qreigNgqTk24RNnGJDxpDg?filename=48k.png&jwt=downloadjwt\",\n          \"file_id\": \"qreigNgqTk24RNnGJDxpDg\",\n          \"file_name\": \"48k.png\",\n          \"file_size\": 224251\n        },\n        {\n          \"download_url\": \"https://zoom.us/file/download/qreigNgqTk24RNnGJDxpDg?filename=48k.png&jwt=downloadjwt\",\n          \"file_id\": \"qreigNgqTk24RNnGJDxpDg\",\n          \"file_name\": \"48k.png\",\n          \"file_size\": 224251\n        }\n      ],\n      \"id\": \"7ba4d98b-0a6a-4fb4-a71b-dd13fd689dc8\",\n      \"message\": \"How are you\",\n      \"receiver\": \"jchill@example.com\",\n      \"reply_main_message_id\": \"jchill@example.com\",\n      \"reply_main_message_timestamp\": 1647494500135,\n      \"sender\": \"thill@example.com\",\n      \"timestamp\": 1647494500135\n    }\n  ],\n  \"from\": \"2022-03-17\",\n  \"messages\": [\n    {\n      \"date_time\": \"2022-03-17T08:27:57Z\",\n      \"files\": [\n        {\n          \"download_url\": \"https://zoom.us/file/download/qreigNgqTk24RNnGJDxpDg?filename=48k.png&jwt=downloadjwt\",\n          \"file_id\": \"qreigNgqTk24RNnGJDxpDg\",\n          \"file_name\": \"48k.png\",\n          \"file_size\": 224251\n        },\n        {\n          \"download_url\": \"https://zoom.us/file/download/qreigNgqTk24RNnGJDxpDg?filename=48k.png&jwt=downloadjwt\",\n          \"file_id\": \"qreigNgqTk24RNnGJDxpDg\",\n          \"file_name\": \"48k.png\",\n          \"file_size\": 224251\n        }\n      ],\n      \"id\": \"7ba4d98b-0a6a-4fb4-a71b-dd13fd689dc8\",\n      \"message\": \"How are you\",\n      \"receiver\": \"jchill@example.com\",\n      \"reply_main_message_id\": \"{27ED2949-6457-417C-83EA-72515DAF00BD}\",\n      \"reply_main_message_timestamp\": 1647494500135,\n      \"sender\": \"thill@example.com\",\n      \"timestamp\": 1647494500135\n    },\n    {\n      \"date_time\": \"2022-03-17T08:27:57Z\",\n      \"files\": [\n        {\n          \"download_url\": \"https://zoom.us/file/download/qreigNgqTk24RNnGJDxpDg?filename=48k.png&jwt=downloadjwt\",\n          \"file_id\": \"qreigNgqTk24RNnGJDxpDg\",\n          \"file_name\": \"48k.png\",\n          \"file_size\": 224251\n        },\n        {\n          \"download_url\": \"https://zoom.us/file/download/qreigNgqTk24RNnGJDxpDg?filename=48k.png&jwt=downloadjwt\",\n          \"file_id\": \"qreigNgqTk24RNnGJDxpDg\",\n          \"file_name\": \"48k.png\",\n          \"file_size\": 224251\n        }\n      ],\n      \"id\": \"7ba4d98b-0a6a-4fb4-a71b-dd13fd689dc8\",\n      \"message\": \"How are you\",\n      \"receiver\": \"jchill@example.com\",\n      \"reply_main_message_id\": \"{27ED2949-6457-417C-83EA-72515DAF00BD}\",\n      \"reply_main_message_timestamp\": 1647494500135,\n      \"sender\": \"thill@example.com\",\n      \"timestamp\": 1647494500135\n    }\n  ],\n  \"next_page_token\": \"b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2\",\n  \"page_size\": 30,\n  \"to\": \"2022-03-25\"\n}"
								},
								{
									"name": "**Error Code:**`300` <br>\nThe next page token is either invalid or has expired.<br>\nReport requested exceeds 6 month limit.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/chat/sessions/:sessionId?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=edited_messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"chat",
												"sessions",
												":sessionId"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "include_fields",
													"value": "edited_messages"
												}
											],
											"variable": [
												{
													"key": "sessionId",
													"value": "c38230acb7f009282c1b0d367a08102d65d12629bbcca58dfe2168bd335f5849",
													"description": "(Required) Chat session ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "meetings/{meeting Id}",
					"item": [
						{
							"name": "Get meeting detail reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/meetings/:meetingId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"meetings",
										":meetingId"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "5638296721",
											"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
										}
									]
								},
								"description": "Get a detailed report for a past meeting. <br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or a higher plan.<br>\n "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeeting details returned.<br>\nThis is only available for paid account.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"custom_keys\": [\n    {\n      \"key\": \"Host Nation\",\n      \"value\": \"US\"\n    },\n    {\n      \"key\": \"Host Nation\",\n      \"value\": \"US\"\n    }\n  ],\n  \"dept\": \"HR\",\n  \"duration\": 2,\n  \"end_time\": \"2022-03-15T07:42:22Z\",\n  \"id\": 3927350525,\n  \"participants_count\": 2,\n  \"start_time\": \"2022-03-15T07:40:46Z\",\n  \"topic\": \"My Meeting\",\n  \"total_minutes\": 3,\n  \"tracking_fields\": [\n    {\n      \"field\": \"Host Nation\",\n      \"value\": \"US\"\n    },\n    {\n      \"field\": \"Host Nation\",\n      \"value\": \"US\"\n    }\n  ],\n  \"type\": 2,\n  \"user_email\": \"jchill@example.com\",\n  \"user_name\": \"Jill Chill\",\n  \"uuid\": \"iOTQZPmhTUq5a232ETb9eg==\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>\nCan not access meeting information:{meetingId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting ID not found.<br>\n**Error Code:** `3001`<br>\nMeeting {meetingId} not found or has expired.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get meeting participant reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/meetings/:meetingId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"meetings",
										":meetingId",
										"participants"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "include_fields",
											"value": "registrant_id",
											"description": "Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](/api-reference/zoom-api/methods#operation/meetingRegistrants)."
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "5638296721",
											"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
										}
									]
								},
								"description": "Use this API to return a report of a past meeting with two or more participants, including the host. To return a report for past meeting with only **one** participant, use the [**List meeting participants**](/api-reference/zoom-api/ma#operation/dashboardMeetingParticipants) API. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n\n**Scopes:** `report:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Pro or a higher plan."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeeting participants report returned.<br>\nThis is only available for paid account.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"total_records\": 1,\n  \"participants\": [\n    {\n      \"customer_key\": \"349589LkJyeW\",\n      \"duration\": 259,\n      \"failover\": false,\n      \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\",\n      \"join_time\": \"2022-03-23T06:58:09Z\",\n      \"leave_time\": \"2022-03-23T07:02:28Z\",\n      \"name\": \"example\",\n      \"registrant_id\": \"example\",\n      \"user_email\": \"jchill@example.com\",\n      \"user_id\": \"27423744\",\n      \"status\": \"in_meeting\",\n      \"bo_mtg_id\": \"27423744\"\n    },\n    {\n      \"customer_key\": \"349589LkJyeW\",\n      \"duration\": 259,\n      \"failover\": false,\n      \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\",\n      \"join_time\": \"2022-03-23T06:58:09Z\",\n      \"leave_time\": \"2022-03-23T07:02:28Z\",\n      \"name\": \"example\",\n      \"registrant_id\": \"example\",\n      \"user_email\": \"jchill@example.com\",\n      \"user_id\": \"27423744\",\n      \"status\": \"in_meeting\",\n      \"bo_mtg_id\": \"27423744\"\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>Cannot access meeting information:{meetingId}.<br>\nThe next page token is either invalid or has expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting ID not found.<br>\n**Error Code:** `3001`<br>\nMeeting  {MeetingId} not found or has expired.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get meeting poll reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/meetings/:meetingId/polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"meetings",
										":meetingId",
										"polls"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "5638296721",
											"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
										}
									]
								},
								"description": "Use this API to get a report of [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) results for a past meeting. \n\n **Scopes:** `report:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Pro or a higher plan."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` \n* Meeting polls report returned. \n* This is only available for paid account: {accountId}",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId",
												"polls"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 123456,\n  \"uuid\": \"4444AAAiAAAAAiAiAiiAii==\",\n  \"start_time\": \"2022-02-01T12:34:12.660Z\",\n  \"questions\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"name\": \"Jill Chill\",\n      \"first_name\": \"Jill\",\n      \"last_name\": \"Chill\",\n      \"question_details\": [\n        {\n          \"answer\": \"I am wonderful.\",\n          \"date_time\": \"2022-02-01T12:37:12.660Z\",\n          \"polling_id\": \"798fGJEWrA\",\n          \"question\": \"How are you?\"\n        },\n        {\n          \"answer\": \"I am wonderful.\",\n          \"date_time\": \"2022-02-01T12:37:12.660Z\",\n          \"polling_id\": \"798fGJEWrA\",\n          \"question\": \"How are you?\"\n        }\n      ]\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"name\": \"Jill Chill\",\n      \"first_name\": \"Jill\",\n      \"last_name\": \"Chill\",\n      \"question_details\": [\n        {\n          \"answer\": \"I am wonderful.\",\n          \"date_time\": \"2022-02-01T12:37:12.660Z\",\n          \"polling_id\": \"798fGJEWrA\",\n          \"question\": \"How are you?\"\n        },\n        {\n          \"answer\": \"I am wonderful.\",\n          \"date_time\": \"2022-02-01T12:37:12.660Z\",\n          \"polling_id\": \"798fGJEWrA\",\n          \"question\": \"How are you?\"\n        }\n      ]\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nMeeting ID not found. \n\n**Error Code:** `3001` <br>\nMeeting \"{meetingId}\" not found or has expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId",
												"polls"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "5638296721",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "Get active/inactive host reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/users?type=active&from=2022-01-01&to=2022-01-28&page_size=30&page_number=1&next_page_token=b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"users"
									],
									"query": [
										{
											"key": "type",
											"value": "active",
											"description": "Active or inactive hosts.<br>`active` - Active hosts. <br>`inactive` - Inactive hosts."
										},
										{
											"key": "from",
											"value": "2022-01-01",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "2022-01-28",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "page_number",
											"value": "1",
											"description": "The page number of the current page in the returned records."
										},
										{
											"key": "next_page_token",
											"value": "b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									]
								},
								"description": "A user is considered to be an active host during the month specified in the \"from\" and \"to\" range, if the user has hosted at least one meeting during this period. If the user didn't host any meetings during this period, the user is considered to be inactive.<br>The Active Hosts report displays a list of meetings, participants, and meeting minutes for a specific time range, up to one month. The month should fall within the last six months.<br>The Inactive Hosts report pulls a list of users who were not active during a specific period of time. \nUse this API to retrieve an active or inactive host report for a specified period of time. The time range for the report is limited to a month and the month should fall under the past six months. <br>You can specify the type of report and date range using the query parameters.<br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or higher plan."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nActive or inactive hosts report returned.<br>\nThis is only available for paid account: {accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/users?type=active&from=2022-01-01&to=2022-01-28&page_size=30&page_number=1&next_page_token=b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"users"
											],
											"query": [
												{
													"key": "type",
													"value": "active"
												},
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"from\": \"2022-03-01\",\n  \"next_page_token\": \"w7587w4eiyfsudgk\",\n  \"page_count\": 30,\n  \"page_number\": 1,\n  \"page_size\": 30,\n  \"to\": \"2022-03-25\",\n  \"total_records\": 850,\n  \"total_meeting_minutes\": 345,\n  \"total_meetings\": 34,\n  \"total_participants\": 56,\n  \"users\": [\n    {\n      \"custom_attributes\": {\n        \"key\": \"4444AAAiAAAAAiAiAiiAii==\",\n        \"name\": \"age\",\n        \"value\": \"18\"\n      },\n      \"dept\": \"HR\",\n      \"email\": \"jchill@example.com\",\n      \"id\": \"2pyjK5VNQHadb2BY6Z4GbA\",\n      \"meeting_minutes\": 342,\n      \"meetings\": 45,\n      \"participants\": 56,\n      \"type\": 1,\n      \"user_name\": \"Jill Chill\"\n    },\n    {\n      \"custom_attributes\": {\n        \"key\": \"4444AAAiAAAAAiAiAiiAii==\",\n        \"name\": \"age\",\n        \"value\": \"18\"\n      },\n      \"dept\": \"HR\",\n      \"email\": \"jchill@example.com\",\n      \"id\": \"2pyjK5VNQHadb2BY6Z4GbA\",\n      \"meeting_minutes\": 342,\n      \"meetings\": 45,\n      \"participants\": 56,\n      \"type\": 1,\n      \"user_name\": \"Jill Chill\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get meeting reports",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/users/:userId/meetings?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&type=past",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"users",
										":userId",
										"meetings"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "2022-01-28",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "type",
											"value": "past",
											"description": "The meeting type to query for: \n* `past` — All past meetings. \n* `pastOne` — A single past user meeting. \n* `pastJoined` — All past meetings the account's users hosted or joined."
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "6dfgdfgdg444447b0egga",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
										}
									]
								},
								"description": "Retrieve [report](https://support.zoom.us/hc/en-us/articles/216378603-Meeting-Reporting) on past meetings and webinars for a specified time period. The time range for the report is limited to a month and the month must fall within the past six months.\n\nMeetings and webinars are returned only if they have two or more unique participants.  <br><br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or higher plan."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nActive or inactive hosts report returned.<br>\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/users/:userId/meetings?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&type=past",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"users",
												":userId",
												"meetings"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "type",
													"value": "past"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"next_page_token\": \"w7587w4eiyfsudgf\",\n  \"page_count\": 1,\n  \"page_number\": 1,\n  \"page_size\": 30,\n  \"total_records\": 20,\n  \"from\": \"2020-07-14\",\n  \"meetings\": [\n    {\n      \"custom_keys\": [\n        {\n          \"key\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"value\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"key\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"value\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ],\n      \"duration\": 6,\n      \"end_time\": \"2020-07-15T23:30:19Z\",\n      \"id\": 12345,\n      \"participants_count\": 2,\n      \"session_key\": \"ABC36jaBI145\",\n      \"source\": \"Zoom\",\n      \"start_time\": \"2019-07-15T23:24:52Z\",\n      \"topic\": \"My Meeting\",\n      \"total_minutes\": 11,\n      \"type\": 2,\n      \"user_email\": \"jchill@example.com\",\n      \"user_name\": \"Jill Chill\",\n      \"uuid\": \"4444AAAiAAAAAiAiAiiAii==\",\n      \"schedule_time\": \"12/22/2021 16:20\",\n      \"join_waiting_room_time\": \"02/11/2022 16:15\",\n      \"join_time\": \"12/22/2021 16:20\",\n      \"leave_time\": \"12/22/2021 17:13\"\n    },\n    {\n      \"custom_keys\": [\n        {\n          \"key\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"value\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"key\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"value\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ],\n      \"duration\": 6,\n      \"end_time\": \"2020-07-15T23:30:19Z\",\n      \"id\": 12345,\n      \"participants_count\": 2,\n      \"session_key\": \"ABC36jaBI145\",\n      \"source\": \"Zoom\",\n      \"start_time\": \"2019-07-15T23:24:52Z\",\n      \"topic\": \"My Meeting\",\n      \"total_minutes\": 11,\n      \"type\": 2,\n      \"user_email\": \"jchill@example.com\",\n      \"user_name\": \"Jill Chill\",\n      \"uuid\": \"4444AAAiAAAAAiAiAiiAii==\",\n      \"schedule_time\": \"12/22/2021 16:20\",\n      \"join_waiting_room_time\": \"02/11/2022 16:15\",\n      \"join_time\": \"12/22/2021 16:20\",\n      \"leave_time\": \"12/22/2021 17:13\"\n    }\n  ],\n  \"to\": \"2020-08-14\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\nThis is only available for paid account:{accountId}.<br>\n\n**Error Code:** `300`<br>\nThe next page token is invalid or expired.\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/users/:userId/meetings?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&type=past",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"users",
												":userId",
												"meetings"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "type",
													"value": "past"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**\n<br>**Error Code:** `1001`<br>\nUser {userId} not exist or not belong to this account.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/users/:userId/meetings?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&type=past",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"users",
												":userId",
												"meetings"
											],
											"query": [
												{
													"key": "from",
													"value": "2022-01-01"
												},
												{
													"key": "to",
													"value": "2022-01-28"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "type",
													"value": "past"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "6dfgdfgdg444447b0egga",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "webinars/{webinar Id}",
					"item": [
						{
							"name": "Get webinar detail reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/webinars/:webinarId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"webinars",
										":webinarId"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "ABCDE12345",
											"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
										}
									]
								},
								"description": "Retrieve a [report](https://support.zoom.us/hc/en-us/articles/201393719-Webinar-Reporting) containing past webinar details.  <br><br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or higher plan with Webinar add-on."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar details returned.<br>\nThis is only available for paid account:{accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"custom_keys\": [\n    {\n      \"key\": \"Host Nation\",\n      \"value\": \"US\"\n    },\n    {\n      \"key\": \"Host Nation\",\n      \"value\": \"US\"\n    }\n  ],\n  \"dept\": \"HR\",\n  \"duration\": 2,\n  \"end_time\": \"2022-03-15T07:42:22Z\",\n  \"id\": 345678902224,\n  \"participants_count\": 4,\n  \"start_time\": \"2022-03-15T07:40:46Z\",\n  \"topic\": \"My Meeting\",\n  \"total_minutes\": 3,\n  \"tracking_fields\": [\n    {\n      \"field\": \"Host Nation\",\n      \"value\": \"US\"\n    },\n    {\n      \"field\": \"Host Nation\",\n      \"value\": \"US\"\n    }\n  ],\n  \"type\": 4,\n  \"user_email\": \"jchill@example.com\",\n  \"user_name\": \"Jill Chill\",\n  \"uuid\": \"4444AAAiAAAAAiAiAiiAii==\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>\nCan not access webinar information:{webinarId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar ID not found.<br>\n**Error Code:** `3001`<br>\nMeeting  {meetingId} not found or has expired.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get webinar participant reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/webinars/:webinarId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"webinars",
										":webinarId",
										"participants"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "include_fields",
											"value": "registrant_id",
											"description": "The additional query parameters to include: \n* `registrant_id` — Include the registrant's ID in the API response. The registrant ID is the webinar participant's unique ID."
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "ABCDE12345",
											"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
										}
									]
								},
								"description": "Use this API to get a detailed report on each webinar attendee. You can get webinar participant reports for the last 6 months. \n\n **Scopes:** `report:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Pro or a higher plan with Webinar add-on enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` \n* Meeting participants report returned. \n* This is only available for paid account: {accountId}",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"total_records\": 1,\n  \"participants\": [\n    {\n      \"customer_key\": \"349589LkJyeW\",\n      \"duration\": 20,\n      \"failover\": false,\n      \"id\": \"ABCDEF123456\",\n      \"join_time\": \"2019-02-01T12:34:12.660Z\",\n      \"leave_time\": \"2019-02-01T12:54:12.660Z\",\n      \"name\": \"jchill\",\n      \"registrant_id\": \"123456FEDCBA\",\n      \"status\": \"in_meeting\",\n      \"user_email\": \"jchill@example.com\",\n      \"user_id\": \"ABCDEF123456\"\n    },\n    {\n      \"customer_key\": \"349589LkJyeW\",\n      \"duration\": 20,\n      \"failover\": false,\n      \"id\": \"ABCDEF123456\",\n      \"join_time\": \"2019-02-01T12:34:12.660Z\",\n      \"leave_time\": \"2019-02-01T12:54:12.660Z\",\n      \"name\": \"jchill\",\n      \"registrant_id\": \"123456FEDCBA\",\n      \"status\": \"in_meeting\",\n      \"user_email\": \"jchill@example.com\",\n      \"user_id\": \"ABCDEF123456\"\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300` \n* The next page token is invalid or has expired. \n* Cannot access the webinar information: {webinarId}",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `1010` <br>\nUser does not belong to this account: {accountId}",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nWebinar ID not found. \n\n**Error Code:** `3001` <br>\nWebinar \"{webinarId}\" not found or has expired",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/participants?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get webinar poll reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/webinars/:webinarId/polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"webinars",
										":webinarId",
										"polls"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "ABCDE12345",
											"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
										}
									]
								},
								"description": "Retrieve a report on past [webinar polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).<br><br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or a higher plan with Webinar add-on enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar polls report returned.<br>\nMissing webinar subscription plan.<br>\nThis is only available for paid account:{accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 12345,\n  \"questions\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"name\": \"Jill Chill\",\n      \"question_details\": [\n        {\n          \"answer\": \"Look forward to learning how you come up with new recipes and what other services you offer.\",\n          \"date_time\": \"2022-02-01T12:37:12.660Z\",\n          \"polling_id\": \"Hin8-Ybn124sa\",\n          \"question\": \"What do you hope to learn from this Webinar?\"\n        },\n        {\n          \"answer\": \"Look forward to learning how you come up with new recipes and what other services you offer.\",\n          \"date_time\": \"2022-02-01T12:37:12.660Z\",\n          \"polling_id\": \"Hin8-Ybn124sa\",\n          \"question\": \"What do you hope to learn from this Webinar?\"\n        }\n      ]\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"name\": \"Jill Chill\",\n      \"question_details\": [\n        {\n          \"answer\": \"Look forward to learning how you come up with new recipes and what other services you offer.\",\n          \"date_time\": \"2022-02-01T12:37:12.660Z\",\n          \"polling_id\": \"Hin8-Ybn124sa\",\n          \"question\": \"What do you hope to learn from this Webinar?\"\n        },\n        {\n          \"answer\": \"Look forward to learning how you come up with new recipes and what other services you offer.\",\n          \"date_time\": \"2022-02-01T12:37:12.660Z\",\n          \"polling_id\": \"Hin8-Ybn124sa\",\n          \"question\": \"What do you hope to learn from this Webinar?\"\n        }\n      ]\n    }\n  ],\n  \"start_time\": \"2019-07-15T23:24:52Z\",\n  \"uuid\": \"4444AAAiAAAAAiAiAiiAii==\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar ID not found.<br>\n**Error Code:** `3001`<br>\nWebinar  {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get webinar Q&A report",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/webinars/:webinarId/qa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"webinars",
										":webinarId",
										"qa"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "ABCDE12345",
											"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
										}
									]
								},
								"description": "The Question & Answer (Q&A) feature for webinars allows attendees to ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.\n\nUse this API to retrieve a report on question and answers from past webinars. <br><br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or a higher plan with Webinar add-on enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar Q&A report returned.<br>\nThis is only available for paid account:{accountId}.<br>\nA report cannot be generated for this account because this account has not subscribed to a webinar plan.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/qa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"qa"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 245603123123,\n  \"questions\": [\n    {\n      \"email\": \"jchilll@example.com\",\n      \"name\": \"Jill Chill\",\n      \"question_details\": [\n        {\n          \"answer\": \"fine\",\n          \"question\": \"how are you\"\n        },\n        {\n          \"answer\": \"fine\",\n          \"question\": \"how are you\"\n        }\n      ]\n    },\n    {\n      \"email\": \"jchilll@example.com\",\n      \"name\": \"Jill Chill\",\n      \"question_details\": [\n        {\n          \"answer\": \"fine\",\n          \"question\": \"how are you\"\n        },\n        {\n          \"answer\": \"fine\",\n          \"question\": \"how are you\"\n        }\n      ]\n    }\n  ],\n  \"start_time\": \"2022-03-15T07:40:46Z\",\n  \"uuid\": \"4444AAAiAAAAAiAiAiiAii==\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/qa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"qa"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar ID not found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: {userId}.<br>\n**Error Code:** `3001`<br>\nWebinar  {webinarId} not found or has expired.<br>\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/qa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"qa"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "ABCDE12345",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get sign In / sign out activity report",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/report/activities?from=2019-09-01&to=2019-09-20&page_size=30&next_page_token=b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report",
								"activities"
							],
							"query": [
								{
									"key": "from",
									"value": "2019-09-01",
									"description": "Start date for which you would like to view the activity logs report. Using the `from` and `to` parameters, specify a monthly date range for the report as the API only provides one month worth of data in one request. The specified date range should fall within the last six months."
								},
								{
									"key": "to",
									"value": "2019-09-20",
									"description": "End date up to which you would like to view the activity logs report."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records to be returned within a single API call"
								},
								{
									"key": "next_page_token",
									"value": "b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2",
									"description": "Next page token is used to paginate through large result sets"
								}
							]
						},
						"description": "Retrieve a list of sign in / sign out activity logs [report](https://support.zoom.us/hc/en-us/articles/201363213-Getting-Started-with-Reports) of users under a Zoom account.<br>\n**Prerequisites**<br>\n* Pro or higher plan.<br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/activities?from=2019-09-01&to=2019-09-20&page_size=30&next_page_token=b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"activities"
									],
									"query": [
										{
											"key": "from",
											"value": "2019-09-01"
										},
										{
											"key": "to",
											"value": "2019-09-20"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"activity_logs\": [\n    {\n      \"client_type\": \"Browser\",\n      \"email\": \"jchill@example.com\",\n      \"ip_address\": \"192.0.2.1\",\n      \"time\": \"2019-09-15T19:13:41Z\",\n      \"type\": \"Sign out\",\n      \"version\": \"5.9.1.2581\"\n    },\n    {\n      \"client_type\": \"Browser\",\n      \"email\": \"jchill@example.com\",\n      \"ip_address\": \"192.0.2.1\",\n      \"time\": \"2019-09-15T19:13:41Z\",\n      \"type\": \"Sign out\",\n      \"version\": \"5.9.1.2581\"\n    }\n  ],\n  \"from\": \"2019-09-01T00:00:00Z\",\n  \"next_page_token\": \"w7587w4eiyfsudgf\",\n  \"page_size\": 30,\n  \"to\": \"2019-09-20T00:00:00Z\"\n}"
						}
					]
				},
				{
					"name": "Get cloud recording usage report",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/report/cloud_recording?from=2022-01-01&to=2022-01-28",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report",
								"cloud_recording"
							],
							"query": [
								{
									"key": "from",
									"value": "2022-01-01",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "2022-01-28",
									"description": "(Required) End date."
								}
							]
						},
						"description": "Retrieve cloud recording usage report for a specified period. You can only get cloud recording reports that is one day earlier than the current date and for the most recent period of 6 months. The date gap between from and to dates should be smaller or equal to 30 days. <br>\n**Prerequisites**<br>\n* Pro or higher plan.<br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nCloud Recording Report Returned",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/cloud_recording?from=2022-01-01&to=2022-01-28",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"cloud_recording"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01"
										},
										{
											"key": "to",
											"value": "2022-01-28"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"from\": \"2021-12-01\",\n  \"to\": \"2021-12-30\",\n  \"cloud_recording_storage\": [\n    {\n      \"date\": \"2021-12-05\",\n      \"free_usage\": \"Unlimited\",\n      \"plan_usage\": \"3 TB\",\n      \"usage\": \"3 MB\"\n    },\n    {\n      \"date\": \"2021-12-05\",\n      \"free_usage\": \"Unlimited\",\n      \"plan_usage\": \"3 TB\",\n      \"usage\": \"3 MB\"\n    }\n  ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `300`<br>\nOnly provide report in recent 6 months",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/cloud_recording?from=2022-01-01&to=2022-01-28",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"cloud_recording"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01"
										},
										{
											"key": "to",
											"value": "2022-01-28"
										}
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get daily usage report",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/report/daily?year=2022&month=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report",
								"daily"
							],
							"query": [
								{
									"key": "year",
									"value": "2022",
									"description": "Year for this report"
								},
								{
									"key": "month",
									"value": "3",
									"description": "Month for this report"
								}
							]
						},
						"description": "Retrieve daily report to access the account-wide usage of Zoom services for each day in a given month. It lists the number of new users, meetings, participants, and meeting minutes.<br>\n**Prerequisites**<br>\n* Pro or higher plan.<br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nDaily report retrieved.<br>\nThis is only available for paid accounts:{accountId}.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/daily?year=2022&month=3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"daily"
									],
									"query": [
										{
											"key": "year",
											"value": "2022"
										},
										{
											"key": "month",
											"value": "3"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"dates\": [\n    {\n      \"date\": \"2022-03-01\",\n      \"meeting_minutes\": 34,\n      \"meetings\": 2,\n      \"new_users\": 3,\n      \"participants\": 4\n    },\n    {\n      \"date\": \"2022-03-01\",\n      \"meeting_minutes\": 34,\n      \"meetings\": 2,\n      \"new_users\": 3,\n      \"participants\": 4\n    }\n  ],\n  \"month\": 3,\n  \"year\": 2022\n}"
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `300`<br> \nDaily report can only be provided for a month that falls within the recent 6 months.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/daily?year=2022&month=3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"daily"
									],
									"query": [
										{
											"key": "year",
											"value": "2022"
										},
										{
											"key": "month",
											"value": "3"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get operation logs report",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/report/operationlogs?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&category_type=user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report",
								"operationlogs"
							],
							"query": [
								{
									"key": "from",
									"value": "2022-01-01",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "2022-01-28",
									"description": "(Required) End date."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								},
								{
									"key": "category_type",
									"value": "user",
									"description": "**Optional**<br>\nFilter your response by a category type to see reports for a specific category.\nThe value for this field can be one of the following:<br> `all`<br>`user`<br>`user_settings`<br>`account`<br>`billing`<br>`im`<br>`recording`<br>`phone_contacts`<br>`webinar`<br>`sub_account`<br>`role`<br>`zoom_rooms`"
								}
							]
						},
						"description": "The [Operations Logs](https://support.zoom.us/hc/en-us/articles/360032748331-Operation-Logs) report allows you to audit admin and user activity, such as adding a new user, changing account settings, and deleting recordings.<br>\nUse this API to retrieve operation logs report for a specified period of time.<br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nOperation Logs Report Returned",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/operationlogs?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&category_type=user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"operationlogs"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01"
										},
										{
											"key": "to",
											"value": "2022-01-28"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										},
										{
											"key": "category_type",
											"value": "user"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"next_page_token\": \"uBTK3NzNksdkuCUAQaFVFd86kyOr59zg4U2\",\n  \"page_size\": 30,\n  \"operation_logs\": [\n    {\n      \"action\": \"delete\",\n      \"category_type\": \"user\",\n      \"operation_detail\": \"delete user - user2@example.com\",\n      \"operator\": \"admin@example.com\",\n      \"time\": \"2022-01-25T17:52:16Z\"\n    },\n    {\n      \"action\": \"delete\",\n      \"category_type\": \"user\",\n      \"operation_detail\": \"delete user - user2@example.com\",\n      \"operator\": \"admin@example.com\",\n      \"time\": \"2022-01-25T17:52:16Z\"\n    }\n  ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `300`<br>Only provide report in recent 6 months",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/operationlogs?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&category_type=user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"operationlogs"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01"
										},
										{
											"key": "to",
											"value": "2022-01-28"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										},
										{
											"key": "category_type",
											"value": "user"
										}
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get telephone reports",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/report/telephone?type=1&query_date_type=start_time&from=2022-01-01&to=2022-01-28&page_size=30&page_number=1&next_page_token=b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report",
								"telephone"
							],
							"query": [
								{
									"key": "type",
									"value": "1",
									"description": "Audio types:<br>`1` - Toll-free Call-in & Call-out.<br>`2` - Toll <br>\n`3` - SIP Connected Audio"
								},
								{
									"key": "query_date_type",
									"value": "start_time",
									"description": "The type of date to query: \n* `start_time` — Query by call start time. \n* `end_time` — Query by call end time. \n* `meeting_start_time` — Query by meeting start time. \n* `meeting_end_time` — Query by meeting end time. \n\nThis value defaults to `start_time`."
								},
								{
									"key": "from",
									"value": "2022-01-01",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "2022-01-28",
									"description": "(Required) End date."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "page_number",
									"value": "1",
									"description": "The page number of the current page in the returned records. This field is **not** available if the `query_date_type` parameter is the `meeting_start_time` or `meeting_end_time` value. \n\nThis field is deprecated. Use the `next_page_token` query parameter for pagination."
								},
								{
									"key": "next_page_token",
									"value": "b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "The [telephone report](https://support.zoom.us/hc/en-us/articles/206514816-Telephone-reports) allows you to view who dialed into meetings via phone (Audio Conferencing or SIP Connected Audio) and which number they dialed into and other details. Use this API to get telephone report for a specified period of time.\n\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>**Prerequisites:**<br>\n* Pro or higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nTelephone report returned.<br>\nThis is only available for paid account:{accountId}.<br>\nThe requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.<b",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/telephone?type=1&query_date_type=start_time&from=2022-01-01&to=2022-01-28&page_size=30&page_number=1&next_page_token=b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"telephone"
									],
									"query": [
										{
											"key": "type",
											"value": "1"
										},
										{
											"key": "query_date_type",
											"value": "start_time"
										},
										{
											"key": "from",
											"value": "2022-01-01"
										},
										{
											"key": "to",
											"value": "2022-01-28"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "next_page_token",
											"value": "b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"from\": \"2019-06-20\",\n  \"next_page_token\": \"w7587w4eiyfsudgk\",\n  \"page_count\": 1,\n  \"page_size\": 30,\n  \"to\": \"2019-07-20\",\n  \"total_records\": 1,\n  \"telephony_usage\": [\n    {\n      \"call_in_number\": \"ZoomGW\",\n      \"country_name\": \"US\",\n      \"dept\": \"HR\",\n      \"duration\": 2,\n      \"end_time\": \"2022-03-15T07:42:22Z\",\n      \"host_email\": \"jchill@example.com\",\n      \"host_id\": \"_Rn_hal7ToG5p0AWwIIsjQ\",\n      \"host_name\": \"Jill Chill\",\n      \"meeting_id\": 94908911701,\n      \"meeting_type\": \"Meeting\",\n      \"phone_number\": \"+1 8243\",\n      \"rate\": 0.03,\n      \"signaled_number\": \"+1 8243\",\n      \"start_time\": \"2022-03-15T07:40:46Z\",\n      \"total\": 0.03,\n      \"type\": \"call-out\",\n      \"uuid\": \"4444AAAiAAAAAiAiAiiAii==\"\n    },\n    {\n      \"call_in_number\": \"ZoomGW\",\n      \"country_name\": \"US\",\n      \"dept\": \"HR\",\n      \"duration\": 2,\n      \"end_time\": \"2022-03-15T07:42:22Z\",\n      \"host_email\": \"jchill@example.com\",\n      \"host_id\": \"_Rn_hal7ToG5p0AWwIIsjQ\",\n      \"host_name\": \"Jill Chill\",\n      \"meeting_id\": 94908911701,\n      \"meeting_type\": \"Meeting\",\n      \"phone_number\": \"+1 8243\",\n      \"rate\": 0.03,\n      \"signaled_number\": \"+1 8243\",\n      \"start_time\": \"2022-03-15T07:40:46Z\",\n      \"total\": 0.03,\n      \"type\": \"call-out\",\n      \"uuid\": \"4444AAAiAAAAAiAiAiiAii==\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Get upcoming events report",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/report/upcoming_events?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&type=meeting",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report",
								"upcoming_events"
							],
							"query": [
								{
									"key": "from",
									"value": "2022-01-01",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "2022-01-28",
									"description": "(Required) End date."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								},
								{
									"key": "type",
									"value": "meeting",
									"description": "The type of event to query: \n* `meeting` — A meeting event. \n* `webinar` — A webinar event. \n* `all` — Both meeting and webinar events.\n\nThis value defaults to `all`."
								}
							]
						},
						"description": "Use this API to list upcoming meeting and/or webinar events within a specified period of time. The report's time range is limited to one month and must also be within the past six months.\n\n**Scopes:** `report:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`\n\n**Prerequisites:** \n* A Pro or higher plan"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nUpcoming events report returned.<br>\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/upcoming_events?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&type=meeting",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"upcoming_events"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01"
										},
										{
											"key": "to",
											"value": "2022-01-28"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										},
										{
											"key": "type",
											"value": "meeting"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"from\": \"2022-03-01\",\n  \"next_page_token\": \"b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2\",\n  \"page_size\": 30,\n  \"to\": \"2022-03-25\",\n  \"upcoming_events\": [\n    {\n      \"dept\": \"HR\",\n      \"host_id\": \"Or4-ZeV_SHCOfWRC71O1Fg\",\n      \"host_name\": \"chi chi\",\n      \"id\": \"vawMH9zAQLytjCnQiQXSUg==\",\n      \"start_time\": \"2022-03-15T07:40:46Z\",\n      \"topic\": \"My Meeting\"\n    },\n    {\n      \"dept\": \"HR\",\n      \"host_id\": \"Or4-ZeV_SHCOfWRC71O1Fg\",\n      \"host_name\": \"chi chi\",\n      \"id\": \"vawMH9zAQLytjCnQiQXSUg==\",\n      \"start_time\": \"2022-03-15T07:40:46Z\",\n      \"topic\": \"My Meeting\"\n    }\n  ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` <br> Bad Request <br> **Error Code:** `200` <br> This is only available for the paid account: {accountId} <br> **Error Code:** `300`<br> The next page token is invalid or expired.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/upcoming_events?from=2022-01-01&to=2022-01-28&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&type=meeting",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"upcoming_events"
									],
									"query": [
										{
											"key": "from",
											"value": "2022-01-01"
										},
										{
											"key": "to",
											"value": "2022-01-28"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										},
										{
											"key": "type",
											"value": "meeting"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "roles",
			"item": [
				{
					"name": "{role Id}",
					"item": [
						{
							"name": "members",
							"item": [
								{
									"name": "List members in a role",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId/members?page_count=2&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&page_size=30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId",
												"members"
											],
											"query": [
												{
													"key": "page_count",
													"value": "2",
													"description": "The number of pages returned for this request."
												},
												{
													"key": "page_number",
													"value": "1",
													"description": "**Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination."
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												},
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												}
											],
											"variable": [
												{
													"key": "roleId",
													"value": "2",
													"description": "(Required) The role ID"
												}
											]
										},
										"description": "User [roles](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) can have a set of permissions that allows access only to the pages a user needs to view or edit. Use this API to list all the members that are assigned a specific role.\n\n**Scope:** `role:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>**Prerequisites:**<br>\n* A Pro or a higher plan."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nSuccess",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/roles/:roleId/members?page_count=2&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&page_size=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":roleId",
														"members"
													],
													"query": [
														{
															"key": "page_count",
															"value": "2"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														},
														{
															"key": "page_size",
															"value": "30"
														}
													],
													"variable": [
														{
															"key": "roleId",
															"value": "2",
															"description": "(Required) The role ID"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"members\": [\n    {\n      \"department\": \"Developers\",\n      \"email\": \"jchil.test@example.com\",\n      \"first_name\": \"Jill\",\n      \"id\": \"49D7a0xPQvGQ2DCMZgSe7w\",\n      \"last_name\": \"Chill\",\n      \"type\": 2\n    },\n    {\n      \"department\": \"Developers\",\n      \"email\": \"jchil.test@example.com\",\n      \"first_name\": \"Jill\",\n      \"id\": \"49D7a0xPQvGQ2DCMZgSe7w\",\n      \"last_name\": \"Chill\",\n      \"type\": 2\n    }\n  ],\n  \"next_page_token\": \"TUNTL8kGBvdBSJiX1PaNAVxYbjV7ouJlKS2\",\n  \"page_count\": 3,\n  \"page_number\": 1,\n  \"page_size\": 30,\n  \"total_records\": 22\n}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>Role not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/roles/:roleId/members?page_count=2&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&page_size=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":roleId",
														"members"
													],
													"query": [
														{
															"key": "page_count",
															"value": "2"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
														},
														{
															"key": "page_size",
															"value": "30"
														}
													],
													"variable": [
														{
															"key": "roleId",
															"value": "2",
															"description": "(Required) The role ID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Assign a role",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"members\": [\n    {\n      \"email\": \"user@example.com\",\n      \"id\": \"Cs97wug2RTm5TNvuvk4yRw\"\n    },\n    {\n      \"email\": \"user@example.com\",\n      \"id\": \"Cs97wug2RTm5TNvuvk4yRw\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId/members",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId",
												"members"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "2",
													"description": "(Required) The role ID"
												}
											]
										},
										"description": "User [roles](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) can have a set of permissions that allows access only to the pages a user needs to view or edit. Use this API to [assign a role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control#h_748b6fd8-5057-4cf4-bbfd-787909c09db0) to members.\n\n**Scopes:** `role:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n**Prerequisites:**<br>\n* A Pro or a higher plan."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201`<br>Members Added",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"members\": [\n    {\n      \"email\": \"user@example.com\",\n      \"id\": \"Cs97wug2RTm5TNvuvk4yRw\"\n    },\n    {\n      \"email\": \"user@example.com\",\n      \"id\": \"Cs97wug2RTm5TNvuvk4yRw\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/roles/:roleId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":roleId",
														"members"
													],
													"variable": [
														{
															"key": "roleId",
															"value": "2",
															"description": "(Required) The role ID"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"add_at\": \"2019-06-01T07:58:03Z\",\n  \"ids\": \"2\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\n\n**Error Code:** `1034`\nRole does not exist.<br><br>\n**Error Code:** `300`<br>\nRoleId required.<br>\nCan't delete or add members for Normal/Owner roles.<br><br>",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"members\": [\n    {\n      \"email\": \"user@example.com\",\n      \"id\": \"Cs97wug2RTm5TNvuvk4yRw\"\n    },\n    {\n      \"email\": \"user@example.com\",\n      \"id\": \"Cs97wug2RTm5TNvuvk4yRw\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/roles/:roleId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":roleId",
														"members"
													],
													"variable": [
														{
															"key": "roleId",
															"value": "2",
															"description": "(Required) The role ID"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Unassign a role",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId/members/:memberId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId",
												"members",
												":memberId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "2",
													"description": "(Required) The role ID"
												},
												{
													"key": "memberId",
													"value": "Cs97wug2RTm5TNvuvk4yRw",
													"description": "(Required) Member's ID"
												}
											]
										},
										"description": "User [roles](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) can have a set of permissions that allows access only to the pages a user needs to view or edit. Use this API to unassign a user's role.\n\n**Scope:** `role:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites:**<br>\n* A Pro or a higher plan."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nRole withdrawn from user.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/roles/:roleId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":roleId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "roleId",
															"value": "2",
															"description": "(Required) The role ID"
														},
														{
															"key": "memberId",
															"value": "Cs97wug2RTm5TNvuvk4yRw",
															"description": "(Required) Member's ID"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>Role or Member not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/roles/:roleId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":roleId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "roleId",
															"value": "2",
															"description": "(Required) The role ID"
														},
														{
															"key": "memberId",
															"value": "Cs97wug2RTm5TNvuvk4yRw",
															"description": "(Required) Member's ID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Delete a role",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles/:roleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":roleId"
									],
									"variable": [
										{
											"key": "roleId",
											"value": "2",
											"description": "(Required) "
										}
									]
								},
								"description": "Each Zoom user automatically has a role which can either be owner, administrator, or a member. Account Owners and users with edit privileges for Role management can add customized roles with a list.\n\nUse this API to delete a role.<br>\n**Pre-requisite:**<br>\n* A Pro or higher plan.<br>\n* For role management and updates, you must be the Account Owner or user with role management permissions.\n\n**Scopes:** `role:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**Error Code:** `200`<br>\nRole not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "2",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Status Code:** `204`<br>\nRole deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "2",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300`<br>\nRole not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "2",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get role information",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/roles/:roleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":roleId"
									],
									"variable": [
										{
											"key": "roleId",
											"value": "2",
											"description": "(Required) Role Id. "
										}
									]
								},
								"description": "Each Zoom user automatically has a role which can either be owner, administrator, or a member. Account Owners and users with edit privileges for Role management can add customized roles with a list of privileges.\n\nUse this API to get information including specific privileges assigned to a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control).<br>\n**Pre-requisite:**<br>\n* A Pro or higher plan.<br>\n* For role management and updates, you must be the Account Owner or user with role management permissions.\n\n**Scopes:** `role:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**Status Code:** `200`<br>\nInformation about a specific role returned.\n\n**Error Code:** `200`<br>\nYou do not have the permission to retrieve role information.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "2",
													"description": "(Required) Role Id. "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"description\": \"My role\",\n  \"id\": \"2\",\n  \"name\": \"My role\",\n  \"privileges\": [\n    \"User:Read\",\n    \"User:Read\"\n  ],\n  \"sub_account_privileges\": {\n    \"second_level\": 1\n  },\n  \"total_members\": 20\n}"
								},
								{
									"name": "**Error Code:** `300`<br>\nRole not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "2",
													"description": "(Required) Role Id. "
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update role information",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"My role\",\n  \"id\": \"2\",\n  \"name\": \"My role\",\n  \"privileges\": [\n    \"User:Read\",\n    \"User:Read\"\n  ],\n  \"sub_account_privileges\": {\n    \"second_level\": 1\n  },\n  \"total_members\": 20\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/roles/:roleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":roleId"
									],
									"variable": [
										{
											"key": "roleId",
											"value": "2",
											"description": "(Required) "
										}
									]
								},
								"description": "Each Zoom user automatically has a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) which can either be owner, administrator, or a member. Account Owners and users with edit privileges for Role management can add customized roles with a list.\n\nUse this API to change the privileges, name and description of a specific role.<br>\n**Pre-requisite:**<br>\n* A Pro or higher plan.<br>\n* For role management and updates, you must be the Account Owner or user with role management permissions.<br>**Scopes:** `role:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**Error Code:** `200`<br>\nThe account must be a paid account to update the role.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"My role\",\n  \"id\": \"2\",\n  \"name\": \"My role\",\n  \"privileges\": [\n    \"User:Read\",\n    \"User:Read\"\n  ],\n  \"sub_account_privileges\": {\n    \"second_level\": 1\n  },\n  \"total_members\": 20\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "2",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**Status Code:** `400`<br>\nRole updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"My role\",\n  \"id\": \"2\",\n  \"name\": \"My role\",\n  \"privileges\": [\n    \"User:Read\",\n    \"User:Read\"\n  ],\n  \"sub_account_privileges\": {\n    \"second_level\": 1\n  },\n  \"total_members\": 20\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "2",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300`\nThis role cannot be updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"My role\",\n  \"id\": \"2\",\n  \"name\": \"My role\",\n  \"privileges\": [\n    \"User:Read\",\n    \"User:Read\"\n  ],\n  \"sub_account_privileges\": {\n    \"second_level\": 1\n  },\n  \"total_members\": 20\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "2",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `1224` <br>\n Role name \"{roleName}\" has already been used.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"My role\",\n  \"id\": \"2\",\n  \"name\": \"My role\",\n  \"privileges\": [\n    \"User:Read\",\n    \"User:Read\"\n  ],\n  \"sub_account_privileges\": {\n    \"second_level\": 1\n  },\n  \"total_members\": 20\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "2",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List roles",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "List [roles](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) on your account\n\n**Scopes:** `role:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n**Prerequisites** :\n*  Pro or higher plan. \n*  For setting the initial role, you must be the Account Owner. \n*  For subsequent role management, you must be the Account Owner or user with role management permissions."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nList of roles returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"roles\": [\n    {\n      \"description\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"total_members\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"description\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"total_members\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"total_records\": 200\n}"
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request<br>**Error Code:** `4700`<br>Invalid access token, does not contain role:read:admin scope.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a role",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"My role\",\n  \"name\": \"My role\",\n  \"privileges\": [\n    \"User:Read\",\n    \"User:Read\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Each Zoom user automatically has a role which can either be owner, administrator, or a member. \n\n**Pre-requisite:**<br>\n* Pro or higher plan.\n* For setting the initial role, you must be the Account Owner.<br>\n* For subsequent role management, you must be the Account Owner or user with role management permissions.<br>\n**Scopes:** `role:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
					},
					"response": [
						{
							"name": "**Status Code:** `200`<br>\nYou do not have the permission to create a role.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"My role\",\n  \"name\": \"My role\",\n  \"privileges\": [\n    \"User:Read\",\n    \"User:Read\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						},
						{
							"name": "**Status Code:** `201`<br>\nRole created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"My role\",\n  \"name\": \"My role\",\n  \"privileges\": [\n    \"User:Read\",\n    \"User:Read\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"description\": \"My role\",\n  \"id\": \"1\",\n  \"name\": \"My role\",\n  \"privileges\": [\n    \"User:Read\",\n    \"User:Read\"\n  ],\n  \"total_members\": 20\n}"
						},
						{
							"name": "**Error Code:** `300`<br>\nThe name field cannot be empty.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"My role\",\n  \"name\": \"My role\",\n  \"privileges\": [\n    \"User:Read\",\n    \"User:Read\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**Error Code:** `1224` <br>\n Role name \"{roleName}\" has already been used.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"My role\",\n  \"name\": \"My role\",\n  \"privileges\": [\n    \"User:Read\",\n    \"User:Read\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "rooms",
			"item": [
				{
					"name": "account profile",
					"item": [
						{
							"name": "Get Zoom Room account profile",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rooms/account_profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"account_profile"
									]
								},
								"description": "Get details on the account profile of a Zoom Room. This information can only by accessed either by the Zoom Room Account Owner or a user with Zoom Rooms admin permission. To get information on an individual Room Profile, use the [**Get Zoom Room profile**](/api-reference/zoom-api/methods#operation/getZRProfile) API. \n\n**Prerequisites:**<br>\n* Zoom account owner or Zoom Rooms admin permissions<br>\n\n**Scopes:** `room:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nZoom Room Account Profile returned successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/account_profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_profile"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"basic\": {\n    \"required_code_to_ext\": true,\n    \"room_passcode\": \"111111\",\n    \"support_email\": \"contact-it@example.com\",\n    \"support_phone\": \"18798769876\"\n  }\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/account_profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_profile"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update Zoom Room account profile",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"basic\": {\n    \"required_code_to_ext\": true,\n    \"room_passcode\": \"111111\",\n    \"support_email\": \"contact-it@example.com\",\n    \"support_phone\": \"18798769876\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/account_profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"account_profile"
									]
								},
								"description": "Update information on the account profile of a Zoom Room. This information can only by accessed either by the Zoom Room Account Owner or a user with Zoom Rooms admin permission. To update information on an individual Room Profile, use the [**Update a Zoom Room profile**](/api-reference/zoom-api/methods#operation/updateRoomProfile) API. \n\n**Prerequisites:**<br>\n* Zoom account owner or Zoom Rooms admin permissions<br>\n\n**Scopes:** `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **No Content**<br>\nProfile updated successfully.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"basic\": {\n    \"required_code_to_ext\": true,\n    \"room_passcode\": \"111111\",\n    \"support_email\": \"contact-it@example.com\",\n    \"support_phone\": \"18798769876\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/account_profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_profile"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"basic\": {\n    \"required_code_to_ext\": true,\n    \"room_passcode\": \"111111\",\n    \"support_email\": \"contact-it@example.com\",\n    \"support_phone\": \"18798769876\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/account_profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_profile"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "account settings",
					"item": [
						{
							"name": "Get Zoom Room account settings",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rooms/account_settings?setting_type=meeting",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"account_settings"
									],
									"query": [
										{
											"key": "setting_type",
											"value": "meeting",
											"description": "(Required) The type of setting that you would like to retrieve.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>\n`meeting`: Meeting settings of the Zoom Rooms Account. <br>\n`signage`: View digital signage settings of the Zoom Rooms Account."
										}
									]
								},
								"description": "Get details on Account Settings of a Zoom Room. With this API, you can view either the **Account Meeting Settings** or the **Alert Settings** (Client Alert Settings and Notification Settings) of the Zoom Rooms account. By default, only **Account Meeting Settings** are returned. To view only **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter.<br><br>\n**Prerequisites:**<br>\n* Zoom Room licenses\n* Owner or Admin privileges on the Zoom Account.<br>\n**Scopes:** `room:read:admin`<br><br> \n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nZR Account Settings returned successfully.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/account_settings?setting_type=meeting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_settings"
											],
											"query": [
												{
													"key": "setting_type",
													"value": "meeting"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"zoom_rooms\": {\n    \"allow_multiple_content_sharing\": true,\n    \"audio_device_daily_auto_test\": true,\n    \"auto_direct_sharing\": true,\n    \"auto_start_scheduled_meeting\": true,\n    \"auto_stop_scheduled_meeting\": true,\n    \"count_attendees_number_in_room\": true,\n    \"display_feedback_survey\": true,\n    \"display_meeting_list\": true,\n    \"display_top_banner\": true,\n    \"email_address_prompt_before_recording\": true,\n    \"encrypt_shared_screen_content\": true,\n    \"hide_id_for_private_meeting\": true,\n    \"make_room_alternative_host\": true,\n    \"secure_connection_channel\": true,\n    \"send_whiteboard_to_internal_contact_only\": true,\n    \"show_alert_before_meeting\": true,\n    \"show_call_history_in_room\": true,\n    \"show_contact_list_on_controller\": true,\n    \"show_non_video_participants\": true,\n    \"start_airplay_manually\": true,\n    \"start_airplay_mirroring\": true,\n    \"support_join_3rd_party_meeting\": true,\n    \"transform_meeting_to_private\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true\n  }\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/account_settings?setting_type=meeting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_settings"
											],
											"query": [
												{
													"key": "setting_type",
													"value": "meeting"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update Zoom Room account settings",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"zoom_rooms\": {\n    \"allow_multiple_content_sharing\": true,\n    \"audio_device_daily_auto_test\": true,\n    \"auto_direct_sharing\": true,\n    \"auto_start_scheduled_meeting\": true,\n    \"auto_stop_scheduled_meeting\": true,\n    \"count_attendees_number_in_room\": true,\n    \"display_feedback_survey\": true,\n    \"display_meeting_list\": true,\n    \"display_top_banner\": true,\n    \"email_address_prompt_before_recording\": true,\n    \"encrypt_shared_screen_content\": true,\n    \"hide_id_for_private_meeting\": true,\n    \"make_room_alternative_host\": true,\n    \"secure_connection_channel\": true,\n    \"send_whiteboard_to_internal_contact_only\": true,\n    \"show_alert_before_meeting\": true,\n    \"show_call_history_in_room\": true,\n    \"show_contact_list_on_controller\": true,\n    \"show_non_video_participants\": true,\n    \"start_airplay_manually\": true,\n    \"support_join_3rd_party_meeting\": true,\n    \"transform_meeting_to_private\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/account_settings?setting_type=meeting",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"account_settings"
									],
									"query": [
										{
											"key": "setting_type",
											"value": "meeting",
											"description": "(Required) The type of setting that you would like to update.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>\n`meeting`: Meeting settings of the Zoom Rooms Account.<br>\n`signage`: View digital signage settings of the Zoom Rooms Account."
										}
									]
								},
								"description": "Update account settings applied for Zoom Rooms in a Zoom account. With this API, you can update either the **Account Meeting Settings** or the **Alert Settings** (Client Alert Settings and Notification Settings) of the Zoom Rooms account by specifying the required setting type in the `setting_type` parameter. To update only **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter and to update only **Account Meeting Settings**, specify `meeting` as the value of the `setting_type` query parameter.<br><br>\n**Prerequisites:**<br>\n* Zoom Room licenses\n* Owner or Admin privileges on the Zoom Account.<br>\n**Scopes:** `room:write:admin`<br> \n\n  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **No Content**<br>\nSettings updated successfully.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"zoom_rooms\": {\n    \"allow_multiple_content_sharing\": true,\n    \"audio_device_daily_auto_test\": true,\n    \"auto_direct_sharing\": true,\n    \"auto_start_scheduled_meeting\": true,\n    \"auto_stop_scheduled_meeting\": true,\n    \"count_attendees_number_in_room\": true,\n    \"display_feedback_survey\": true,\n    \"display_meeting_list\": true,\n    \"display_top_banner\": true,\n    \"email_address_prompt_before_recording\": true,\n    \"encrypt_shared_screen_content\": true,\n    \"hide_id_for_private_meeting\": true,\n    \"make_room_alternative_host\": true,\n    \"secure_connection_channel\": true,\n    \"send_whiteboard_to_internal_contact_only\": true,\n    \"show_alert_before_meeting\": true,\n    \"show_call_history_in_room\": true,\n    \"show_contact_list_on_controller\": true,\n    \"show_non_video_participants\": true,\n    \"start_airplay_manually\": true,\n    \"support_join_3rd_party_meeting\": true,\n    \"transform_meeting_to_private\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/account_settings?setting_type=meeting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_settings"
											],
											"query": [
												{
													"key": "setting_type",
													"value": "meeting"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"zoom_rooms\": {\n    \"allow_multiple_content_sharing\": true,\n    \"audio_device_daily_auto_test\": true,\n    \"auto_direct_sharing\": true,\n    \"auto_start_scheduled_meeting\": true,\n    \"auto_stop_scheduled_meeting\": true,\n    \"count_attendees_number_in_room\": true,\n    \"display_feedback_survey\": true,\n    \"display_meeting_list\": true,\n    \"display_top_banner\": true,\n    \"email_address_prompt_before_recording\": true,\n    \"encrypt_shared_screen_content\": true,\n    \"hide_id_for_private_meeting\": true,\n    \"make_room_alternative_host\": true,\n    \"secure_connection_channel\": true,\n    \"send_whiteboard_to_internal_contact_only\": true,\n    \"show_alert_before_meeting\": true,\n    \"show_call_history_in_room\": true,\n    \"show_contact_list_on_controller\": true,\n    \"show_non_video_participants\": true,\n    \"start_airplay_manually\": true,\n    \"support_join_3rd_party_meeting\": true,\n    \"transform_meeting_to_private\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/account_settings?setting_type=meeting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_settings"
											],
											"query": [
												{
													"key": "setting_type",
													"value": "meeting"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "locations",
					"item": [
						{
							"name": "structure",
							"item": [
								{
									"name": "Get Zoom Room location structure",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/locations/structure",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations",
												"structure"
											]
										},
										"description": "Get the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) applied on the Zoom Rooms in an account.<br><br>\n**Prerequisites:**<br>\n* Zoom Rooms version 4.0 or higher\n* Account owner or admin permissions<br>\n**Scopes:** `room:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` **OK**<br>\nZoom Rooms location structure returned successfully.<br>\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/structure",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														"structure"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"structures\": [\n    \"account\",\n    \"account\"\n  ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/structure",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														"structure"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update Zoom Rooms location structure",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"structures\": [\n    \"account\",\n    \"account\"\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/locations/structure",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations",
												"structure"
											]
										},
										"description": "Update the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) applied on the Zoom Rooms in an account.<br><br>\n**Prerequisites:**<br>\n* Zoom Rooms version 4.0 or higher\n* Account owner or admin permissions<br>\n**Scopes:** `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **No Content**<br>\nLocation Structure updated successfully.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"structures\": [\n    \"account\",\n    \"account\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/structure",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														"structure"
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `2100`<br>\nThis sub account has no sip trunk plan",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"structures\": [\n    \"account\",\n    \"account\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/structure",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														"structure"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `2001` This account does not exist or does not belong to this master account.<br>This account does not exist or does not belong to you.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"structures\": [\n    \"account\",\n    \"account\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/structure",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														"structure"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "{location Id}",
							"item": [
								{
									"name": "settings",
									"item": [
										{
											"name": "Get location settings",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "meeting",
															"description": "(Required) The type of setting that you would like to retrieve.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>\n`meeting`: Meeting settings of the Zoom Rooms Account.<br>\n`signage`: Digital signage settings of the Zoom Rooms Account."
														}
													],
													"variable": [
														{
															"key": "locationId",
															"value": "49D7a0xPQvGQ2DCMZgSe7w",
															"description": "(Required) Unique identifier of the location type. This can be retrieved using the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) (Id property in the response)."
														}
													]
												},
												"description": "Get information on meeting or alert settings applied to Zoom Rooms located in a specific location. By default, only **Meeting Settings** are returned. To view only **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter.<br><br>\n**Prerequisites:**<br>\n* Zoom Room licenses\n* Owner or Admin privileges on the Zoom Account.<br>\n**Scopes:** `room:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200` **OK**<br>\nZoom Room location settings returned successfully.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																"locations",
																":locationId",
																"settings"
															],
															"query": [
																{
																	"key": "setting_type",
																	"value": "meeting"
																}
															],
															"variable": [
																{
																	"key": "locationId",
																	"value": "49D7a0xPQvGQ2DCMZgSe7w",
																	"description": "(Required) Unique identifier of the location type. This can be retrieved using the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) (Id property in the response)."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"meeting_security\": {\n    \"encryption_type\": \"e2ee\",\n    \"end_to_end_encrypted_meetings\": true\n  },\n  \"zoom_rooms\": {\n    \"allow_multiple_content_sharing\": true,\n    \"audio_device_daily_auto_test\": true,\n    \"auto_accept_incoming_call_and_fecc\": true,\n    \"auto_direct_sharing\": true,\n    \"auto_start_scheduled_meeting\": true,\n    \"auto_stop_scheduled_meeting\": true,\n    \"count_attendees_number_in_room\": true,\n    \"display_feedback_survey\": true,\n    \"display_meeting_list\": true,\n    \"display_top_banner\": true,\n    \"encrypt_shared_screen_content\": true,\n    \"hide_id_for_private_meeting\": true,\n    \"hide_self_view\": true,\n    \"lock_speaker_volume_control\": true,\n    \"send_whiteboard_to_internal_contact_only\": true,\n    \"show_alert_before_meeting\": true,\n    \"show_call_history_in_room\": true,\n    \"show_contact_list_on_controller\": true,\n    \"show_non_video_participants\": true,\n    \"start_airplay_manually\": true,\n    \"start_airplay_mirroring\": true,\n    \"start_hdmi_content_share_manualy\": true,\n    \"support_join_3rd_party_meeting\": true,\n    \"transform_meeting_to_private\": true,\n    \"upcoming_meeting_alert\": true,\n    \"voice_commands\": true,\n    \"weekly_system_restart\": true\n  }\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess Restricted.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																"locations",
																":locationId",
																"settings"
															],
															"query": [
																{
																	"key": "setting_type",
																	"value": "meeting"
																}
															],
															"variable": [
																{
																	"key": "locationId",
																	"value": "49D7a0xPQvGQ2DCMZgSe7w",
																	"description": "(Required) Unique identifier of the location type. This can be retrieved using the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) (Id property in the response)."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n\n**Error Code:** `4801`<br>\nLocation not found: {locationId}\n\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																"locations",
																":locationId",
																"settings"
															],
															"query": [
																{
																	"key": "setting_type",
																	"value": "meeting"
																}
															],
															"variable": [
																{
																	"key": "locationId",
																	"value": "49D7a0xPQvGQ2DCMZgSe7w",
																	"description": "(Required) Unique identifier of the location type. This can be retrieved using the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) (Id property in the response)."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update location settings",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"meeting_security\": {\n    \"encryption_type\": \"e2ee\",\n    \"end_to_end_encrypted_meetings\": true\n  },\n  \"zoom_rooms\": {\n    \"allow_multiple_content_sharing\": true,\n    \"audio_device_daily_auto_test\": true,\n    \"auto_accept_incoming_call_and_fecc\": true,\n    \"auto_direct_sharing\": true,\n    \"auto_start_scheduled_meeting\": true,\n    \"auto_stop_scheduled_meeting\": true,\n    \"count_attendees_number_in_room\": true,\n    \"display_feedback_survey\": true,\n    \"display_meeting_list\": true,\n    \"display_top_banner\": true,\n    \"encrypt_shared_screen_content\": true,\n    \"hide_id_for_private_meeting\": true,\n    \"hide_self_view\": true,\n    \"lock_speaker_volume_control\": true,\n    \"send_whiteboard_to_internal_contact_only\": true,\n    \"show_alert_before_meeting\": true,\n    \"show_call_history_in_room\": true,\n    \"show_contact_list_on_controller\": true,\n    \"show_non_video_participants\": true,\n    \"start_airplay_manually\": true,\n    \"start_airplay_mirroring\": true,\n    \"start_hdmi_content_share_manualy\": true,\n    \"support_join_3rd_party_meeting\": true,\n    \"transform_meeting_to_private\": true,\n    \"upcoming_meeting_alert\": true,\n    \"voice_commands\": true,\n    \"weekly_system_restart\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "meeting",
															"description": "(Required) The type of setting that you would like to update.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>\n`meeting`: Meeting settings of the Zoom Rooms Account.<br>\n`signage`: Digital signage settings."
														}
													],
													"variable": [
														{
															"key": "locationId",
															"value": "49D7a0xPQvGQ2DCMZgSe7w",
															"description": "(Required) Unique identifier of the location type. This can be retrieved using the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) (Id property in the response)."
														}
													]
												},
												"description": "Update information on either meeting or alert settings applied to Zoom Rooms located in a specific location. To update **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter. Similarly, to update **Meeting Settings**, specify `meeting` as the value of the `setting_type` query parameter.<br><br>\n**Prerequisites:**<br>\n* Zoom Room licenses\n* Owner or Admin privileges on the Zoom Account.<br>\n**Scopes:** `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` **No Content**<br>\nLocation settings updated successfully.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"meeting_security\": {\n    \"encryption_type\": \"e2ee\",\n    \"end_to_end_encrypted_meetings\": true\n  },\n  \"zoom_rooms\": {\n    \"allow_multiple_content_sharing\": true,\n    \"audio_device_daily_auto_test\": true,\n    \"auto_accept_incoming_call_and_fecc\": true,\n    \"auto_direct_sharing\": true,\n    \"auto_start_scheduled_meeting\": true,\n    \"auto_stop_scheduled_meeting\": true,\n    \"count_attendees_number_in_room\": true,\n    \"display_feedback_survey\": true,\n    \"display_meeting_list\": true,\n    \"display_top_banner\": true,\n    \"encrypt_shared_screen_content\": true,\n    \"hide_id_for_private_meeting\": true,\n    \"hide_self_view\": true,\n    \"lock_speaker_volume_control\": true,\n    \"send_whiteboard_to_internal_contact_only\": true,\n    \"show_alert_before_meeting\": true,\n    \"show_call_history_in_room\": true,\n    \"show_contact_list_on_controller\": true,\n    \"show_non_video_participants\": true,\n    \"start_airplay_manually\": true,\n    \"start_airplay_mirroring\": true,\n    \"start_hdmi_content_share_manualy\": true,\n    \"support_join_3rd_party_meeting\": true,\n    \"transform_meeting_to_private\": true,\n    \"upcoming_meeting_alert\": true,\n    \"voice_commands\": true,\n    \"weekly_system_restart\": true\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																"locations",
																":locationId",
																"settings"
															],
															"query": [
																{
																	"key": "setting_type",
																	"value": "meeting"
																}
															],
															"variable": [
																{
																	"key": "locationId",
																	"value": "49D7a0xPQvGQ2DCMZgSe7w",
																	"description": "(Required) Unique identifier of the location type. This can be retrieved using the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) (Id property in the response)."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"meeting_security\": {\n    \"encryption_type\": \"e2ee\",\n    \"end_to_end_encrypted_meetings\": true\n  },\n  \"zoom_rooms\": {\n    \"allow_multiple_content_sharing\": true,\n    \"audio_device_daily_auto_test\": true,\n    \"auto_accept_incoming_call_and_fecc\": true,\n    \"auto_direct_sharing\": true,\n    \"auto_start_scheduled_meeting\": true,\n    \"auto_stop_scheduled_meeting\": true,\n    \"count_attendees_number_in_room\": true,\n    \"display_feedback_survey\": true,\n    \"display_meeting_list\": true,\n    \"display_top_banner\": true,\n    \"encrypt_shared_screen_content\": true,\n    \"hide_id_for_private_meeting\": true,\n    \"hide_self_view\": true,\n    \"lock_speaker_volume_control\": true,\n    \"send_whiteboard_to_internal_contact_only\": true,\n    \"show_alert_before_meeting\": true,\n    \"show_call_history_in_room\": true,\n    \"show_contact_list_on_controller\": true,\n    \"show_non_video_participants\": true,\n    \"start_airplay_manually\": true,\n    \"start_airplay_mirroring\": true,\n    \"start_hdmi_content_share_manualy\": true,\n    \"support_join_3rd_party_meeting\": true,\n    \"transform_meeting_to_private\": true,\n    \"upcoming_meeting_alert\": true,\n    \"voice_commands\": true,\n    \"weekly_system_restart\": true\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																"locations",
																":locationId",
																"settings"
															],
															"query": [
																{
																	"key": "setting_type",
																	"value": "meeting"
																}
															],
															"variable": [
																{
																	"key": "locationId",
																	"value": "49D7a0xPQvGQ2DCMZgSe7w",
																	"description": "(Required) Unique identifier of the location type. This can be retrieved using the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) (Id property in the response)."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `4801`<br>\nLocation not found: {locationId}",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"meeting_security\": {\n    \"encryption_type\": \"e2ee\",\n    \"end_to_end_encrypted_meetings\": true\n  },\n  \"zoom_rooms\": {\n    \"allow_multiple_content_sharing\": true,\n    \"audio_device_daily_auto_test\": true,\n    \"auto_accept_incoming_call_and_fecc\": true,\n    \"auto_direct_sharing\": true,\n    \"auto_start_scheduled_meeting\": true,\n    \"auto_stop_scheduled_meeting\": true,\n    \"count_attendees_number_in_room\": true,\n    \"display_feedback_survey\": true,\n    \"display_meeting_list\": true,\n    \"display_top_banner\": true,\n    \"encrypt_shared_screen_content\": true,\n    \"hide_id_for_private_meeting\": true,\n    \"hide_self_view\": true,\n    \"lock_speaker_volume_control\": true,\n    \"send_whiteboard_to_internal_contact_only\": true,\n    \"show_alert_before_meeting\": true,\n    \"show_call_history_in_room\": true,\n    \"show_contact_list_on_controller\": true,\n    \"show_non_video_participants\": true,\n    \"start_airplay_manually\": true,\n    \"start_airplay_mirroring\": true,\n    \"start_hdmi_content_share_manualy\": true,\n    \"support_join_3rd_party_meeting\": true,\n    \"transform_meeting_to_private\": true,\n    \"upcoming_meeting_alert\": true,\n    \"voice_commands\": true,\n    \"weekly_system_restart\": true\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																"locations",
																":locationId",
																"settings"
															],
															"query": [
																{
																	"key": "setting_type",
																	"value": "meeting"
																}
															],
															"variable": [
																{
																	"key": "locationId",
																	"value": "49D7a0xPQvGQ2DCMZgSe7w",
																	"description": "(Required) Unique identifier of the location type. This can be retrieved using the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) (Id property in the response)."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get Zoom Room location profile",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/locations/:locationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations",
												":locationId"
											],
											"variable": [
												{
													"key": "locationId",
													"value": "49D7a0xPQvGQ2DCMZgSe7w",
													"description": "(Required) Unique identifier of the location type. This can be retrieved using the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) API (Id property in the response)."
												}
											]
										},
										"description": "Each location type of the [Zoom Rooms location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) has a profile page that includes information such as name of the location, address, support email, etc. Use this API to retrieve information about a specific Zoom Rooms location type such as information about the city where the Zoom Rooms is located.\n\n**Prerequisite:**<br>\n* Account owner or admin permission\n* Zoom Rooms version 4.0 or higher<br>\n**Scopes:** `room:read:admin`<br> \n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` **OK**<br>\nZoom Rooms Location Profile returned successfully.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "49D7a0xPQvGQ2DCMZgSe7w",
															"description": "(Required) Unique identifier of the location type. This can be retrieved using the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) API (Id property in the response)."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"basic\": {\n    \"address\": \"California, USA\",\n    \"description \": \"California, USA\",\n    \"name\": \"state\",\n    \"required_code_to_ext\": true,\n    \"room_passcode\": \"111111\",\n    \"support_email\": \"contact-it@example.com\",\n    \"support_phone\": \"18798769876\",\n    \"timezone\": \"Asia/Shanghai\"\n  }\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.<br>\n\n\n\n\n\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "49D7a0xPQvGQ2DCMZgSe7w",
															"description": "(Required) Unique identifier of the location type. This can be retrieved using the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) API (Id property in the response)."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `4801`<br>\nLocation not found: {locationId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "49D7a0xPQvGQ2DCMZgSe7w",
															"description": "(Required) Unique identifier of the location type. This can be retrieved using the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) API (Id property in the response)."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update Zoom Room location profile",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"basic\": {\n    \"address\": \"California, USA\",\n    \"description \": \"California, USA\",\n    \"name\": \"state\",\n    \"required_code_to_ext\": true,\n    \"room_passcode\": \"111111\",\n    \"support_email\": \"contact-it@example.com\",\n    \"support_phone\": \"18798769876\",\n    \"timezone\": \"Asia/Shanghai\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/locations/:locationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations",
												":locationId"
											],
											"variable": [
												{
													"key": "locationId",
													"value": "49D7a0xPQvGQ2DCMZgSe7w",
													"description": "(Required) Unique Identifier of the location. This can be retrieved from the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) API."
												}
											]
										},
										"description": "Each location type of the [Zoom Rooms location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) has a profile page that includes information such as name of the location, address, support email, etc. Use this API to update information about a specific Zoom Rooms location type such as information about the city where the Zoom Rooms is located.\n\n**Prerequisite:**<br>\n* Account owner or admin permission\n* Zoom Rooms version 4.0 or higher<br>\n**Scopes:** `room:write:admin`<br> \n\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"basic\": {\n    \"address\": \"California, USA\",\n    \"description \": \"California, USA\",\n    \"name\": \"state\",\n    \"required_code_to_ext\": true,\n    \"room_passcode\": \"111111\",\n    \"support_email\": \"contact-it@example.com\",\n    \"support_phone\": \"18798769876\",\n    \"timezone\": \"Asia/Shanghai\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "49D7a0xPQvGQ2DCMZgSe7w",
															"description": "(Required) Unique Identifier of the location. This can be retrieved from the [**List Zoom Room locations**](/api-reference/zoom-api/methods#operation/listZRLocations) API."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Change the assigned parent location",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"parent_location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/locations/:locationId/location",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations",
												":locationId",
												"location"
											],
											"variable": [
												{
													"key": "locationId",
													"value": "49D7a0xPQvGQ2DCMZgSe7w",
													"description": "(Required) "
												}
											]
										},
										"description": "An account owner of a Zoom account can establish a [Zoom Rooms Location Hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) to better organize Zoom Rooms spread across various locations. The location can be structured in a hierarchy with Country being the top-level location, followed by city, campus, building, and floor. The location in the lower level in the hierarchy is considered as a child of the location that is a level above in the hierarchy. Use this API to change the parent location of a child location. <br><br> For instance, if the location hierarchy is structured in a way where there are two campuses (Campus 1, and Campus 2) in a City and Campus 1 consists of a building named Building 1 with a floor where Zoom Rooms are located, and you would like to rearrange the structure so that Building 1 along with its child locations (floor and Zoom Rooms) are relocated directly under Campus 2 instead of Campus 1, you must provide the location ID of Building 1 in the path parameter of this request and the location ID of Campus 2 as the value of `parent_location_id` in the  request body.<br><br>\n**Prerequisite:**<br>\n* Account owner or admin permission\n* Zoom Rooms version 4.0 or higher<br>\n**Scopes:** `room:write:admin`<br><br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **No Content**<br>\nLocation assigned successfully.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parent_location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId/location",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId",
														"location"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "49D7a0xPQvGQ2DCMZgSe7w",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br> Zoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\n**Error Code:** `300`<br> Invalid parent location id {parent_location_id}",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parent_location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId/location",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId",
														"location"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "49D7a0xPQvGQ2DCMZgSe7w",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `4801`<br> Location not found:{parent_location_id}.\n",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parent_location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId/location",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId",
														"location"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "49D7a0xPQvGQ2DCMZgSe7w",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List Zoom Room locations",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rooms/locations?parent_location_id=49D7a0xPQvGQ2DCMZgSe7w&type=state&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"locations"
									],
									"query": [
										{
											"key": "parent_location_id",
											"value": "49D7a0xPQvGQ2DCMZgSe7w",
											"description": "A unique identifier of the parent location. For instance, if a Zoom Room is located in Floor 1 of Building A, the location of Building A will be the parent location of Floor 1. Use this parameter to filter the response by a specific location hierarchy level."
										},
										{
											"key": "type",
											"value": "state",
											"description": "Use this field to filter the response by the type of location. The value can be one of the following:\n`country`, `states`, `city`, `campus`, `building`, `floor`. "
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									]
								},
								"description": "A Zoom account owner or a Zoom Room administrator can establish a [location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) to help manage Zoom Rooms that are spread among a variety of locations. Use this API to list the different location types used for Zoom Rooms in an account.<br><br>\n**Prerequisites:**\n* Account owner or admin permissions.\n* Zoom Rooms Version 4.0 or higher<br><br>\n**Scopes:** `room:read:admin`<br> \n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nZoom Room locations listed successfully.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/locations?parent_location_id=49D7a0xPQvGQ2DCMZgSe7w&type=state&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations"
											],
											"query": [
												{
													"key": "parent_location_id",
													"value": "49D7a0xPQvGQ2DCMZgSe7w"
												},
												{
													"key": "type",
													"value": "state"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"locations\": [\n    {\n      \"id\": \"49D7a0xPQvGQ2DCMZgSe7w\",\n      \"name\": \"BuildingA\",\n      \"parent_location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\",\n      \"type\": \"building\"\n    },\n    {\n      \"id\": \"49D7a0xPQvGQ2DCMZgSe7w\",\n      \"name\": \"BuildingA\",\n      \"parent_location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\",\n      \"type\": \"building\"\n    }\n  ],\n  \"next_page_token\": \"At6eWnFZ1FB3arCXnRxqHLXKhbDW18yz2i2\",\n  \"page_size\": 30\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\n**Error Code:** `300`<br>\nLocation type not exist.<br>\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/locations?parent_location_id=49D7a0xPQvGQ2DCMZgSe7w&type=state&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations"
											],
											"query": [
												{
													"key": "parent_location_id",
													"value": "49D7a0xPQvGQ2DCMZgSe7w"
												},
												{
													"key": "type",
													"value": "state"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n\n**Error Code:** `4801`<br>\n Location not found:{parent_location_id}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/locations?parent_location_id=49D7a0xPQvGQ2DCMZgSe7w&type=state&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations"
											],
											"query": [
												{
													"key": "parent_location_id",
													"value": "49D7a0xPQvGQ2DCMZgSe7w"
												},
												{
													"key": "type",
													"value": "state"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a location",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Floor-7\",\n  \"parent_location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"locations"
									]
								},
								"description": "Add a location to the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) of Zoom Rooms in an account.\n\n**Prerequisites:**\n* Account owner or admin permissions.\n* Zoom Rooms Version 4.0 or higher<br><br>\n**Scopes:** `room:write:admin`<br> \n\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nLocation added successfully.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Floor-7\",\n  \"parent_location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"49D7a0xPQvGQ2DCMZgSe7w\",\n  \"name\": \"Floor-7\",\n  \"parent_location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\",\n  \"type\": \"country\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br><br>\n**Error Code:** `300`<br>\nLocation name already exists. Try a different location n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Floor-7\",\n  \"parent_location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `4801`<br>\nLocation not exist {parent_location_id}",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Floor-7\",\n  \"parent_location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "{room Id}",
					"item": [
						{
							"name": "device profiles",
							"item": [
								{
									"name": "{device Profile Id}",
									"item": [
										{
											"name": "Delete a device profile",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/:deviceProfileId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"device_profiles",
														":deviceProfileId"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The Zoom Room's ID."
														},
														{
															"key": "deviceProfileId",
															"value": "wPYhqpOYTsiWV0Ls0_xZRg",
															"description": "(Required) The Zoom Room device profile's ID."
														}
													]
												},
												"description": "Use this API to delete a Zoom Room device profile. \n\n **Scopes:** `room:write:admin` \n\n **Prerequisites:** \n* A Pro or a higher account with Zoom Rooms."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` <br>\n Device profile deleted.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/:deviceProfileId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																":roomId",
																"device_profiles",
																":deviceProfileId"
															],
															"variable": [
																{
																	"key": "roomId",
																	"value": "qMOLddnySIGGVycz8aX_JQ",
																	"description": "(Required) The Zoom Room's ID."
																},
																{
																	"key": "deviceProfileId",
																	"value": "wPYhqpOYTsiWV0Ls0_xZRg",
																	"description": "(Required) The Zoom Room device profile's ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `200` \n* Zoom Room subscription not found. Purchase a Zoom Room subscription and try again. <br>\n* Access restricted. \n\n **Error Code:** `300` <br>\n You cannot delete this device profile.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/:deviceProfileId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																":roomId",
																"device_profiles",
																":deviceProfileId"
															],
															"variable": [
																{
																	"key": "roomId",
																	"value": "qMOLddnySIGGVycz8aX_JQ",
																	"description": "(Required) The Zoom Room's ID."
																},
																{
																	"key": "deviceProfileId",
																	"value": "wPYhqpOYTsiWV0Ls0_xZRg",
																	"description": "(Required) The Zoom Room device profile's ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1012` <br>\n Room does not exist: {roomId}",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/:deviceProfileId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																":roomId",
																"device_profiles",
																":deviceProfileId"
															],
															"variable": [
																{
																	"key": "roomId",
																	"value": "qMOLddnySIGGVycz8aX_JQ",
																	"description": "(Required) The Zoom Room's ID."
																},
																{
																	"key": "deviceProfileId",
																	"value": "wPYhqpOYTsiWV0Ls0_xZRg",
																	"description": "(Required) The Zoom Room device profile's ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get a device profile",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/:deviceProfileId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"device_profiles",
														":deviceProfileId"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The Zoom Room's ID."
														},
														{
															"key": "deviceProfileId",
															"value": "wPYhqpOYTsiWV0Ls0_xZRg",
															"description": "(Required) The Zoom Room device profile's ID."
														}
													]
												},
												"description": "Use this API to return a Zoom Room device profile. \n\n **Scopes:** `room:read:admin` \n\n **Prerequisites:** \n* A Pro or a higher account with Zoom Rooms."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200` <br>\n Device profile returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/:deviceProfileId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																":roomId",
																"device_profiles",
																":deviceProfileId"
															],
															"variable": [
																{
																	"key": "roomId",
																	"value": "qMOLddnySIGGVycz8aX_JQ",
																	"description": "(Required) The Zoom Room's ID."
																},
																{
																	"key": "deviceProfileId",
																	"value": "wPYhqpOYTsiWV0Ls0_xZRg",
																	"description": "(Required) The Zoom Room device profile's ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"audio_processing\": false,\n  \"auto_adjust_mic_level\": true,\n  \"camera_id\": \"usb#vid_0bda&pid_58fd&mi_00#6&1e7cbc97&0&0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}global\",\n  \"echo_cancellation\": true,\n  \"id\": \"Gz_fNcaSPByng-3vsqv_iQ\",\n  \"microphone_id\": \"{0.0.2.00000000}.{eff76572-ac52-4c79-bd30-67f968bjb15f}\",\n  \"name\": \"ZR1 Device\",\n  \"noise_suppression\": \"aggressive\",\n  \"speaker_id\": \"{0.0.0.00000000}.{4f9b30cb-872e-49ed-a1b9-a7ec352bf3e6}\"\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `200` \n* Zoom Room subscription not found. Purchase a Zoom Room subscription and try again. <br>\n* Access restricted.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/:deviceProfileId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																":roomId",
																"device_profiles",
																":deviceProfileId"
															],
															"variable": [
																{
																	"key": "roomId",
																	"value": "qMOLddnySIGGVycz8aX_JQ",
																	"description": "(Required) The Zoom Room's ID."
																},
																{
																	"key": "deviceProfileId",
																	"value": "wPYhqpOYTsiWV0Ls0_xZRg",
																	"description": "(Required) The Zoom Room device profile's ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1012` <br>\n Room does not exist: {roomId} \n\n **Error Code:** `8005` <br>\n Zoom Room device profile does not exist: {roomId}",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/:deviceProfileId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																":roomId",
																"device_profiles",
																":deviceProfileId"
															],
															"variable": [
																{
																	"key": "roomId",
																	"value": "qMOLddnySIGGVycz8aX_JQ",
																	"description": "(Required) The Zoom Room's ID."
																},
																{
																	"key": "deviceProfileId",
																	"value": "wPYhqpOYTsiWV0Ls0_xZRg",
																	"description": "(Required) The Zoom Room device profile's ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update a device profile",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"audio_processing\": false,\n  \"auto_adjust_mic_level\": true,\n  \"camera_id\": \"usb#vid_0bda&pid_58fd&mi_00#6&1e7cbc97&0&0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}global\",\n  \"echo_cancellation\": true,\n  \"microphone_id\": \"{0.0.2.00000000}.{eff76572-ac52-4c79-bd30-67f968bjb15f}\",\n  \"noise_suppression\": \"none\",\n  \"speaker_id\": \"{0.0.0.00000000}.{4f9b30cb-872e-49ed-a1b9-a7ec352bf3e6}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/:deviceProfileId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"device_profiles",
														":deviceProfileId"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The Zoom Room's ID."
														},
														{
															"key": "deviceProfileId",
															"value": "wPYhqpOYTsiWV0Ls0_xZRg",
															"description": "(Required) The Zoom Room device profile's ID."
														}
													]
												},
												"description": "Use this API to update a Zoom Room device profile. \n\n **Scopes:** `room:write:admin` \n\n **Prerequisites:** \n* A Pro or a higher account with Zoom Rooms."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` <br>\n Device profile updated.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"audio_processing\": false,\n  \"auto_adjust_mic_level\": true,\n  \"camera_id\": \"usb#vid_0bda&pid_58fd&mi_00#6&1e7cbc97&0&0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}global\",\n  \"echo_cancellation\": true,\n  \"microphone_id\": \"{0.0.2.00000000}.{eff76572-ac52-4c79-bd30-67f968bjb15f}\",\n  \"noise_suppression\": \"none\",\n  \"speaker_id\": \"{0.0.0.00000000}.{4f9b30cb-872e-49ed-a1b9-a7ec352bf3e6}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/:deviceProfileId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																":roomId",
																"device_profiles",
																":deviceProfileId"
															],
															"variable": [
																{
																	"key": "roomId",
																	"value": "qMOLddnySIGGVycz8aX_JQ",
																	"description": "(Required) The Zoom Room's ID."
																},
																{
																	"key": "deviceProfileId",
																	"value": "wPYhqpOYTsiWV0Ls0_xZRg",
																	"description": "(Required) The Zoom Room device profile's ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `200` \n* Zoom Room subscription not found. Purchase a Zoom Room subscription and try again. <br>\n* Access restricted. \n\n **Error Code:** `300` <br>\n You cannot change this device profile.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"audio_processing\": false,\n  \"auto_adjust_mic_level\": true,\n  \"camera_id\": \"usb#vid_0bda&pid_58fd&mi_00#6&1e7cbc97&0&0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}global\",\n  \"echo_cancellation\": true,\n  \"microphone_id\": \"{0.0.2.00000000}.{eff76572-ac52-4c79-bd30-67f968bjb15f}\",\n  \"noise_suppression\": \"none\",\n  \"speaker_id\": \"{0.0.0.00000000}.{4f9b30cb-872e-49ed-a1b9-a7ec352bf3e6}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/:deviceProfileId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																":roomId",
																"device_profiles",
																":deviceProfileId"
															],
															"variable": [
																{
																	"key": "roomId",
																	"value": "qMOLddnySIGGVycz8aX_JQ",
																	"description": "(Required) The Zoom Room's ID."
																},
																{
																	"key": "deviceProfileId",
																	"value": "wPYhqpOYTsiWV0Ls0_xZRg",
																	"description": "(Required) The Zoom Room device profile's ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1012` <br>\nRoom does not exist: {roomId}.\n**Error Code:** `8005` <br>\nRoom device profile does not exist: {roomId}.\n\n\n",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"audio_processing\": false,\n  \"auto_adjust_mic_level\": true,\n  \"camera_id\": \"usb#vid_0bda&pid_58fd&mi_00#6&1e7cbc97&0&0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}global\",\n  \"echo_cancellation\": true,\n  \"microphone_id\": \"{0.0.2.00000000}.{eff76572-ac52-4c79-bd30-67f968bjb15f}\",\n  \"noise_suppression\": \"none\",\n  \"speaker_id\": \"{0.0.0.00000000}.{4f9b30cb-872e-49ed-a1b9-a7ec352bf3e6}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/:deviceProfileId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																":roomId",
																"device_profiles",
																":deviceProfileId"
															],
															"variable": [
																{
																	"key": "roomId",
																	"value": "qMOLddnySIGGVycz8aX_JQ",
																	"description": "(Required) The Zoom Room's ID."
																},
																{
																	"key": "deviceProfileId",
																	"value": "wPYhqpOYTsiWV0Ls0_xZRg",
																	"description": "(Required) The Zoom Room device profile's ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "List device profiles",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/device_profiles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"device_profiles"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) The Zoom Room's ID."
												}
											]
										},
										"description": "Use this API to return a list of Zoom Room device profiles. \n\n **Scopes:** `room:read:admin` \n\n **Prerequisites:** \n* A Pro or a higher account with Zoom Rooms."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\n Device profiles returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/device_profiles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"device_profiles"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The Zoom Room's ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"audio_processing\": false,\n    \"auto_adjust_mic_level\": true,\n    \"camera_id\": \"usb#vid_0bda&pid_58fd&mi_00#6&1e7cbc97&0&0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}global\",\n    \"echo_cancellation\": true,\n    \"id\": \"Gz_fNcaSPByng-3vsqv_iQ\",\n    \"microphone_id\": \"{0.0.2.00000000}.{eff76572-ac52-4c79-bd30-67f968bjb15f}\",\n    \"name\": \"ZR1 Device\",\n    \"noise_suppression\": \"aggressive\",\n    \"speaker_id\": \"{0.0.0.00000000}.{4f9b30cb-872e-49ed-a1b9-a7ec352bf3e6}\"\n  },\n  {\n    \"audio_processing\": false,\n    \"auto_adjust_mic_level\": true,\n    \"camera_id\": \"usb#vid_0bda&pid_58fd&mi_00#6&1e7cbc97&0&0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}global\",\n    \"echo_cancellation\": true,\n    \"id\": \"Gz_fNcaSPByng-3vsqv_iQ\",\n    \"microphone_id\": \"{0.0.2.00000000}.{eff76572-ac52-4c79-bd30-67f968bjb15f}\",\n    \"name\": \"ZR1 Device\",\n    \"noise_suppression\": \"aggressive\",\n    \"speaker_id\": \"{0.0.0.00000000}.{4f9b30cb-872e-49ed-a1b9-a7ec352bf3e6}\"\n  }\n]"
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `200` \n* Zoom Room subscription not found. Purchase a Zoom Room subscription and try again. <br>\n* Access restricted.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/device_profiles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"device_profiles"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The Zoom Room's ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1012` <br>\n Zoom Room ID does not exist: {roomId}",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/device_profiles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"device_profiles"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The Zoom Room's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create a device profile",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"audio_processing\": false,\n  \"auto_adjust_mic_level\": true,\n  \"camera_id\": \"usb#vid_0bda&pid_58fd&mi_00#6&1e7cbc97&0&0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}global\",\n  \"echo_cancellation\": true,\n  \"microphone_id\": \"{0.0.2.00000000}.{eff76572-ac52-4c79-bd30-67f968bjb15f}\",\n  \"name\": \"ZR1 Device\",\n  \"noise_suppression\": \"none\",\n  \"speaker_id\": \"{0.0.0.00000000}.{4f9b30cb-872e-49ed-a1b9-a7ec352bf3e6}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/device_profiles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"device_profiles"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) The Zoom Room's ID."
												}
											]
										},
										"description": "Use this API to create a Zoom Room device profile. \n\n **Scopes:** `room:write:admin` \n\n **Prerequisites:** \n* A Pro or a higher account with Zoom Rooms."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201` <br>\n Device profile successfully created.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"audio_processing\": false,\n  \"auto_adjust_mic_level\": true,\n  \"camera_id\": \"usb#vid_0bda&pid_58fd&mi_00#6&1e7cbc97&0&0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}global\",\n  \"echo_cancellation\": true,\n  \"microphone_id\": \"{0.0.2.00000000}.{eff76572-ac52-4c79-bd30-67f968bjb15f}\",\n  \"name\": \"ZR1 Device\",\n  \"noise_suppression\": \"none\",\n  \"speaker_id\": \"{0.0.0.00000000}.{4f9b30cb-872e-49ed-a1b9-a7ec352bf3e6}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/device_profiles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"device_profiles"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The Zoom Room's ID."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `200` \n* Zoom Room subscription not found. Purchase a Zoom Room subscription and try again. <br>\n* Access restricted. \n\n **Error Code:** `300` <br>\n Unable to create device profile because t",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"audio_processing\": false,\n  \"auto_adjust_mic_level\": true,\n  \"camera_id\": \"usb#vid_0bda&pid_58fd&mi_00#6&1e7cbc97&0&0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}global\",\n  \"echo_cancellation\": true,\n  \"microphone_id\": \"{0.0.2.00000000}.{eff76572-ac52-4c79-bd30-67f968bjb15f}\",\n  \"name\": \"ZR1 Device\",\n  \"noise_suppression\": \"none\",\n  \"speaker_id\": \"{0.0.0.00000000}.{4f9b30cb-872e-49ed-a1b9-a7ec352bf3e6}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/device_profiles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"device_profiles"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The Zoom Room's ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1012` <br>\n Room does not exist: {roomId}",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"audio_processing\": false,\n  \"auto_adjust_mic_level\": true,\n  \"camera_id\": \"usb#vid_0bda&pid_58fd&mi_00#6&1e7cbc97&0&0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}global\",\n  \"echo_cancellation\": true,\n  \"microphone_id\": \"{0.0.2.00000000}.{eff76572-ac52-4c79-bd30-67f968bjb15f}\",\n  \"name\": \"ZR1 Device\",\n  \"noise_suppression\": \"none\",\n  \"speaker_id\": \"{0.0.0.00000000}.{4f9b30cb-872e-49ed-a1b9-a7ec352bf3e6}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/device_profiles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"device_profiles"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The Zoom Room's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get device information",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/devices",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"device_profiles",
												"devices"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) The Zoom Room's ID."
												}
											]
										},
										"description": "Use this API to return information about a Zoom Room device. \n\n **Scopes:** `room:read:admin` \n\n **Prerequisites:** \n* A Pro or a higher account with Zoom Rooms."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\n Device information returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"device_profiles",
														"devices"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The Zoom Room's ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"cameras\": [\n    {\n      \"id\": \"usb#vid_0bda&pid_58fd&mi_00#6&1e7cbc97&0&0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}global\",\n      \"name\": \"Integrated Webcam\"\n    },\n    {\n      \"id\": \"usb#vid_0bda&pid_58fd&mi_00#6&1e7cbc97&0&0000#{65e8773d-8f56-11d0-a3b9-00a0c9223196}global\",\n      \"name\": \"Integrated Webcam\"\n    }\n  ],\n  \"microphones\": [\n    {\n      \"id\": \"{0.0.1.00000000}.{eff76542-ac52-4c78-bd90-67f968bab16f}\",\n      \"name\": \"Realtek(R) Audio\"\n    },\n    {\n      \"id\": \"{0.0.1.00000000}.{eff76542-ac52-4c78-bd90-67f968bab16f}\",\n      \"name\": \"Realtek(R) Audio\"\n    }\n  ],\n  \"speakers\": [\n    {\n      \"id\": \"{0.0.0.00000000}.{4f9b30cb-872e-49ed-a1b9-a7ec352bf3e6}\",\n      \"name\": \"Realtek(R) Audio\"\n    },\n    {\n      \"id\": \"{0.0.0.00000000}.{4f9b30cb-872e-49ed-a1b9-a7ec352bf3e6}\",\n      \"name\": \"Realtek(R) Audio\"\n    }\n  ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `200` \n* Zoom Room subscription not found. Purchase a Zoom Room subscription and try again. <br>\n* Access restricted.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"device_profiles",
														"devices"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The Zoom Room's ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1012` <br>\n Zoom Room ID does not exist: {roomId}",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/device_profiles/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"device_profiles",
														"devices"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The Zoom Room's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "devices",
							"item": [
								{
									"name": "List Zoom Room devices",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/devices",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"devices"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of [**List Zoom Rooms**](/api-reference/zoom-api/methods#operation/listZoomRooms) API."
												}
											]
										},
										"description": "List information about the devices that are being used for a specific [Zoom Room](https://support.zoom.us/hc/en-us/articles/207483343-Getting-Started-with-Zoom-Rooms) in an account.\n\n**Prerequisites:**<br>\n* Pro or a higher plan with [Zoom Room](https://zoom.us/zoomrooms) license.<br>\n* Account owner or admin permissions.\n**Scopes**: `room:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` **OK**\nDevices listed successfully.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"devices"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of [**List Zoom Rooms**](/api-reference/zoom-api/methods#operation/listZoomRooms) API."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"devices\": [\n    {\n      \"app_version\": \"5.9.1 (2581)\",\n      \"device_system\": \"Win10 Build 19043.1266\",\n      \"device_type\": \"Controller\",\n      \"id\": \"{0.0.1.00000000}.{eff76542-ac52-4c78-bd90-67f968bab16f}\",\n      \"room_name\": \"My Room\",\n      \"status\": \"Online\"\n    },\n    {\n      \"app_version\": \"5.9.1 (2581)\",\n      \"device_system\": \"Win10 Build 19043.1266\",\n      \"device_type\": \"Controller\",\n      \"id\": \"{0.0.1.00000000}.{eff76542-ac52-4c78-bd90-67f968bab16f}\",\n      \"room_name\": \"My Room\",\n      \"status\": \"Online\"\n    }\n  ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"devices"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of [**List Zoom Rooms**](/api-reference/zoom-api/methods#operation/listZoomRooms) API."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Change Zoom Rooms app version",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"upgrade\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/devices/:deviceId/app_version",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"devices",
												":deviceId",
												"app_version"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of the Zoom Room."
												},
												{
													"key": "deviceId",
													"value": "qsrpAOJCTm-VPkOf3bHXgw",
													"description": "(Required) Unique Identifier of the Mac or the Windows device. The value of this field can be retrieved from the [**List Zoom Room devices**](/api-reference/zoom-api/methods#operation/listZRDevices) API."
												}
											]
										},
										"description": "Use this API to [upgrade or downgrade](https://support.zoom.us/hc/en-us/articles/204675449-Upgrade-or-Downgrade-Zoom-Rooms-Software) the version of your installed Zoom Rooms app on your Mac or Windows device. \n\n**Scopes:** `room:write:admin` \n\n**Prerequisites:** \n* A Pro or a higher account with Zoom Rooms. \n* The Zoom Rooms software must be installed on a Mac or a Windows device. This API does not support other devices."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **No Content** <br>\nRequest processed successfully.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"upgrade\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/devices/:deviceId/app_version",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"devices",
														":deviceId",
														"app_version"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) Unique Identifier of the Zoom Room."
														},
														{
															"key": "deviceId",
															"value": "qsrpAOJCTm-VPkOf3bHXgw",
															"description": "(Required) Unique Identifier of the Mac or the Windows device. The value of this field can be retrieved from the [**List Zoom Room devices**](/api-reference/zoom-api/methods#operation/listZRDevices) API."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `8001` <br> Cannot process this upgrade request. The Zoom Rooms Software in this device is either already up to date or is currently being updated.  <br>  <br> \n**Error Code:** `8002` <br> Ca",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"action\": \"upgrade\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/devices/:deviceId/app_version",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"devices",
														":deviceId",
														"app_version"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) Unique Identifier of the Zoom Room."
														},
														{
															"key": "deviceId",
															"value": "qsrpAOJCTm-VPkOf3bHXgw",
															"description": "(Required) Unique Identifier of the Mac or the Windows device. The value of this field can be retrieved from the [**List Zoom Room devices**](/api-reference/zoom-api/methods#operation/listZRDevices) API."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "settings",
							"item": [
								{
									"name": "Get Zoom Room settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=meeting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"settings"
											],
											"query": [
												{
													"key": "setting_type",
													"value": "meeting",
													"description": "(Required) The type of setting that you would like to retrieve.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>\n`meeting`: Meeting settings of the Zoom Rooms Account."
												}
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique identifier of the Zoom Room."
												}
											]
										},
										"description": "Get information on meeting or alert settings applied to a specific Zoom Room. By default, only **Meeting Settings** are returned. To view only **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter.<br>\n**Prerequisites:**<br>\n* Zoom Room licenses\n* Owner or Admin privileges on the Zoom Account.<br>\n**Scopes:** `room:read:admin`\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br> "
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` **OK**<br>\nZoom Room settings returned successfully.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=meeting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "meeting"
														}
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) Unique identifier of the Zoom Room."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"meeting_security\": {\n    \"encryption_type\": \"e2ee\",\n    \"end_to_end_encrypted_meetings\": true\n  },\n  \"zoom_rooms\": {\n    \"allow_multiple_content_sharing\": true,\n    \"audio_device_daily_auto_test\": true,\n    \"auto_direct_sharing\": true,\n    \"auto_start_scheduled_meeting\": true,\n    \"auto_stop_scheduled_meeting\": true,\n    \"count_attendees_number_in_room\": true,\n    \"display_feedback_survey\": true,\n    \"display_meeting_list\": true,\n    \"display_top_banner\": true,\n    \"encrypt_shared_screen_content\": true,\n    \"hide_id_for_private_meeting\": true,\n    \"hide_share_instruction\": true,\n    \"send_whiteboard_to_internal_contact_only\": true,\n    \"show_alert_before_meeting\": true,\n    \"show_call_history_in_room\": true,\n    \"show_contact_list_on_controller\": true,\n    \"show_non_video_participants\": true,\n    \"start_airplay_manually\": true,\n    \"start_airplay_mirroring\": true,\n    \"support_join_3rd_party_meeting\": true,\n    \"transform_meeting_to_private\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true\n  }\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=meeting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "meeting"
														}
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) Unique identifier of the Zoom Room."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\n\n**Error Code:** `1012`<br>\nRoom not found:{roomId}.\n\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=meeting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "meeting"
														}
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) Unique identifier of the Zoom Room."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update Zoom Room settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"meeting_security\": {\n    \"encryption_type\": \"e2ee\",\n    \"end_to_end_encrypted_meetings\": true\n  },\n  \"zoom_rooms\": {\n    \"allow_multiple_content_sharing\": true,\n    \"audio_device_daily_auto_test\": true,\n    \"auto_direct_sharing\": true,\n    \"auto_start_scheduled_meeting\": true,\n    \"auto_stop_scheduled_meeting\": true,\n    \"count_attendees_number_in_room\": true,\n    \"display_feedback_survey\": true,\n    \"display_meeting_list\": true,\n    \"display_top_banner\": true,\n    \"encrypt_shared_screen_content\": true,\n    \"hide_id_for_private_meeting\": true,\n    \"hide_share_instruction\": true,\n    \"send_whiteboard_to_internal_contact_only\": true,\n    \"show_alert_before_meeting\": true,\n    \"show_call_history_in_room\": true,\n    \"show_contact_list_on_controller\": true,\n    \"show_non_video_participants\": true,\n    \"start_airplay_manually\": true,\n    \"start_airplay_mirroring\": true,\n    \"support_join_3rd_party_meeting\": true,\n    \"transform_meeting_to_private\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=alert",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"settings"
											],
											"query": [
												{
													"key": "setting_type",
													"value": "alert",
													"description": "The type of setting that you would like to update.<br> `alert`: Alert Settings applied on the Zoom Room.<br>\n`meeting`: Meeting settings of the Zoom Room.<br>\n`signage`: Digital signage settings applied on the Zoom Room."
												}
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of the Zoom Room."
												}
											]
										},
										"description": "Update either meeting or alert settings applied to a specific Zoom Room. To update **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter. To update **Meeting Settings**, specify `meeting` as the value of the `setting_type` query parameter.<br>\n**Prerequisites:**<br>\n* Zoom Room licenses\n* Owner or Admin privileges on the Zoom Account.<br>\n**Scopes:** `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **No Content**<br>\nSettings updated successfully. ",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"meeting_security\": {\n    \"encryption_type\": \"e2ee\",\n    \"end_to_end_encrypted_meetings\": true\n  },\n  \"zoom_rooms\": {\n    \"allow_multiple_content_sharing\": true,\n    \"audio_device_daily_auto_test\": true,\n    \"auto_direct_sharing\": true,\n    \"auto_start_scheduled_meeting\": true,\n    \"auto_stop_scheduled_meeting\": true,\n    \"count_attendees_number_in_room\": true,\n    \"display_feedback_survey\": true,\n    \"display_meeting_list\": true,\n    \"display_top_banner\": true,\n    \"encrypt_shared_screen_content\": true,\n    \"hide_id_for_private_meeting\": true,\n    \"hide_share_instruction\": true,\n    \"send_whiteboard_to_internal_contact_only\": true,\n    \"show_alert_before_meeting\": true,\n    \"show_call_history_in_room\": true,\n    \"show_contact_list_on_controller\": true,\n    \"show_non_video_participants\": true,\n    \"start_airplay_manually\": true,\n    \"start_airplay_mirroring\": true,\n    \"support_join_3rd_party_meeting\": true,\n    \"transform_meeting_to_private\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=alert",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "alert"
														}
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) Unique Identifier of the Zoom Room."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"meeting_security\": {\n    \"encryption_type\": \"e2ee\",\n    \"end_to_end_encrypted_meetings\": true\n  },\n  \"zoom_rooms\": {\n    \"allow_multiple_content_sharing\": true,\n    \"audio_device_daily_auto_test\": true,\n    \"auto_direct_sharing\": true,\n    \"auto_start_scheduled_meeting\": true,\n    \"auto_stop_scheduled_meeting\": true,\n    \"count_attendees_number_in_room\": true,\n    \"display_feedback_survey\": true,\n    \"display_meeting_list\": true,\n    \"display_top_banner\": true,\n    \"encrypt_shared_screen_content\": true,\n    \"hide_id_for_private_meeting\": true,\n    \"hide_share_instruction\": true,\n    \"send_whiteboard_to_internal_contact_only\": true,\n    \"show_alert_before_meeting\": true,\n    \"show_call_history_in_room\": true,\n    \"show_contact_list_on_controller\": true,\n    \"show_non_video_participants\": true,\n    \"start_airplay_manually\": true,\n    \"start_airplay_mirroring\": true,\n    \"support_join_3rd_party_meeting\": true,\n    \"transform_meeting_to_private\": true,\n    \"upcoming_meeting_alert\": true,\n    \"weekly_system_restart\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=alert",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "alert"
														}
													],
													"variable": [
														{
															"key": "roomId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) Unique Identifier of the Zoom Room."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Delete a Zoom Room",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/rooms/:roomId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":roomId"
									],
									"variable": [
										{
											"key": "roomId",
											"value": "qMOLddnySIGGVycz8aX_JQ",
											"description": "(Required) Unique Identifier of a Zoom Room."
										}
									]
								},
								"description": "[Remove](https://support.zoom.us/hc/en-us/articles/360033432032-Zoom-Room-Device-Profiles#h_e55b2092-c418-4b02-819f-44de51448900) a specific Zoom Room profile from a Zoom account.<br><br>\n**Prerequisites:**<br>\n* Pro or a higher plan with [Zoom Room](https://zoom.us/zoomrooms) license.<br>\n**Scopes**: `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **No Content** <br>\nZoom Room deleted successfully.\n",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of a Zoom Room."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.<br>\n\n\n\n",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of a Zoom Room."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found** <br><br>\n**Error Code:** `1012`<br>\nRoom not found:{roomId}",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of a Zoom Room."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Zoom Room profile",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rooms/:roomId?regenerate_activation_code=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":roomId"
									],
									"query": [
										{
											"key": "regenerate_activation_code",
											"value": "true",
											"description": "Whether to regenerate an activation code for a Zoom Room. This value defaults to `false`."
										}
									],
									"variable": [
										{
											"key": "roomId",
											"value": "qMOLddnySIGGVycz8aX_JQ",
											"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of the [**List Zoom Rooms**](/api-reference/zoom-api/methods#operation/listZoomRooms) API."
										}
									]
								},
								"description": "\nZoom Rooms is a software-based room system that provides an integrated experience for audio conferencing, wireless screen sharing and video conferencing. Use this API to get detailed information on a specific Zoom Room in a Zoom account.\n\n**Prerequisites:**<br>\n* Pro or a higher plan with [Zoom Room](https://zoom.us/zoomrooms) license.<br>\n**Scopes**: `room:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nZoom Room profile returned successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId?regenerate_activation_code=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"query": [
												{
													"key": "regenerate_activation_code",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of the [**List Zoom Rooms**](/api-reference/zoom-api/methods#operation/listZoomRooms) API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"basic\": {\n    \"activation_code\": \"1315-2376-2198-7926\",\n    \"hide_room_in_contacts\": true,\n    \"name\": \"My Room\",\n    \"required_code_to_ext\": true,\n    \"room_passcode\": \"111111\",\n    \"support_email\": \"contact-it@example.com\",\n    \"support_phone\": \"18798769876\"\n  },\n  \"device\": {\n    \"device_profile_id\": \"J352JVkNRpyAgUaurxmrsh\"\n  }\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\n* Zoom Room subscription not found. Try again after purchasing a Zoom Room subscription.\n* Access restricted.\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId?regenerate_activation_code=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"query": [
												{
													"key": "regenerate_activation_code",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of the [**List Zoom Rooms**](/api-reference/zoom-api/methods#operation/listZoomRooms) API."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n\n**Error Code:** `1012`<br>\nRoom not found:{roomId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId?regenerate_activation_code=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"query": [
												{
													"key": "regenerate_activation_code",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of the [**List Zoom Rooms**](/api-reference/zoom-api/methods#operation/listZoomRooms) API."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a Zoom Room profile",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"basic\": {\n    \"hide_room_in_contacts\": true,\n    \"name\": \"My Room\",\n    \"required_code_to_ext\": true,\n    \"room_passcode\": \"111111\",\n    \"support_email\": \"contact-it@example.com\",\n    \"support_phone\": \"18798769876\"\n  },\n  \"device\": {\n    \"device_profile_id\": \"J352JVkNRpyAgUaurxmrsh\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/:roomId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":roomId"
									],
									"variable": [
										{
											"key": "roomId",
											"value": "qMOLddnySIGGVycz8aX_JQ",
											"description": "(Required) Unique Identifier of a Zoom Room."
										}
									]
								},
								"description": "Update basic information on a specific Zoom Room in a Zoom account.<br>\n\n**Prerequisites:**<br>\n* Pro or a higher plan with [Zoom Room](https://zoom.us/zoomrooms) license.<br>\n**Scopes**: `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **No Content**<br>\nRoom Profile information updated successfully.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"basic\": {\n    \"hide_room_in_contacts\": true,\n    \"name\": \"My Room\",\n    \"required_code_to_ext\": true,\n    \"room_passcode\": \"111111\",\n    \"support_email\": \"contact-it@example.com\",\n    \"support_phone\": \"18798769876\"\n  },\n  \"device\": {\n    \"device_profile_id\": \"J352JVkNRpyAgUaurxmrsh\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of a Zoom Room."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.<br><br>\n\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"basic\": {\n    \"hide_room_in_contacts\": true,\n    \"name\": \"My Room\",\n    \"required_code_to_ext\": true,\n    \"room_passcode\": \"111111\",\n    \"support_email\": \"contact-it@example.com\",\n    \"support_phone\": \"18798769876\"\n  },\n  \"device\": {\n    \"device_profile_id\": \"J352JVkNRpyAgUaurxmrsh\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of a Zoom Room."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `1012` <br>\nZoom Room not found: {roomId} \n\n**Error Code:** `8005` <br>\nZoom Room device profile does not exist: {roomId}",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"basic\": {\n    \"hide_room_in_contacts\": true,\n    \"name\": \"My Room\",\n    \"required_code_to_ext\": true,\n    \"room_passcode\": \"111111\",\n    \"support_email\": \"contact-it@example.com\",\n    \"support_phone\": \"18798769876\"\n  },\n  \"device\": {\n    \"device_profile_id\": \"J352JVkNRpyAgUaurxmrsh\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of a Zoom Room."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Change a Zoom Room's location",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/:roomId/location",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":roomId",
										"location"
									],
									"variable": [
										{
											"key": "roomId",
											"value": "qMOLddnySIGGVycz8aX_JQ",
											"description": "(Required) Unique Identifier of the Zoom Room."
										}
									]
								},
								"description": "An account owner of a Zoom account can establish a [Zoom Rooms Location Hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) to better organize Zoom Rooms spread across various locations. The location can be structured in a hierarchy with Country being the top-level location, followed by city, campus, building, and floor. Use this API to assign a new location for a Zoom Room. Note that the Zoom Room can be assigned only to the lowest level location available in the hierarchy.\n**Prerequisite:**<br>\n* Account owner or admin permission\n* Zoom Rooms version 4.0 or higher<br>\n**Scopes:** `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **No Content**<br>\nLocation of the Zoom Room changed successfully.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/location",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"location"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of the Zoom Room."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/location",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"location"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of the Zoom Room."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `4801`<br>\nLocation not found: {location_id}",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/location",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"location"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) Unique Identifier of the Zoom Room."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List Zoom Rooms",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/rooms?status=Offline&type=ZoomRoom&unassigned_rooms=true&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&location_id=49D7a0xPQvGQ2DCMZgSe7w",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rooms"
							],
							"query": [
								{
									"key": "status",
									"value": "Offline",
									"description": "The status of the Zoom Room."
								},
								{
									"key": "type",
									"value": "ZoomRoom",
									"description": "Type of the Zoom Rooms."
								},
								{
									"key": "unassigned_rooms",
									"value": "true",
									"description": "Use this query parameter with a value of `true` if you would like to see Zoom Rooms in your account that have not been assigned to anyone yet."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								},
								{
									"key": "location_id",
									"value": "49D7a0xPQvGQ2DCMZgSe7w",
									"description": "Parent location ID of the Zoom Room."
								}
							]
						},
						"description": "Zoom Rooms is a software-based room system that provides an integrated experience for audio conferencing, wireless screen sharing and video conferencing. Use this API to list all the existing [Zoom Rooms](https://support.zoom.us/hc/en-us/articles/207483343-Getting-Started-with-Zoom-Rooms) in a Zoom account.<br><br>\n**Prerequisites:**<br>\n* Pro or a higher plan with [Zoom Room](https://zoom.us/zoomrooms) license.<br>\n**Scopes**: `room:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nA list of Zoom Rooms returned successfully.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rooms?status=Offline&type=ZoomRoom&unassigned_rooms=true&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&location_id=49D7a0xPQvGQ2DCMZgSe7w",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms"
									],
									"query": [
										{
											"key": "status",
											"value": "Offline"
										},
										{
											"key": "type",
											"value": "ZoomRoom"
										},
										{
											"key": "unassigned_rooms",
											"value": "true"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										},
										{
											"key": "location_id",
											"value": "49D7a0xPQvGQ2DCMZgSe7w"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"next_page_token\": \"At6eWnFZ1FB3arCXnRxqHLXKhbDW18yz2i2\",\n  \"page_size\": 20,\n  \"rooms\": [\n    {\n      \"activation_code\": \"1315-2376-2198-7926\",\n      \"id\": \"qMOLddnySIGGVycz8aX_JQ\",\n      \"location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\",\n      \"name\": \"My Room\",\n      \"room_id\": \"qMOLddnySIGGVycz8aX_JQ\",\n      \"status\": \"Offline\"\n    },\n    {\n      \"activation_code\": \"1315-2376-2198-7926\",\n      \"id\": \"qMOLddnySIGGVycz8aX_JQ\",\n      \"location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\",\n      \"name\": \"My Room\",\n      \"room_id\": \"qMOLddnySIGGVycz8aX_JQ\",\n      \"status\": \"Offline\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Add a Zoom Room",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"My Room\",\n  \"type\": \"ZoomRoom\",\n  \"location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/rooms",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rooms"
							]
						},
						"description": "Use this API to [add a Zoom Room](https://support.zoom.us/hc/en-us/articles/202822279-Add-Zoom-Rooms-on-Web-Portal) to a Zoom account.<br><br>\n**Prerequisites:**<br>\n* Pro or a higher plan with [Zoom Room](https://zoom.us/zoomrooms) license.<br>\n**Scopes**: `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `201` **Created**<br>\nZoom Room added successfully.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"My Room\",\n  \"type\": \"ZoomRoom\",\n  \"location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/rooms",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"qMOLddnySIGGVycz8aX_JQ\",\n  \"location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\",\n  \"name\": \"My Room\",\n  \"room_id\": \"qMOLddnySIGGVycz8aX_JQ\",\n  \"type\": \"ZoomRoom\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br> Zoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAt least one normal Zoom Rooms required.<br><br>\n**Error Code:** `300`<br>\nInvalid par",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"My Room\",\n  \"type\": \"ZoomRoom\",\n  \"location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/rooms",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n\n**Error Code:** `4801`<br>\nLocation not found:{location_id}",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"My Room\",\n  \"type\": \"ZoomRoom\",\n  \"location_id\": \"49D7a0xPQvGQ2DCMZgSe7w\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/rooms",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "List digital signage contents",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/rooms/digital_signage?type=content&folder_id=LHMmOOYaRiOA5m5WZjXVPA&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rooms",
								"digital_signage"
							],
							"query": [
								{
									"key": "type",
									"value": "content",
									"description": "Specify the type of digital signage resource. The value can be one of the following:\n* `content`: Returns information about content files.\n* `folder`: Returns information about the folder where the content files are located."
								},
								{
									"key": "folder_id",
									"value": "LHMmOOYaRiOA5m5WZjXVPA",
									"description": "Unique identifier of the folder where the content is located. Provide this field if you would like to filter the response by contents that are only available in a specific folder."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "Use this API to return information about a Zoom account's [Zoom Rooms digital signage content](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage). You can also view this content in the **Room Management** section's [**Digital Signage Content**](https://zoom.us/digitalsignage#/) tab in the Zoom web portal. \n\n**Scopes:** `room:read:admin` \n\n**Prerequisites:** \n* A Pro or a higher account with Zoom Rooms. \n* Existing content in the **Digital Signage Content** tab."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200` **OK**<br>\nList returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rooms/digital_signage?type=content&folder_id=LHMmOOYaRiOA5m5WZjXVPA&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"digital_signage"
									],
									"query": [
										{
											"key": "type",
											"value": "content"
										},
										{
											"key": "folder_id",
											"value": "LHMmOOYaRiOA5m5WZjXVPA"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"contents\": [\n    {\n      \"id\": \"LHMmOOYaRiOA5m5WZjXVPA\",\n      \"name\": \"content name\"\n    },\n    {\n      \"id\": \"LHMmOOYaRiOA5m5WZjXVPA\",\n      \"name\": \"content name\"\n    }\n  ],\n  \"next_page_token\": \"At6eWnFZ1FB3arCXnRxqHLXKhbDW18yz2i2\",\n  \"page_size\": 20\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n* Zoom Room subscription was not found. Try again after purchasing a Zoom Room subscription.\n* Access restricted.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rooms/digital_signage?type=content&folder_id=LHMmOOYaRiOA5m5WZjXVPA&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"digital_signage"
									],
									"query": [
										{
											"key": "type",
											"value": "content"
										},
										{
											"key": "folder_id",
											"value": "LHMmOOYaRiOA5m5WZjXVPA"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update E911 digital signage",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"method\": \"zoomroom.emergency_alert_displayed\",\n  \"params\": {\n    \"content\": \"diaplay content\",\n    \"target_ids\": [\n      \"qMOLddnySIGGVycz8aX_JQ\"\n    ],\n    \"target_type\": \"account\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/rooms/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rooms",
								"events"
							]
						},
						"description": "Display or hide E911 emergency alert text content from [Zoom Rooms digital signage](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage).\n\n**Scope:** `room:write:admin`\n\n**Prerequisites:**<br>\n* [Zoom Rooms](https://zoom.us/zoomrooms/software) 5.3.0 or higher\n* Zoom Rooms digital signage must be [enabled](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-Digital-Signage#h_767fbb33-82a8-45a8-8392-a1bfa9687edd)\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `202` <br>",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"method\": \"zoomroom.emergency_alert_displayed\",\n  \"params\": {\n    \"content\": \"diaplay content\",\n    \"target_ids\": [\n      \"qMOLddnySIGGVycz8aX_JQ\"\n    ],\n    \"target_type\": \"account\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"events"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"event_id\": \"ebrg2b87a6uu9c678qhvsiahsc\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` <br>\n\n**Error Code:** `200` <br> Access restricted. <br><br>\n**Error Code:** `300`\nEvent id is required.<br>\nInvalid value submitted for Target Ids. Provide a valid Target Id associated with the Target type.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"method\": \"zoomroom.emergency_alert_displayed\",\n  \"params\": {\n    \"content\": \"diaplay content\",\n    \"target_ids\": [\n      \"qMOLddnySIGGVycz8aX_JQ\"\n    ],\n    \"target_type\": \"account\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"events"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Check-in or check-out of a Zoom Room",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"method\": \"zoomroom.check_in\",\n  \"params\": {\n    \"event_id\": \"ebrg2b87a6uu9c678qhvsiahsc\",\n    \"calendar_id\": \"mycalendar@example.com\",\n    \"change_key\": \"test_change_key\",\n    \"resource_email\": \"zroom1@example.com\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/rooms/:id/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rooms",
								":id",
								"events"
							],
							"variable": [
								{
									"key": "id",
									"value": "qMOLddnySIGGVycz8aX_JQ",
									"description": "(Required) Room ID"
								}
							]
						},
						"description": "The Zoom Rooms check-in feature helps maximize your room utilization. Use this API to either **check in** and confirm that you are utilizing the room reservation or to **check out** of the room so that the room gets released from the scheduled meeting and will be made available for others to use. Learn more from the [Using the Zoom Rooms check-in feature](https://support.zoom.us/hc/en-us/articles/360001147163-Using-the-Zoom-Rooms-check-in-feature) guide. \n\n**Prerequisites:**\n* [Zoom Rooms](https://support.zoom.us/hc/en-us/articles/207483343-Getting-started-with-Zoom-Rooms#:~:text=Zoom%20Rooms%20is%20a%20software,or%20from%20their%20mobile%20device) must have been set up for use for the account and must be online. \n* You must have access to the Calendar Integration APIs (either Microsoft Exchange or Google Calendar APIs) to get calendar information associated with the Room.\n\n**Scope:** `room:write:admin`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `202` **Accepted**<br>\nRequest processed successfully.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"method\": \"zoomroom.check_in\",\n  \"params\": {\n    \"event_id\": \"ebrg2b87a6uu9c678qhvsiahsc\",\n    \"calendar_id\": \"mycalendar@example.com\",\n    \"change_key\": \"test_change_key\",\n    \"resource_email\": \"zroom1@example.com\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/:id/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":id",
										"events"
									],
									"variable": [
										{
											"key": "id",
											"value": "qMOLddnySIGGVycz8aX_JQ",
											"description": "(Required) Room ID"
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br>\n* Zoom Room is offline. Please ensure that the Zoom Room is online before checking in or checking out.\n* Invalid parameters.\n\n\n",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"method\": \"zoomroom.check_in\",\n  \"params\": {\n    \"event_id\": \"ebrg2b87a6uu9c678qhvsiahsc\",\n    \"calendar_id\": \"mycalendar@example.com\",\n    \"change_key\": \"test_change_key\",\n    \"resource_email\": \"zroom1@example.com\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/:id/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":id",
										"events"
									],
									"variable": [
										{
											"key": "id",
											"value": "qMOLddnySIGGVycz8aX_JQ",
											"description": "(Required) Room ID"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1012` <br>\nRoom does not exist: {roomId}.\n\n\n",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"method\": \"zoomroom.check_in\",\n  \"params\": {\n    \"event_id\": \"ebrg2b87a6uu9c678qhvsiahsc\",\n    \"calendar_id\": \"mycalendar@example.com\",\n    \"change_key\": \"test_change_key\",\n    \"resource_email\": \"zroom1@example.com\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/:id/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":id",
										"events"
									],
									"variable": [
										{
											"key": "id",
											"value": "qMOLddnySIGGVycz8aX_JQ",
											"description": "(Required) Room ID"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "sip phones",
			"item": [
				{
					"name": "{phone Id}",
					"item": [
						{
							"name": "Delete SIP phone",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sip_phones/:phoneId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones",
										":phoneId"
									],
									"variable": [
										{
											"key": "phoneId",
											"value": "123456",
											"description": "(Required) Unique Identifier of the SIP Phone. It can be retrieved from the List SIP Phones API."
										}
									]
								},
								"description": "Use this API to delete a Zoom account's SIP phone. \n\n **Scopes:** `sip_phone:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites**: \n* Currently only supported on Cisco and Avaya PBX systems. \n* The user must enable **SIP Phone Integration** by contacting the [Zoom Sales](https://zoom.us/contactsales) team."
							},
							"response": [
								{
									"name": "**Error Code:** `200`<br>Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "123456",
													"description": "(Required) Unique Identifier of the SIP Phone. It can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204`<br>\nSIP Phone deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "123456",
													"description": "(Required) Unique Identifier of the SIP Phone. It can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300`The SIP phone with this phoneId was not found on this account.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "123456",
													"description": "(Required) Unique Identifier of the SIP Phone. It can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update SIP phone",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"domain\": \"example.com\",\n  \"register_server\": \"192.0.2.1\",\n  \"proxy_server\": \"192.0.2.2\",\n  \"register_server2\": \"192.0.2.3\",\n  \"proxy_server2\": \"192.0.2.4\",\n  \"register_server3\": \"192.0.2.5\",\n  \"proxy_server3\": \"192.0.2.6\",\n  \"user_name\": \"Jill Chill\",\n  \"password\": \"123456\",\n  \"authorization_name\": \"testname\",\n  \"voice_mail\": \"4000\",\n  \"registration_expire_time\": 60,\n  \"transport_protocol\": \"UDP\",\n  \"transport_protocol2\": \"UDP\",\n  \"transport_protocol3\": \"UDP\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sip_phones/:phoneId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones",
										":phoneId"
									],
									"variable": [
										{
											"key": "phoneId",
											"value": "123456",
											"description": "(Required) Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API."
										}
									]
								},
								"description": "Zoom's Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to update information of a specific SIP Phone on a Zoom account.<br><br>\n**Prerequisites**:\n* Currently only supported on Cisco and Avaya PBX systems. \n* The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:write:admin`\n<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**Error Code:** `200`<br>\nPermission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"domain\": \"example.com\",\n  \"register_server\": \"192.0.2.1\",\n  \"proxy_server\": \"192.0.2.2\",\n  \"register_server2\": \"192.0.2.3\",\n  \"proxy_server2\": \"192.0.2.4\",\n  \"register_server3\": \"192.0.2.5\",\n  \"proxy_server3\": \"192.0.2.6\",\n  \"user_name\": \"Jill Chill\",\n  \"password\": \"123456\",\n  \"authorization_name\": \"testname\",\n  \"voice_mail\": \"4000\",\n  \"registration_expire_time\": 60,\n  \"transport_protocol\": \"UDP\",\n  \"transport_protocol2\": \"UDP\",\n  \"transport_protocol3\": \"UDP\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "123456",
													"description": "(Required) Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204`<br>\nSIP Phone information updated successfully.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"domain\": \"example.com\",\n  \"register_server\": \"192.0.2.1\",\n  \"proxy_server\": \"192.0.2.2\",\n  \"register_server2\": \"192.0.2.3\",\n  \"proxy_server2\": \"192.0.2.4\",\n  \"register_server3\": \"192.0.2.5\",\n  \"proxy_server3\": \"192.0.2.6\",\n  \"user_name\": \"Jill Chill\",\n  \"password\": \"123456\",\n  \"authorization_name\": \"testname\",\n  \"voice_mail\": \"4000\",\n  \"registration_expire_time\": 60,\n  \"transport_protocol\": \"UDP\",\n  \"transport_protocol2\": \"UDP\",\n  \"transport_protocol3\": \"UDP\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "123456",
													"description": "(Required) Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300`<br>\n SIP phone not found: phoneId.<br>\n The SIP phone with this phoneId was not found on this account.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"domain\": \"example.com\",\n  \"register_server\": \"192.0.2.1\",\n  \"proxy_server\": \"192.0.2.2\",\n  \"register_server2\": \"192.0.2.3\",\n  \"proxy_server2\": \"192.0.2.4\",\n  \"register_server3\": \"192.0.2.5\",\n  \"proxy_server3\": \"192.0.2.6\",\n  \"user_name\": \"Jill Chill\",\n  \"password\": \"123456\",\n  \"authorization_name\": \"testname\",\n  \"voice_mail\": \"4000\",\n  \"registration_expire_time\": 60,\n  \"transport_protocol\": \"UDP\",\n  \"transport_protocol2\": \"UDP\",\n  \"transport_protocol3\": \"UDP\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "123456",
													"description": "(Required) Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request.\n\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"domain\": \"example.com\",\n  \"register_server\": \"192.0.2.1\",\n  \"proxy_server\": \"192.0.2.2\",\n  \"register_server2\": \"192.0.2.3\",\n  \"proxy_server2\": \"192.0.2.4\",\n  \"register_server3\": \"192.0.2.5\",\n  \"proxy_server3\": \"192.0.2.6\",\n  \"user_name\": \"Jill Chill\",\n  \"password\": \"123456\",\n  \"authorization_name\": \"testname\",\n  \"voice_mail\": \"4000\",\n  \"registration_expire_time\": 60,\n  \"transport_protocol\": \"UDP\",\n  \"transport_protocol2\": \"UDP\",\n  \"transport_protocol3\": \"UDP\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "123456",
													"description": "(Required) Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List SIP phones",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sip_phones?page_number=1&search_key=jchill@example.com&page_size=30&next_page_token=Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sip_phones"
							],
							"query": [
								{
									"key": "page_number",
									"value": "1",
									"description": "**Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination."
								},
								{
									"key": "search_key",
									"value": "jchill@example.com",
									"description": "User name or email address of a user. If this parameter is provided, only the SIP phone system integration enabled for that specific user will be returned. Otherwise, all SIP phones on an account will be returned."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "Zoom's Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to list SIP phones on an account.<br><br>\n**Prerequisites**:\n* Currently only supported on Cisco and Avaya PBX systems. \n* User must enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSIP Phones listed successfully.\n\n**Error Code:** `200`<br>\nPermission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sip_phones?page_number=1&search_key=jchill@example.com&page_size=30&next_page_token=Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones"
									],
									"query": [
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "search_key",
											"value": "jchill@example.com"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"next_page_token\": \"Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3\",\n  \"page_count\": 1,\n  \"page_number\": 1,\n  \"page_size\": 30,\n  \"phones\": [\n    {\n      \"authorization_name\": \"testname\",\n      \"domain\": \"example.com\",\n      \"id\": \"123456\",\n      \"password\": \"apassword1\",\n      \"proxy_server\": \"192.0.2.2\",\n      \"proxy_server2\": \"192.0.2.4\",\n      \"proxy_server3\": \"192.0.2.6\",\n      \"register_server\": \"192.0.2.1\",\n      \"register_server2\": \"192.0.2.3\",\n      \"register_server3\": \"192.0.2.5\",\n      \"registration_expire_time\": 60,\n      \"transport_protocol\": \"UDP\",\n      \"transport_protocol2\": \"UDP\",\n      \"transport_protocol3\": \"UDP\",\n      \"user_email\": \"jchill@example.com\",\n      \"user_name\": \"Jill Chill\",\n      \"voice_mail\": \"4000\"\n    },\n    {\n      \"authorization_name\": \"testname\",\n      \"domain\": \"example.com\",\n      \"id\": \"123456\",\n      \"password\": \"apassword1\",\n      \"proxy_server\": \"192.0.2.2\",\n      \"proxy_server2\": \"192.0.2.4\",\n      \"proxy_server3\": \"192.0.2.6\",\n      \"register_server\": \"192.0.2.1\",\n      \"register_server2\": \"192.0.2.3\",\n      \"register_server3\": \"192.0.2.5\",\n      \"registration_expire_time\": 60,\n      \"transport_protocol\": \"UDP\",\n      \"transport_protocol2\": \"UDP\",\n      \"transport_protocol3\": \"UDP\",\n      \"user_email\": \"jchill@example.com\",\n      \"user_name\": \"Jill Chill\",\n      \"voice_mail\": \"4000\"\n    }\n  ],\n  \"total_records\": 20\n}"
						},
						{
							"name": "**HTTP Status Code:** `400`<br> Bad Request\n\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sip_phones?page_number=1&search_key=jchill@example.com&page_size=30&next_page_token=Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones"
									],
									"query": [
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "search_key",
											"value": "jchill@example.com"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Enable SIP phone",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"domain\": \"example.com\",\n  \"register_server\": \"192.0.2.1\",\n  \"proxy_server\": \"192.0.2.2\",\n  \"user_name\": \"Jill Chill\",\n  \"password\": \"123456\",\n  \"authorization_name\": \"testname\",\n  \"user_email\": \"jchill@example.com\",\n  \"voice_mail\": \"4000\",\n  \"proxy_server2\": \"192.0.2.4\",\n  \"proxy_server3\": \"192.0.2.6\",\n  \"register_server2\": \"192.0.2.3\",\n  \"register_server3\": \"192.0.2.5\",\n  \"registration_expire_time\": 60,\n  \"transport_protocol\": \"UDP\",\n  \"transport_protocol2\": \"UDP\",\n  \"transport_protocol3\": \"UDP\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/sip_phones",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sip_phones"
							]
						},
						"description": "Zoom's Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to enable a user to use SIP phone.<br><br>\n**Prerequisites**:\n* Currently only supported on Cisco and Avaya PBX systems. \n* The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:write:admin`\n<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `201`<br>\nSIP Phone Created.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"domain\": \"example.com\",\n  \"register_server\": \"192.0.2.1\",\n  \"proxy_server\": \"192.0.2.2\",\n  \"user_name\": \"Jill Chill\",\n  \"password\": \"123456\",\n  \"authorization_name\": \"testname\",\n  \"user_email\": \"jchill@example.com\",\n  \"voice_mail\": \"4000\",\n  \"proxy_server2\": \"192.0.2.4\",\n  \"proxy_server3\": \"192.0.2.6\",\n  \"register_server2\": \"192.0.2.3\",\n  \"register_server3\": \"192.0.2.5\",\n  \"registration_expire_time\": 60,\n  \"transport_protocol\": \"UDP\",\n  \"transport_protocol2\": \"UDP\",\n  \"transport_protocol3\": \"UDP\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sip_phones",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n**Error Code:** `200`<br> Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.<br>\n**Error Code:** `300`<br>SIP Phone with the same email already exists.\n\n\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"domain\": \"example.com\",\n  \"register_server\": \"192.0.2.1\",\n  \"proxy_server\": \"192.0.2.2\",\n  \"user_name\": \"Jill Chill\",\n  \"password\": \"123456\",\n  \"authorization_name\": \"testname\",\n  \"user_email\": \"jchill@example.com\",\n  \"voice_mail\": \"4000\",\n  \"proxy_server2\": \"192.0.2.4\",\n  \"proxy_server3\": \"192.0.2.6\",\n  \"register_server2\": \"192.0.2.3\",\n  \"register_server3\": \"192.0.2.5\",\n  \"registration_expire_time\": 60,\n  \"transport_protocol\": \"UDP\",\n  \"transport_protocol2\": \"UDP\",\n  \"transport_protocol3\": \"UDP\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sip_phones",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `1001`<br> User {userId} not exist or not belong to this account.\n\n\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"domain\": \"example.com\",\n  \"register_server\": \"192.0.2.1\",\n  \"proxy_server\": \"192.0.2.2\",\n  \"user_name\": \"Jill Chill\",\n  \"password\": \"123456\",\n  \"authorization_name\": \"testname\",\n  \"user_email\": \"jchill@example.com\",\n  \"voice_mail\": \"4000\",\n  \"proxy_server2\": \"192.0.2.4\",\n  \"proxy_server3\": \"192.0.2.6\",\n  \"register_server2\": \"192.0.2.3\",\n  \"register_server3\": \"192.0.2.5\",\n  \"registration_expire_time\": 60,\n  \"transport_protocol\": \"UDP\",\n  \"transport_protocol2\": \"UDP\",\n  \"transport_protocol3\": \"UDP\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sip_phones",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "tracking fields",
			"item": [
				{
					"name": "{field Id}",
					"item": [
						{
							"name": "Delete a tracking field",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tracking_fields/:fieldId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracking_fields",
										":fieldId"
									],
									"variable": [
										{
											"key": "fieldId",
											"value": "a32CJji-weJ92",
											"description": "(Required) The Tracking Field ID"
										}
									]
								},
								"description": "Use this API to delete a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). \n\n**Scope:** `tracking_fields:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* A Business, Education, API or higher plan."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nTracking Field deleted",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/tracking_fields/:fieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tracking_fields",
												":fieldId"
											],
											"variable": [
												{
													"key": "fieldId",
													"value": "a32CJji-weJ92",
													"description": "(Required) The Tracking Field ID"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nTracking Field not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/tracking_fields/:fieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tracking_fields",
												":fieldId"
											],
											"variable": [
												{
													"key": "fieldId",
													"value": "a32CJji-weJ92",
													"description": "(Required) The Tracking Field ID"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a tracking field",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracking_fields/:fieldId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracking_fields",
										":fieldId"
									],
									"variable": [
										{
											"key": "fieldId",
											"value": "a32CJji-weJ92",
											"description": "(Required) The Tracking Field ID"
										}
									]
								},
								"description": "Use this API to return information about a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). \n\n**Scopes:** `tracking_fields:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* A Business, Education, API or higher plan."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nTracking Field object returned",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/tracking_fields/:fieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tracking_fields",
												":fieldId"
											],
											"variable": [
												{
													"key": "fieldId",
													"value": "a32CJji-weJ92",
													"description": "(Required) The Tracking Field ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"a32CJji-weJ92\",\n  \"field\": \"field1\",\n  \"recommended_values\": [\n    \"value1\",\n    \"value1\"\n  ],\n  \"required\": false,\n  \"visible\": true\n}"
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nTracking Field not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/tracking_fields/:fieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tracking_fields",
												":fieldId"
											],
											"variable": [
												{
													"key": "fieldId",
													"value": "a32CJji-weJ92",
													"description": "(Required) The Tracking Field ID"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a tracking field",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"field\": \"field1\",\n  \"recommended_values\": [\n    \"value1\",\n    \"value1\"\n  ],\n  \"required\": false,\n  \"visible\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracking_fields/:fieldId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracking_fields",
										":fieldId"
									],
									"variable": [
										{
											"key": "fieldId",
											"value": "a32CJji-weJ92",
											"description": "(Required) The Tracking Field ID"
										}
									]
								},
								"description": "Use this API to update a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). \n\n**Scope:** `tracking_fields:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* A Business, Education, API or higher plan."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nTracking Field updated",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"field\": \"field1\",\n  \"recommended_values\": [\n    \"value1\",\n    \"value1\"\n  ],\n  \"required\": false,\n  \"visible\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/tracking_fields/:fieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tracking_fields",
												":fieldId"
											],
											"variable": [
												{
													"key": "fieldId",
													"value": "a32CJji-weJ92",
													"description": "(Required) The Tracking Field ID"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nTracking Field not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"field\": \"field1\",\n  \"recommended_values\": [\n    \"value1\",\n    \"value1\"\n  ],\n  \"required\": false,\n  \"visible\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/tracking_fields/:fieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tracking_fields",
												":fieldId"
											],
											"variable": [
												{
													"key": "fieldId",
													"value": "a32CJji-weJ92",
													"description": "(Required) The Tracking Field ID"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List tracking fields",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tracking_fields",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracking_fields"
							]
						},
						"description": "Use this API to list all the [tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) on your Zoom account. Tracking fields let you analyze usage by various fields within an organization. \n\n**Scopes:** `tracking_fields:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n**Prerequisites:** \n* A Business, Education, API or higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nList of Tracking Fields returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracking_fields",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracking_fields"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"total_records\": 1,\n  \"tracking_fields\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Create a tracking field",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"field\": \"field1\",\n  \"recommended_values\": [\n    \"value1\",\n    \"value1\"\n  ],\n  \"required\": false,\n  \"visible\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tracking_fields",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracking_fields"
							]
						},
						"description": "Use this API to create a new [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). Tracking fields let you analyze usage by various fields within an organization. When scheduling a meeting, tracking fields will be included in the meeting options. \n\n**Scope:** `tracking_fields:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* A Business, Education, API or higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `201`<br>\nTracking Field created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"field\": \"field1\",\n  \"recommended_values\": [\n    \"value1\",\n    \"value1\"\n  ],\n  \"required\": false,\n  \"visible\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracking_fields",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracking_fields"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"a32CJji-weJ92\",\n  \"field\": \"field1\",\n  \"recommended_values\": [\n    \"value1\",\n    \"value1\"\n  ],\n  \"required\": false,\n  \"visible\": true\n}"
						}
					]
				}
			]
		},
		{
			"name": "tsp",
			"item": [
				{
					"name": "Get account's TSP information",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tsp",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tsp"
							]
						},
						"description": "Get information on Telephony Service Provider on an account level.<br><br>\n**Scopes:** `tsp:read:admin` <br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:**<br>\n* A Pro or a higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nTSP account detail returned successfully.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tsp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tsp"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"dial_in_number_unrestricted\": false,\n  \"dial_in_numbers\": [\n    {\n      \"code\": \"1\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    },\n    {\n      \"code\": \"1\",\n      \"number\": \"+1 1000200200\",\n      \"type\": \"toll\"\n    }\n  ],\n  \"enable\": true,\n  \"master_account_setting_extended\": true,\n  \"modify_credential_forbidden\": true,\n  \"tsp_bridge\": \"US_TSP_TB\",\n  \"tsp_enabled\": true,\n  \"tsp_provider\": \"someprovidername\"\n}"
						}
					]
				},
				{
					"name": "Update account's TSP information",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dial_in_number_unrestricted\": true,\n  \"enable\": true,\n  \"master_account_setting_extended\": true,\n  \"modify_credential_forbidden\": true,\n  \"tsp_bridge\": \"US_TSP_TB\",\n  \"tsp_enabled\": true,\n  \"tsp_provider\": \"someprovidername\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tsp",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tsp"
							]
						},
						"description": "Update information of the Telephony Service Provider set up on an account.<br>\n**Prerequisites**:<br>\nTSP account option should be enabled.<br>\n**Scopes:** `tsp:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `204` **No Content**<br>\nTSP Account updated.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dial_in_number_unrestricted\": true,\n  \"enable\": true,\n  \"master_account_setting_extended\": true,\n  \"modify_credential_forbidden\": true,\n  \"tsp_bridge\": \"US_TSP_TB\",\n  \"tsp_enabled\": true,\n  \"tsp_provider\": \"someprovidername\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tsp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tsp"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n\n**Error Code:** `300`<br>\nInvalid parameter: tsp_bridge.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dial_in_number_unrestricted\": true,\n  \"enable\": true,\n  \"master_account_setting_extended\": true,\n  \"modify_credential_forbidden\": true,\n  \"tsp_bridge\": \"US_TSP_TB\",\n  \"tsp_enabled\": true,\n  \"tsp_provider\": \"someprovidername\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tsp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tsp"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "webinars/{webinar Id}",
			"item": [
				{
					"name": "livestream",
					"item": [
						{
							"name": "Get live stream details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/livestream",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"livestream"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "95204914252",
											"description": "(Required) The webinar's unique ID."
										}
									]
								},
								"description": "Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to get a webinar's live stream configuration details such as Stream URL, Stream Key and Page URL.<br><br>\n**Prerequisites:**<br>\n* Pro or higher plan with a Webinar Add-on.<br>\n* Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nLive Stream details returned.\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"livestream"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "95204914252",
													"description": "(Required) The webinar's unique ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"page_url\": \"https://example.com/livestream/123\",\n  \"stream_key\": \"contact-it@example.com\",\n  \"stream_url\": \"https://example.com/livestream\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300` <br>\n* Webinar Id does not exist.<br>\n* Invalid Webinar Id.<br>\n**Error Code:** `3001` Webinar does not exist: {webinarId}.<br>\n**Error Code:** `1001` User does not exist: {userId}.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"livestream"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "95204914252",
													"description": "(Required) The webinar's unique ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a live stream",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"stream_url\": \"https://example.com/livestream\",\n  \"stream_key\": \"contact-it@example.com\",\n  \"page_url\": \"https://example.com/livestream/123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/livestream",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"livestream"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update a webinar's live stream information.<br><br>\n**Prerequisites:**<br>\n* Pro or higher plan with a Webinar Add-on.<br>\n* Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nMeeting live stream updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"stream_url\": \"https://example.com/livestream\",\n  \"stream_key\": \"contact-it@example.com\",\n  \"page_url\": \"https://example.com/livestream/123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"livestream"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300` <br>\n* Webinar Id does not exist.<br>\n* Invalid Webinar Id.<br>\n**Error Code:** `3001` Webinar does not exist: {webinarId}.<br>\n**Error Code:** `1001` User does not exist: {userId}.<br>",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"stream_url\": \"https://example.com/livestream\",\n  \"stream_key\": \"contact-it@example.com\",\n  \"page_url\": \"https://example.com/livestream/123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"livestream"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update Live Stream Status",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"start\",\n  \"settings\": {\n    \"active_speaker_name\": true,\n    \"display_name\": \"Jill Chill\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/livestream/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"livestream",
										"status"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update the status of a webinar's live stream.<br><br>\n**Prerequisites:**<br>\n* Pro or higher plan with a Webinar Add-on.<br>\n* Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` <br>\nMeeting live stream updated.\n\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"start\",\n  \"settings\": {\n    \"active_speaker_name\": true,\n    \"display_name\": \"Jill Chill\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/livestream/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"livestream",
												"status"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300` <br>\n* Webinar Id does not exist.<br>\n* Invalid Webinar Id.<br>\n**Error Code:** `3001` Webinar does not exist: {webinarId}.<br>\n**Error Code:** `1001` User does not exist: {userId}.<br>",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"start\",\n  \"settings\": {\n    \"active_speaker_name\": true,\n    \"display_name\": \"Jill Chill\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/livestream/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"livestream",
												"status"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "panelists",
					"item": [
						{
							"name": "Remove panelists",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"panelists"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "Remove all the panelists from a Webinar.<br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites:**<br>\n* Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br> "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nPanelists removed.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List panelists",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"panelists"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a Webinar. \n\nUse this API to list all the panelists of a Webinar.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n**Prerequisites:**<br>\n* Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br> "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar plan subscription missing. Enable webinar for this user once the subscription is added.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"panelists\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"total_records\": 1\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add panelists",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"panelists\": [\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"panelists"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a webinar.<br>Use this API to [add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n\n\n**Prerequisites:**\n* Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br> "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar plan subscription missing. Enable webinar for this user once the subscription is added.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"panelists\": [\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `201`<br>\nPanelist created.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"panelists\": [\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"95204914252\",\n  \"updated_at\": \"2022-03-26T07:30:16Z\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n**Error Code:** `3000`<br>\nYou have reached the limit for the number of panelists you can add. Contact Zoom Support for more i",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"panelists\": [\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"panelists\": [\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `429` <br> You have exceeded the daily rate limit of \"{0}\" for webinar **Add panelists** API requests for the panelist \"{1}\". You can resume these API requests at GMT 00:00:00.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"panelists\": [\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"email\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Remove a panelist",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/panelists/:panelistId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"panelists",
										":panelistId"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										},
										{
											"key": "panelistId",
											"value": "Tg2b6GhcQKKbV7nSCbDKug",
											"description": "(Required) The panelist ID or panelist email."
										}
									]
								},
								"description": "[Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.<br> You can retrieve the `panelistId` by calling **List Panelists API**.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n\n**Prerequisites:**<br>\n* Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br> "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists/:panelistId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists",
												":panelistId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												},
												{
													"key": "panelistId",
													"value": "Tg2b6GhcQKKbV7nSCbDKug",
													"description": "(Required) The panelist ID or panelist email."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204`<br>\nPanelists removed.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists/:panelistId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists",
												":panelistId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												},
												{
													"key": "panelistId",
													"value": "Tg2b6GhcQKKbV7nSCbDKug",
													"description": "(Required) The panelist ID or panelist email."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists/:panelistId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists",
												":panelistId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												},
												{
													"key": "panelistId",
													"value": "Tg2b6GhcQKKbV7nSCbDKug",
													"description": "(Required) The panelist ID or panelist email."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {email} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists/:panelistId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists",
												":panelistId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												},
												{
													"key": "panelistId",
													"value": "Tg2b6GhcQKKbV7nSCbDKug",
													"description": "(Required) The panelist ID or panelist email."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "polls",
					"item": [
						{
							"name": "{poll Id}",
							"item": [
								{
									"name": "Delete a webinar poll",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls",
												":pollId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												},
												{
													"key": "pollId",
													"value": "QalIoKWLTJehBJ8e1xRrbQ",
													"description": "(Required) The poll ID"
												}
											]
										},
										"description": "Delete a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nWebinar Poll deleted",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														},
														{
															"key": "pollId",
															"value": "QalIoKWLTJehBJ8e1xRrbQ",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br> Webinar polls disabled. To enable this feature, enable the \"Webinar Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														},
														{
															"key": "pollId",
															"value": "QalIoKWLTJehBJ8e1xRrbQ",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nWebinar poll not found.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														},
														{
															"key": "pollId",
															"value": "QalIoKWLTJehBJ8e1xRrbQ",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a webinar poll",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls",
												":pollId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												},
												{
													"key": "pollId",
													"value": "QalIoKWLTJehBJ8e1xRrbQ",
													"description": "(Required) The poll ID"
												}
											]
										},
										"description": "Get a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nWebinar Poll object returned",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														},
														{
															"key": "pollId",
															"value": "QalIoKWLTJehBJ8e1xRrbQ",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n  \"status\": \"notstart\",\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br> Webinar polls disabled. To enable this feature, enable the \"Webinar Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														},
														{
															"key": "pollId",
															"value": "QalIoKWLTJehBJ8e1xRrbQ",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														},
														{
															"key": "pollId",
															"value": "QalIoKWLTJehBJ8e1xRrbQ",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a webinar poll",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls",
												":pollId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												},
												{
													"key": "pollId",
													"value": "QalIoKWLTJehBJ8e1xRrbQ",
													"description": "(Required) The poll ID"
												}
											]
										},
										"description": "Update a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nWebinar Poll Updated",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														},
														{
															"key": "pollId",
															"value": "QalIoKWLTJehBJ8e1xRrbQ",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br>\n* Webinar polls disabled. To enable this feature, enable the \"Webinar Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface. \n* Advanced webinar polls disabled. T",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														},
														{
															"key": "pollId",
															"value": "QalIoKWLTJehBJ8e1xRrbQ",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nWebinar poll not found.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														},
														{
															"key": "pollId",
															"value": "QalIoKWLTJehBJ8e1xRrbQ",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List a webinar's polls ",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/polls?anonymous=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"polls"
									],
									"query": [
										{
											"key": "anonymous",
											"value": "true",
											"description": "Whether to query for polls with the **Anonymous** option enabled: \n* `true` — Query for polls with the **Anonymous** option enabled. \n* `false` — Do not query for polls with the **Anonymous** option enabled."
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nList polls of a Webinar  returned",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls?anonymous=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"query": [
												{
													"key": "anonymous",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"polls\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"status\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"status\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"total_records\": 1\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br> Webinar polls disabled. To enable this feature, enable the \"Webinar Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls?anonymous=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"query": [
												{
													"key": "anonymous",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls?anonymous=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"query": [
												{
													"key": "anonymous",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create a webinar's poll",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"polls"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `201`<br>\nWebinar Poll Created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"QalIoKWLTJehBJ8e1xRrbQ\",\n  \"status\": \"notstart\",\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>Invalid webinarId.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br>\n* Webinar polls disabled. To enable this feature, enable the \"Webinar Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface. \n* Advanced webinar polls disabled. T",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"anonymous\": true,\n  \"poll_type\": 2,\n  \"questions\": [\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    },\n    {\n      \"answer_max_character\": 200,\n      \"answer_min_character\": 1,\n      \"answer_required\": false,\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"case_sensitive\": false,\n      \"name\": \"How useful was this meeting?\",\n      \"prompts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"rating_max_label\": \"Extremely Likely\",\n      \"rating_max_value\": 4,\n      \"rating_min_label\": \"Not likely\",\n      \"rating_min_value\": 0,\n      \"right_answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"show_as_dropdown\": false,\n      \"type\": \"single\"\n    }\n  ],\n  \"title\": \"Learn something new\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "registrants",
					"item": [
						{
							"name": "questions",
							"item": [
								{
									"name": "List registration questions",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/questions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"questions"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										},
										"description": "Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.<br>Use this API to list registration questions and fields that are to be answered by users while registering for a Webinar.<br>\n**Prerequisites:**<br>  \n* Pro or higher plan with a Webinar Add-on.\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nWebinar Registrant Question object returned",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"custom_questions\": [\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    },\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    }\n  ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>Webinar not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update registration questions",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"custom_questions\": [\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    },\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/questions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"questions"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										},
										"description": "Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.<br>Use this API to update registration questions and fields of a scheduled Webinar that are to be answered by users while registering for a Webinar.<br><br>\n**Prerequisites:**<br>  \n* Pro or higher plan with a Webinar Add-on.\n* Registration option for Webinar should be set as required to use this API. \n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>Webinar Registrant Questions Updated",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"custom_questions\": [\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    },\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>Webinar not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"custom_questions\": [\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    },\n    {\n      \"answers\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"required\": true,\n      \"title\": \"How are you?\",\n      \"type\": \"short\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"last_name\",\n      \"required\": true\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "{registrant Id}",
							"item": [
								{
									"name": "Delete a webinar registrant",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=1648538280000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												":registrantId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648538280000",
													"description": "The webinar occurrence ID."
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "95204914252",
													"description": "(Required) The webinar ID."
												},
												{
													"key": "registrantId",
													"value": "9tboDiHUQAeOnbmudzWa5g",
													"description": "(Required) The registrant ID."
												}
											]
										},
										"description": "Delete a webinar registrant.<br><br>\n**Scopes**: `webinar:write:admin` `webinar:write`<br>\n <br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**HTTP status code:** `204` <br>\nOK",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=1648538280000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648538280000"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "95204914252",
															"description": "(Required) The webinar ID."
														},
														{
															"key": "registrantId",
															"value": "9tboDiHUQAeOnbmudzWa5g",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP status code:** `400` <br>\nBad Request<br>\n\n**Error code:** `200`<br>\nWebinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {0}.<br>\n\n**Error code:** `300`<br>\nThe value th",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=1648538280000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648538280000"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "95204914252",
															"description": "(Required) The webinar ID."
														},
														{
															"key": "registrantId",
															"value": "9tboDiHUQAeOnbmudzWa5g",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a webinar registrant",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=1648194360000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												":registrantId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000",
													"description": "The meeting or webinar occurrence ID."
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												},
												{
													"key": "registrantId",
													"value": "9tboDiHUQAeOnbmudzWa5g",
													"description": "(Required) The registrant ID."
												}
											]
										},
										"description": "Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br>Use this API to get details on a specific user who has registered for the Webinar.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites:**<br>\n* The account must have a Webinar plan."
									},
									"response": [
										{
											"name": "Success.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=1648194360000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648194360000"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														},
														{
															"key": "registrantId",
															"value": "9tboDiHUQAeOnbmudzWa5g",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"id\": \"95204914252\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"country\": \"US\",\n  \"custom_questions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"last_name\": \"Chill\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"phone\": \"5550100\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"state\": \"CA\",\n  \"status\": \"approved\",\n  \"zip\": \"94045\",\n  \"language\": \"en-US\",\n  \"create_time\": \"2022-03-26T06:44:14Z\",\n  \"join_url\": \"https://example.com/j/11111\"\n}"
										},
										{
											"name": "Invalid webinar ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=1648194360000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648194360000"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														},
														{
															"key": "registrantId",
															"value": "9tboDiHUQAeOnbmudzWa5g",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=1648194360000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648194360000"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														},
														{
															"key": "registrantId",
															"value": "9tboDiHUQAeOnbmudzWa5g",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=1648194360000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "1648194360000"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														},
														{
															"key": "registrantId",
															"value": "9tboDiHUQAeOnbmudzWa5g",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List webinar registrants",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_id=1648194360000&status=pending&tracking_source_id=5516482804110&page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"registrants"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000",
											"description": "The meeting or webinar occurrence ID."
										},
										{
											"key": "status",
											"value": "pending",
											"description": "Query by the registrant's status: \n* `pending` — The registration is pending. \n* `approved` — The registrant is approved. \n* `denied` — The registration is denied."
										},
										{
											"key": "tracking_source_id",
											"value": "5516482804110",
											"description": "The tracking source ID for the registrants. Useful if you share the webinar registration page in multiple locations. See [Creating source tracking links for webinar registration](https://support.zoom.us/hc/en-us/articles/360000315683-Creating-source-tracking-links-for-webinar-registration) for details."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "page_number",
											"value": "1",
											"description": "**Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination."
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br>\nUse this API to list all the users that have registered for a webinar.<br><br>\n**Prerequisites:**\n* Pro or higher plan with a Webinar Add-on.<br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_id=1648194360000&status=pending&tracking_source_id=5516482804110&page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												},
												{
													"key": "status",
													"value": "pending"
												},
												{
													"key": "tracking_source_id",
													"value": "5516482804110"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"next_page_token\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"page_count\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"page_number\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"page_size\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"total_records\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"registrants\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>Invalid webinar ID.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_id=1648194360000&status=pending&tracking_source_id=5516482804110&page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												},
												{
													"key": "status",
													"value": "pending"
												},
												{
													"key": "tracking_source_id",
													"value": "5516482804110"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_id=1648194360000&status=pending&tracking_source_id=5516482804110&page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												},
												{
													"key": "status",
													"value": "pending"
												},
												{
													"key": "tracking_source_id",
													"value": "5516482804110"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_id=1648194360000&status=pending&tracking_source_id=5516482804110&page_size=30&page_number=1&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												},
												{
													"key": "status",
													"value": "pending"
												},
												{
													"key": "tracking_source_id",
													"value": "5516482804110"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a webinar registrant",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"last_name\": \"Chill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"state\": \"CA\",\n  \"zip\": \"94045\",\n  \"country\": \"US\",\n  \"phone\": \"5550100\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"custom_questions\": [\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"language\": \"en-US\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_ids=1648538280000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"registrants"
									],
									"query": [
										{
											"key": "occurrence_ids",
											"value": "1648538280000",
											"description": "A comma-separated list of webinar occurrence IDs. You can get this value with the [Get a webinar](/api-reference/zoom-api/methods/#operation/webinarUpdate) API."
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "Use this API to create and submit a user's registration for a webinar. Zoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow hosts to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar. \n\n**Scopes:** `webinar:write:admin`, `webinar:write` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* A Pro or higher plan with the Webinar add-on."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `201` <br>\nWebinar registration created.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"last_name\": \"Chill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"state\": \"CA\",\n  \"zip\": \"94045\",\n  \"country\": \"US\",\n  \"phone\": \"5550100\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"custom_questions\": [\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"language\": \"en-US\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_ids=1648538280000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "1648538280000"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"iFxeBPYun6SAiWUzBcEkX\",\n  \"join_url\": \"https://example.com/j/22222\",\n  \"registrant_id\": \"fdgsfh2ey82fuh\",\n  \"start_time\": \"2021-07-13T21:44:51Z\",\n  \"topic\": \"My Webinar\",\n  \"occurrences\": [\n    {\n      \"duration\": 60,\n      \"occurrence_id\": \"1648194360000\",\n      \"start_time\": \"2022-03-25T07:46:00Z\",\n      \"status\": \"available\"\n    },\n    {\n      \"duration\": 60,\n      \"occurrence_id\": \"1648194360000\",\n      \"start_time\": \"2022-03-25T07:46:00Z\",\n      \"status\": \"available\"\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300` \n* Invalid webinar ID. \n* Invalid parameter: occurrence_ids \n* Invalid username.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"last_name\": \"Chill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"state\": \"CA\",\n  \"zip\": \"94045\",\n  \"country\": \"US\",\n  \"phone\": \"5550100\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"custom_questions\": [\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"language\": \"en-US\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_ids=1648538280000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "1648538280000"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `1010` <br>\nUser does not belong to this account: {accountId} \n\n**Error Code:** `3000` <br>\nThis webinar does not have registration as required: {webinarId}. \n\n**Error Code:** `3027` <br>\nHost",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"last_name\": \"Chill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"state\": \"CA\",\n  \"zip\": \"94045\",\n  \"country\": \"US\",\n  \"phone\": \"5550100\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"custom_questions\": [\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"language\": \"en-US\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_ids=1648538280000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "1648538280000"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nWebinar not found. \n\n**Error Code:** `1001` <br>\nUser \"{userId}\" does not exist or does not belong to this account. \n\n**Error Code:** `3001` <br>\nWebinar \"{webinarId}\" not found or has expired.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"last_name\": \"Chill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"state\": \"CA\",\n  \"zip\": \"94045\",\n  \"country\": \"US\",\n  \"phone\": \"5550100\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"custom_questions\": [\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"language\": \"en-US\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_ids=1648538280000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "1648538280000"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `429` <br>\nYou have exceeded the daily rate limit of \"{0}\" for **Add a webinar registrant** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"jchill@example.com\",\n  \"first_name\": \"Jill\",\n  \"last_name\": \"Chill\",\n  \"address\": \"1800 Amphibious Blvd.\",\n  \"city\": \"Mountain View\",\n  \"state\": \"CA\",\n  \"zip\": \"94045\",\n  \"country\": \"US\",\n  \"phone\": \"5550100\",\n  \"comments\": \"Looking forward to the discussion.\",\n  \"custom_questions\": [\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"title\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"industry\": \"Food\",\n  \"job_title\": \"Chef\",\n  \"no_of_employees\": \"1-20\",\n  \"org\": \"Cooking Org\",\n  \"purchasing_time_frame\": \"1-3 months\",\n  \"role_in_purchase_process\": \"Influencer\",\n  \"language\": \"en-US\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_ids=1648538280000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "1648538280000"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update registrant's status",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/registrants/status?occurrence_id=1648194360000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"registrants",
										"status"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000",
											"description": "The meeting or webinar occurrence ID."
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "Use this API to update webinar registrants' registration status. You can approve or deny a registrant, or revoke a registrant's approval. \n\n**Scopes:** `webinar:write:admin`, `webinar:write` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\n The webinar plan subscription is missing. Enable webinar for this user once the subscription is added: {userId}",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/status?occurrence_id=1648194360000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204` <br>\n Registrant status updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/status?occurrence_id=1648194360000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `300` <br> Invalid webinar ID.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/status?occurrence_id=1648194360000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\n Bad request \n\n **Error Code:** `1010` <br>\n User does not belong to this account: {accountId}. \n\n **Error Code:** `3035` <br>\n Webinar has reached maximum attendee capacity.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/status?occurrence_id=1648194360000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\n Webinar not found. \n\n **Error Code:** `1001` <br>\n User {userId} does not exist or does not belong to this account. \n\n **Error Code:** `3001` <br>\n Webinar {webinarId} not found or has expired.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/status?occurrence_id=1648194360000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `429` <br>\n You have exceeded the daily rate limit of \"{0}\" for webinar **Update registrant's status** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"approve\",\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"id\": \"9tboDiHUQAeOnbmudzWa5g\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/status?occurrence_id=1648194360000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "1648194360000"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "survey",
					"item": [
						{
							"name": "Delete a webinar survey",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/survey",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"survey"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "Use this API to delete a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651). \n\n **Scopes:** `webinar:write`, `webinar:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* A Pro or higher plan with the Webinar Add-on. \n* The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host's account."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` <br>\n Webinar survey deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/survey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"survey"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` <br> Bad Request \n\n **Error Code:** `300` <br>\n Invalid webinar ID. \n\n **Error Code:** `3000` <br>\n Webinar survey disabled. To enable this feature, enable the \"Webinar Survey\" setting in the Zoom web portal's \"Settings\" interf",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/survey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"survey"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br> Not Found \n\n **Error Code:** `300` <br>\n Webinar ID does not exist. \n\n **Error Code:** `3001` <br>\n Webinar does not exist: {webinarId}.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/survey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"survey"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a webinar survey",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/survey",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"survey"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "Use this API to return information about a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651). \n\n **Scopes:** `webinar:read`, `webinar:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* A Pro or higher plan with the Webinar add-on. \n* The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host's account."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\n Webinar survey object returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/survey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"survey"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"custom_survey\": {\n    \"anonymous\": false,\n    \"questions\": [\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  },\n  \"show_in_the_browser\": true,\n  \"show_in_the_follow_up_email\": false,\n  \"third_party_survey\": \"https://example.com\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` <br> Bad Request \n\n **Error Code:** `300` <br>\n Invalid webinar ID. \n\n **Error Code:** `3000` <br>\n Webinar survey disabled. To enable this feature, enable the \"Webinar Survey\" setting in the Zoom web portal's \"Settings\" interf",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/survey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"survey"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br> Not Found \n\n **Error Code:** `300` <br>\n Webinar ID does not exist. \n\n **Error Code:** `3001` <br>\n Webinar does not exist: {webinarId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/survey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"survey"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a webinar survey",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"custom_survey\": {\n    \"anonymous\": false,\n    \"questions\": [\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  },\n  \"show_in_the_browser\": true,\n  \"show_in_the_follow_up_email\": false,\n  \"third_party_survey\": \"https://example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/survey",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"survey"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "Use this API to update a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651). \n\n **Scopes:** `webinar:write`, `webinar:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* A Pro or higher plan with the Webinar add-on. \n* The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host's account."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` <br>\n Webinar survey updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"custom_survey\": {\n    \"anonymous\": false,\n    \"questions\": [\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  },\n  \"show_in_the_browser\": true,\n  \"show_in_the_follow_up_email\": false,\n  \"third_party_survey\": \"https://example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/survey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"survey"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` <br> Bad Request \n\n **Error Code:** `300` <br>\n * Invalid webinar ID. <br>\n * Invalid third party survey: {third_party_survey}. \n\n **Error Code:** `3000` <br>\n Webinar survey disabled. To enable this feature, enable the \"Webina",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"custom_survey\": {\n    \"anonymous\": false,\n    \"questions\": [\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  },\n  \"show_in_the_browser\": true,\n  \"show_in_the_follow_up_email\": false,\n  \"third_party_survey\": \"https://example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/survey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"survey"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br> Not Found \n\n **Error Code:** `300` <br>\n Webinar ID does not exist. \n\n **Error Code:** `3001` <br>\n Webinar does not exist: {webinarId}.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"custom_survey\": {\n    \"anonymous\": false,\n    \"questions\": [\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"answer_max_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_min_character\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answer_required\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"answers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_max_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_label\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rating_min_value\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"show_as_dropdown\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  },\n  \"show_in_the_browser\": true,\n  \"show_in_the_follow_up_email\": false,\n  \"third_party_survey\": \"https://example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/survey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"survey"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "branding",
					"item": [
						{
							"name": "virtual backgrounds",
							"item": [
								{
									"name": "Upload a webinar's branding Virtual Background",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "(Required) The Virtual Background's file path, in binary format.",
													"type": "file",
													"src": []
												},
												{
													"key": "default",
													"value": "true",
													"description": "Whether set the file as the default Virtual Background file.",
													"type": "text"
												},
												{
													"key": "set_default_for_all_panelists",
													"value": "true",
													"description": "Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/branding/virtual_backgrounds",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"branding",
												"virtual_backgrounds"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										},
										"description": "Use this API to upload a webinar's session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background). Hosts and panelists can select and use these Virtual Backgrounds during the webinar. Branding Virtual Background files have the following restrictions: \n* A webinar cannot exceed more than 10 Virtual Background files. \n* You can only upload image files that are in JPG/JPEG, GIF or PNG format. \n* The Virtual Background file size cannot exceed 15 megabytes (MB). \n\n **Scopes:** `webinar:write`, `webinar:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n**Prerequisites:** \n*  The **Webinar Session Branding** setting enabled."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201` <br>\nVirtual Background uploaded.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"description": "(Required) The Virtual Background's file path, in binary format.",
															"type": "file",
															"src": []
														},
														{
															"key": "default",
															"value": "true",
															"description": "Whether set the file as the default Virtual Background file.",
															"type": "text"
														},
														{
															"key": "set_default_for_all_panelists",
															"value": "true",
															"description": "Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/virtual_backgrounds",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"virtual_backgrounds"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"J0sFXN2PSOCGrqTqLRwgAQ\",\n  \"name\": \"beach.jpg\",\n  \"is_default\": true,\n  \"size\": 524288,\n  \"type\": \"image\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `3000` <br>\nThis webinar does not have session branding enabled. \n\n**Error Code:** `120` \n* No file uploaded. Verify that a file has been uploaded. \n* File size cannot exceed 15M. \n* A maximum",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"description": "(Required) The Virtual Background's file path, in binary format.",
															"type": "file",
															"src": []
														},
														{
															"key": "default",
															"value": "true",
															"description": "Whether set the file as the default Virtual Background file.",
															"type": "text"
														},
														{
															"key": "set_default_for_all_panelists",
															"value": "true",
															"description": "Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/virtual_backgrounds",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"virtual_backgrounds"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nWebinar not found. \n\n**Error Code:** `1001` <br>\nUser \"{userId}\" does not exist or does not belong to this account. \n\n**Error Code:** `3001` <br>\nWebinar \"{webinarId}\" not found or has expired.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"description": "(Required) The Virtual Background's file path, in binary format.",
															"type": "file",
															"src": []
														},
														{
															"key": "default",
															"value": "true",
															"description": "Whether set the file as the default Virtual Background file.",
															"type": "text"
														},
														{
															"key": "set_default_for_all_panelists",
															"value": "true",
															"description": "Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/virtual_backgrounds",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"virtual_backgrounds"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Set webinar's default branding Virtual Background",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/branding/virtual_backgrounds?id=zazQjwDuQkS3Q2EprNd7jQ&set_default_for_all_panelists=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"branding",
												"virtual_backgrounds"
											],
											"query": [
												{
													"key": "id",
													"value": "zazQjwDuQkS3Q2EprNd7jQ",
													"description": "The Virtual Background file ID to update."
												},
												{
													"key": "set_default_for_all_panelists",
													"value": "true",
													"description": "Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background."
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										},
										"description": "Use this API to set a webinar's default session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background). \n\n **Scopes:** `webinar:write`, `webinar:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* The **Webinar Session Branding** setting enabled."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` <br>\n* No content. \n* Virtual Background updated.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/virtual_backgrounds?id=zazQjwDuQkS3Q2EprNd7jQ&set_default_for_all_panelists=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"virtual_backgrounds"
													],
													"query": [
														{
															"key": "id",
															"value": "zazQjwDuQkS3Q2EprNd7jQ"
														},
														{
															"key": "set_default_for_all_panelists",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `1010` <br>\nUser does not belong to this account: {accountId} \n\n**Error Code:** `300` <br>\nInvalid parameter: {id} \n\n**Error Code:** `3000` <br>\nThis webinar does not have session branding ena",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/virtual_backgrounds?id=zazQjwDuQkS3Q2EprNd7jQ&set_default_for_all_panelists=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"virtual_backgrounds"
													],
													"query": [
														{
															"key": "id",
															"value": "zazQjwDuQkS3Q2EprNd7jQ"
														},
														{
															"key": "set_default_for_all_panelists",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nWebinar not found. \n\n**Error Code:** `1001` <br>\nUser \"{userId}\" does not exist or does not belong to this account. \n\n**Error Code:** `3001` <br>\nWebinar \"{webinarId}\" not found or has expired.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/virtual_backgrounds?id=zazQjwDuQkS3Q2EprNd7jQ&set_default_for_all_panelists=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"virtual_backgrounds"
													],
													"query": [
														{
															"key": "id",
															"value": "zazQjwDuQkS3Q2EprNd7jQ"
														},
														{
															"key": "set_default_for_all_panelists",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a webinar's branding Virtual Backgrounds",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/branding/virtual_backgrounds?ids=zazQjwDuQkS3Q2EprNd7jQ,AsfE0cx2TFSfqqKbE0BUZg",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"branding",
												"virtual_backgrounds"
											],
											"query": [
												{
													"key": "ids",
													"value": "zazQjwDuQkS3Q2EprNd7jQ,AsfE0cx2TFSfqqKbE0BUZg",
													"description": "A comma-separated list of the Virtual Background file IDs to delete."
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										},
										"description": "Use this API to delete a webinar's session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background). \n\n **Scopes:** `webinar:write`, `webinar:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* The **Webinar Session Branding** setting enabled."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` <br>\n* No content. \n* Virtual Background file(s) deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/virtual_backgrounds?ids=zazQjwDuQkS3Q2EprNd7jQ,AsfE0cx2TFSfqqKbE0BUZg",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"virtual_backgrounds"
													],
													"query": [
														{
															"key": "ids",
															"value": "zazQjwDuQkS3Q2EprNd7jQ,AsfE0cx2TFSfqqKbE0BUZg"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `1010` <br>\nUser does not belong to this account: {accountId} \n\n**Error Code:** `300` <br>\nInvalid parameter: ids \n\n**Error Code:** `3000` <br>\nThis webinar does not have session branding enab",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/virtual_backgrounds?ids=zazQjwDuQkS3Q2EprNd7jQ,AsfE0cx2TFSfqqKbE0BUZg",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"virtual_backgrounds"
													],
													"query": [
														{
															"key": "ids",
															"value": "zazQjwDuQkS3Q2EprNd7jQ,AsfE0cx2TFSfqqKbE0BUZg"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nWebinar not found. \n\n**Error Code:** `1001` <br>\nUser \"{userId}\" does not exist or does not belong to this account. \n\n**Error Code:** `3001` <br>\nWebinar \"{webinarId}\" not found or has expired.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/virtual_backgrounds?ids=zazQjwDuQkS3Q2EprNd7jQ,AsfE0cx2TFSfqqKbE0BUZg",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"virtual_backgrounds"
													],
													"query": [
														{
															"key": "ids",
															"value": "zazQjwDuQkS3Q2EprNd7jQ,AsfE0cx2TFSfqqKbE0BUZg"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "wallpaper",
							"item": [
								{
									"name": "Upload a webinar's branding wallpaper",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "(Required) The wallpaper's file path, in binary format.",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/branding/wallpaper",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"branding",
												"wallpaper"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										},
										"description": "Use this API to upload a webinar's session branding wallpaper file. Webinar branding wallpaper files have the following requirements: \n* A webinar can only have one wallpaper file. \n* You can only upload image files that are in JPG/JPEG, GIF, or PNG format. \n* Image files must be 16:9 ratio. The recommended image size is 1920 x 1080 pixels (px). \n* The wallpaper file size cannot exceed 15 megabytes (MB). \n\n **Scopes:** `webinar:write`, `webinar:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n**Prerequisites:** \n*  The **Webinar Session Branding** setting enabled."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201` <br>\nWebinar wallpaper uploaded.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"description": "(Required) The wallpaper's file path, in binary format.",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/wallpaper",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"wallpaper"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"zazQjwDuQkS3Q2EprNd7jQ\",\n  \"name\": \"logo.jpg\",\n  \"size\": 262144,\n  \"type\": \"image\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `3000` <br>\nThis webinar does not have session branding enabled. \n\n**Error Code:** `120` \n* No file uploaded. Verify that a file has been uploaded. \n* File size cannot exceed 15M. \n* A maximum",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"description": "(Required) The wallpaper's file path, in binary format.",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/wallpaper",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"wallpaper"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nWebinar not found. \n\n**Error Code:** `1001` <br>\nUser \"{userId}\" does not exist or does not belong to this account. \n\n**Error Code:** `3001` <br>\nWebinar \"{webinarId}\" not found or has expired.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"description": "(Required) The wallpaper's file path, in binary format.",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/wallpaper",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"wallpaper"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a webinar's branding wallpaper",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/branding/wallpaper",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"branding",
												"wallpaper"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										},
										"description": "Use this API to delete a webinar's session branding wallpaper file. \n\n **Scopes:** `webinar:write`, `webinar:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* The **Webinar Session Branding** setting enabled."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` <br>\n* No content. \n* Webinar wallpaper deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/wallpaper",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"wallpaper"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `1010` <br>\nUser does not belong to this account: {accountId} \n\n**Error Code:** `300` <br>\nInvalid parameter: {id} \n\n**Error Code:** `3000` <br>\nThis webinar does not have session branding ena",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/wallpaper",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"wallpaper"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nWebinar not found. \n\n**Error Code:** `1001` <br>\nUser \"{userId}\" does not exist or does not belong to this account. \n\n**Error Code:** `3001` <br>\nWebinar \"{webinarId}\" not found or has expired.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/branding/wallpaper",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"branding",
														"wallpaper"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "99289110036",
															"description": "(Required) The webinar's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get webinar's session branding",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/branding",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"branding"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								},
								"description": "Use this API to get a webinar's session branding information. Session branding lets hosts visually customize a webinar by setting a webinar wallpaper that displays behind video tiles. Session branding also lets hosts set [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background) and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers. \n\n **Scopes:** `webinar:read`, `webinar:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* A Pro or higher plan with the Webinar add-on. \n* The **Webinar Session Branding** setting enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\nWebinar session branding returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/branding",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"branding"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"wallpaper\": {\n    \"id\": \"zazQjwDuQkS3Q2EprNd7jQ\"\n  },\n  \"virtual_backgrounds\": [\n    {\n      \"id\": \"zazQjwDuQkS3Q2EprNd7jQ\",\n      \"name\": \"beach.jpg\",\n      \"is_default\": true\n    },\n    {\n      \"id\": \"zazQjwDuQkS3Q2EprNd7jQ\",\n      \"name\": \"beach.jpg\",\n      \"is_default\": true\n    }\n  ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300` <br>\nInvalid webinar ID.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/branding",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"branding"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `1010` <br>\nUser does not belong to this account: {accountId} \n\n**Error Code:** `3000` <br>\nYou cannot enable session branding for this webinar.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/branding",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"branding"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nWebinar not found. \n\n**Error Code:** `1001` <br>\nUser \"{userId}\" does not exist or does not belong to this account. \n\n**Error Code:** `3001` <br>\nWebinar \"{webinarId}\" not found or has expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/branding",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"branding"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "99289110036",
													"description": "(Required) The webinar's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Delete a webinar",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648194360000&cancel_webinar_reminder=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId"
							],
							"query": [
								{
									"key": "occurrence_id",
									"value": "1648194360000",
									"description": "The meeting or webinar occurrence ID."
								},
								{
									"key": "cancel_webinar_reminder",
									"value": "true",
									"description": "`true`: Notify panelists and registrants about the webinar cancellation via email. \n\n`false`: Do not send any email notification to webinar registrants and panelists. \n\nThe default value of this field is `false`."
								}
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "99289110036",
									"description": "(Required) The webinar's ID."
								}
							]
						},
						"description": "Delete a Webinar.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites:**<br>\n* Pro or higher plan with a Webinar Add-on."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSuccess",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648194360000&cancel_webinar_reminder=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000"
										},
										{
											"key": "cancel_webinar_reminder",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `204`<br>\nWebinar deleted.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648194360000&cancel_webinar_reminder=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000"
										},
										{
											"key": "cancel_webinar_reminder",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `300`<br>Invalid webinar ID.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648194360000&cancel_webinar_reminder=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000"
										},
										{
											"key": "cancel_webinar_reminder",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n**Error Code:** `3002`<br>\nSorry, you cannot delete this webinar since it is in progress.<br>\n**Error Code:** `3003`<br>\nYou a",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648194360000&cancel_webinar_reminder=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000"
										},
										{
											"key": "cancel_webinar_reminder",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648194360000&cancel_webinar_reminder=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648194360000"
										},
										{
											"key": "cancel_webinar_reminder",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get a webinar",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648538280000&show_previous_occurrences=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId"
							],
							"query": [
								{
									"key": "occurrence_id",
									"value": "1648538280000",
									"description": "Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [**Create a webinar**](/api-reference/zoom-api/methods#operation/webinarCreate) API, you can retrieve the Occurrence ID from the response of the API call."
								},
								{
									"key": "show_previous_occurrences",
									"value": "true",
									"description": "Set the value of this field to `true` if you would like to view Webinar details of all previous occurrences of a recurring Webinar."
								}
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "95204914252",
									"description": "(Required) The webinar's ID or universally unique ID (UUID)."
								}
							]
						},
						"description": "Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br>Use this API to get details of a scheduled webinar.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>**Prerequisites:**\n* Pro or higher plan with a Webinar Add-on."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648538280000&show_previous_occurrences=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648538280000"
										},
										{
											"key": "show_previous_occurrences",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "95204914252",
											"description": "(Required) The webinar's ID or universally unique ID (UUID)."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"host_email\": \"jchill@example.com\",\n  \"host_id\": \"30R7kT7bTIKSNUFEuH_Qlg\",\n  \"id\": 97871060099,\n  \"uuid\": \"m3WqMkvuRXyYqH+eKWhk9w==\",\n  \"agenda\": \"My Webinar\",\n  \"created_at\": \"2022-03-26T07:18:32Z\",\n  \"duration\": 60,\n  \"join_url\": \"https://example.com/j/11111\",\n  \"occurrences\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"type\": 1,\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"settings\": {\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts\": \"jchill@example.com\",\n    \"alternative_host_update_polls\": true,\n    \"approval_type\": 0,\n    \"attendees_and_panelists_reminder_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_name\": \"Sign in to Zoom\",\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"close_registration\": true,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"email_language\": \"en-US\",\n    \"enforce_login\": true,\n    \"enforce_login_domains\": \"example.com\",\n    \"follow_up_absentees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"follow_up_attendees_email_notification\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"global_dial_in_countries\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"hd_video\": false,\n    \"hd_video_for_attendees\": false,\n    \"host_video\": true,\n    \"language_interpretation\": {\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"interpreters\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"meeting_authentication\": true,\n    \"notify_registrants\": true,\n    \"on_demand\": false,\n    \"panelists_invitation_email_notification\": true,\n    \"panelists_video\": true,\n    \"post_webinar_survey\": true,\n    \"practice_session\": false,\n    \"question_and_answer\": {\n      \"allow_anonymous_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"answer_questions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_comment\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attendees_can_upvote\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"registrants_confirmation_email\": true,\n    \"registrants_email_notification\": true,\n    \"registrants_restrict_number\": 100,\n    \"registration_type\": 1,\n    \"send_1080p_video_to_attendees\": false,\n    \"show_share_button\": true,\n    \"survey_url\": \"https://example.com\",\n    \"enable_session_branding\": true\n  },\n  \"start_time\": \"2022-03-26T07:18:32Z\",\n  \"start_url\": \"https://example.com/s/11111\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Webinar\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    },\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"type\": 5\n}"
						},
						{
							"name": "**HTTP Status Code:** `300`<br>Invalid webinar ID.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648538280000&show_previous_occurrences=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648538280000"
										},
										{
											"key": "show_previous_occurrences",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "95204914252",
											"description": "(Required) The webinar's ID or universally unique ID (UUID)."
										}
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648538280000&show_previous_occurrences=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648538280000"
										},
										{
											"key": "show_previous_occurrences",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "95204914252",
											"description": "(Required) The webinar's ID or universally unique ID (UUID)."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648538280000&show_previous_occurrences=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648538280000"
										},
										{
											"key": "show_previous_occurrences",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "95204914252",
											"description": "(Required) The webinar's ID or universally unique ID (UUID)."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update a webinar",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"agenda\": \"My Webinar\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"type\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"end_date_time\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"end_times\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_day\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_week\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_week_day\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"repeat_interval\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"weekly_days\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"settings\": {\n    \"registrants_confirmation_email\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"start_time\": \"2022-03-26T07:18:32Z\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Webinar\",\n  \"tracking_fields\": [\n    {\n      \"field\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"field\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"type\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648538280000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId"
							],
							"query": [
								{
									"key": "occurrence_id",
									"value": "1648538280000",
									"description": "Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording}"
								}
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "99289110036",
									"description": "(Required) The webinar's ID."
								}
							]
						},
						"description": "Use this API to make updates to a scheduled webinar. \n\n**Scopes:** `webinar:write:admin`, `webinar:write` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n* This API has a daily rate limit of **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request. \n\n**Prerequisites:** \n* A Pro or higher plan with a Webinar add-on."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nWebinar subscription plan is missing. Enable webinar for this user once the subscription is added:{userId}.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"agenda\": \"My Webinar\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"type\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"end_date_time\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"end_times\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_day\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_week\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_week_day\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"repeat_interval\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"weekly_days\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"settings\": {\n    \"registrants_confirmation_email\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"start_time\": \"2022-03-26T07:18:32Z\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Webinar\",\n  \"tracking_fields\": [\n    {\n      \"field\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"field\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"type\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648538280000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648538280000"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `204`<br>\nWebinar updated.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"agenda\": \"My Webinar\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"type\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"end_date_time\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"end_times\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_day\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_week\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_week_day\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"repeat_interval\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"weekly_days\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"settings\": {\n    \"registrants_confirmation_email\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"start_time\": \"2022-03-26T07:18:32Z\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Webinar\",\n  \"tracking_fields\": [\n    {\n      \"field\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"field\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"type\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648538280000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648538280000"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `300`<br>Invalid webinar Id.<br>\nInvalid recurrence settings.<br>\nA maximum of \"{rateLimitNumber}\" webinars can be created and updated for a single user in one day.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"agenda\": \"My Webinar\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"type\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"end_date_time\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"end_times\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_day\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_week\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_week_day\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"repeat_interval\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"weekly_days\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"settings\": {\n    \"registrants_confirmation_email\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"start_time\": \"2022-03-26T07:18:32Z\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Webinar\",\n  \"tracking_fields\": [\n    {\n      \"field\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"field\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"type\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648538280000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648538280000"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n**Error Code:** `3003`<br>\nYou are not the meeting host.<br>\n* Users in '{0}' have been blocked from joining meetings and webi",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"agenda\": \"My Webinar\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"type\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"end_date_time\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"end_times\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_day\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_week\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_week_day\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"repeat_interval\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"weekly_days\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"settings\": {\n    \"registrants_confirmation_email\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"start_time\": \"2022-03-26T07:18:32Z\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Webinar\",\n  \"tracking_fields\": [\n    {\n      \"field\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"field\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"type\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648538280000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648538280000"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"agenda\": \"My Webinar\",\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"type\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"end_date_time\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"end_times\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_day\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_week\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly_week_day\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"repeat_interval\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"weekly_days\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"settings\": {\n    \"registrants_confirmation_email\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"start_time\": \"2022-03-26T07:18:32Z\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Webinar\",\n  \"tracking_fields\": [\n    {\n      \"field\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"field\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"value\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"type\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=1648538280000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "1648538280000"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Perform batch registration",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"auto_approve\": true,\n  \"registrants\": [\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    },\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId/batch_registrants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId",
								"batch_registrants"
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "97871060099",
									"description": "(Required) Unique identifier of the webinar."
								}
							]
						},
						"description": "Use this API to register up to 30 registrants at once for a scheduled webinar that requires [registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-webinar-with-registration). <br>\n\n**Prerequisites:**<br>\n* The webinar host must be a Licensed user.\n* The webinar should be of type `5`, i.e., it should be a scheduled webinar. Other types of webinars are not supported by this API.<br><br>\n**Scope:** `webinar:write`, `webinar:write:admin`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n\n\n\n\n\n\n\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200` **OK** <br>\nRegistrants added.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"auto_approve\": true,\n  \"registrants\": [\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    },\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/batch_registrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"batch_registrants"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "97871060099",
											"description": "(Required) Unique identifier of the webinar."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"registrants\": [\n    {\n      \"email\": \"jchill@example.com\",\n      \"join_url\": \"https://example.com/j/11111\",\n      \"registrant_id\": \"-rOym-zdTHOdbT3A7u7u5g\"\n    },\n    {\n      \"email\": \"jchill@example.com\",\n      \"join_url\": \"https://example.com/j/11111\",\n      \"registrant_id\": \"-rOym-zdTHOdbT3A7u7u5g\"\n    }\n  ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `200` <br>\nWebinar plan is missing. You must subscribe to the Webinar plan and enable webinars for the \"{0}\" user to perform this action. \n\n**Error Code:** `300` <br>\nThis API can only be used",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"auto_approve\": true,\n  \"registrants\": [\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    },\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/batch_registrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"batch_registrants"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "97871060099",
											"description": "(Required) Unique identifier of the webinar."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` **Not Found** <br>\n**Error Code:** `3001`<br>\nWebinar does not exist: {0}.<br><br>\n**Error Code:** `3043`<br>\nWebinar has reached maximum attendee capacity.<br><br>\n**Error Code:** `404`<br>\nRegistration has not been enabled fo",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"auto_approve\": true,\n  \"registrants\": [\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    },\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/batch_registrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"batch_registrants"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "97871060099",
											"description": "(Required) Unique identifier of the webinar."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `429` <br>\nYou have exceeded the daily rate limit of \"{0}\" for webinar **Perform batch registration** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"auto_approve\": true,\n  \"registrants\": [\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    },\n    {\n      \"first_name\": \"Jill\",\n      \"email\": \"jchill@example.com\",\n      \"last_name\": \"Chill\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/batch_registrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"batch_registrants"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "97871060099",
											"description": "(Required) Unique identifier of the webinar."
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create webinar's invite links",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attendees\": [\n    {\n      \"name\": \"Jill Chill\"\n    },\n    {\n      \"name\": \"Jill Chill\"\n    }\n  ],\n  \"ttl\": 1000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId/invite_links",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId",
								"invite_links"
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "99289110036",
									"description": "(Required) The webinar's ID."
								}
							]
						},
						"description": "Use this API to create a batch of invitation links for a webinar.\n\n**Scopes**: `webinar:write:admin`, `webinar:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:**\n\n* Business, Education or API Plan with Webinar add-on."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `201` <br>\nWebinar Invite Links Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attendees\": [\n    {\n      \"name\": \"Jill Chill\"\n    },\n    {\n      \"name\": \"Jill Chill\"\n    }\n  ],\n  \"ttl\": 1000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/invite_links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"invite_links"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"attendees\": [\n    {\n      \"join_url\": \"https://example.com/j/11111\",\n      \"name\": \"Jill Chill\"\n    },\n    {\n      \"join_url\": \"https://example.com/j/11111\",\n      \"name\": \"Jill Chill\"\n    }\n  ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br>\n* Webinar Id does not exist.<br>\n* Invalid Webinar Id.<br>\n**Error Code:** `3001` Webinar does not exist: {webinarId}.<br>\n**Error Code:** `1001` User does not exist: {userId}.<br>\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attendees\": [\n    {\n      \"name\": \"Jill Chill\"\n    },\n    {\n      \"name\": \"Jill Chill\"\n    }\n  ],\n  \"ttl\": 1000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/invite_links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"invite_links"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update webinar status",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"end\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId",
								"status"
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "99289110036",
									"description": "(Required) The webinar's ID."
								}
							]
						},
						"description": "Update a webinar's status. Use this API to end an ongoing webinar.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites:**<br>\n* The account must hold a valid [Webinar plan](https://zoom.us/webinar)."
					},
					"response": [
						{
							"name": "Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"end\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"status"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Webinar's status updated.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"end\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"status"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n**Error Code:** `3003`<br>\nYou are not the meeting host.<br>\n**Error Code:** `3063`<br>\nCan not end on-premise user's meeting:",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"end\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"status"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"end\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"status"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get webinar tracking sources",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId/tracking_sources",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId",
								"tracking_sources"
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "99289110036",
									"description": "(Required) The webinar's ID."
								}
							]
						},
						"description": "[Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.<br> Use this API to list information on all the tracking sources of a Webinar.<br>\n**Scopes:** `webinar:read:admin`, `webinar:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n**Prerequisites**:<br>\n* [Webinar license](https://zoom.us/webinar).\n* Registration must be required for the Webinar.\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/tracking_sources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"tracking_sources"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"total_records\": 1,\n  \"tracking_sources\": [\n    {\n      \"id\": \"5516482804110\",\n      \"registration_count\": 1,\n      \"source_name\": \"https://example.com\",\n      \"tracking_url\": \"https://example.com/webinar/register/5516482804110/WN_juM2BGyLQMyQ_ZrqiGRhLg\",\n      \"visitor_count\": 1\n    },\n    {\n      \"id\": \"5516482804110\",\n      \"registration_count\": 1,\n      \"source_name\": \"https://example.com\",\n      \"tracking_url\": \"https://example.com/webinar/register/5516482804110/WN_juM2BGyLQMyQ_ZrqiGRhLg\",\n      \"visitor_count\": 1\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Get webinar's token",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId/token?type=closed_caption_token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId",
								"token"
							],
							"query": [
								{
									"key": "type",
									"value": "closed_caption_token",
									"description": "The webinar token type: \n* `closed_caption_token` — The third-party closed caption API token. \n\nThis defaults to `closed_caption_token`."
								}
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "99289110036",
									"description": "(Required) The webinar's ID."
								}
							]
						},
						"description": "Use this API to get a webinar's [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom webinar. \n\n**Scopes:** `webinar:read`, `webinar:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* A Pro or higher plan with the Webinar add-on. \n* The **Closed captioning** setting enabled in the Zoom web portal. \n* \n* The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200` <br>\nWebinar token returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/token?type=closed_caption_token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"token"
									],
									"query": [
										{
											"key": "type",
											"value": "closed_caption_token"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"https://example.com/closedcaption?id=200610693&ns=GZHkEA==&expire=86400&spparams=id%2Cns%2Cexpire&signature=nYtXJqRKCW\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` <br>\nBad Request \n\n**Error Code:** `300` <br>\nInvalid webinar ID. \n\n**Error Code:** `3000` <br>\nClosed captioning disabled. To enable this feature, enable the \"Closed captioning\" and \"Allow use of caption API Token to integrate",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/token?type=closed_caption_token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"token"
									],
									"query": [
										{
											"key": "type",
											"value": "closed_caption_token"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `300` <br>\nWebinar ID does not exist. \n\n**Error Code:** `3001` <br>\nWebinar does not exist: {webinarId}",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/token?type=closed_caption_token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"token"
									],
									"query": [
										{
											"key": "type",
											"value": "closed_caption_token"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get a webinar's join token for local recording",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId/jointoken/local_recording",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId",
								"jointoken",
								"local_recording"
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "99289110036",
									"description": "(Required) The webinar's ID."
								}
							]
						},
						"description": "Use this API to get a webinar's join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom webinar. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types. \n\n **Scopes:** `webinar_token:read:admin:local_recording`, `webinar_token:read:local_recording` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Prerequisites:** \n* A Pro or higher plan with a Webinar Add-on. \n* The **Local recording** user setting enabled in the Zoom web portal."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200` <br>\nWebinar local recording token returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/jointoken/local_recording",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"jointoken",
										"local_recording"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"expire_in\": 120,\n  \"token\": \"2njt50mj\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n**Error Code:** `300` <br>\nInvalid webinar ID. \n\n**Error Code:** `124` <br>\nThis API only supports OAuth2 authorization. \n\n**Error Code:** `3000` <br>\nNot allowed to start local recording. To use this featur",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/jointoken/local_recording",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"jointoken",
										"local_recording"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` <br>\nNot Found \n\n**Error Code:** `300` <br>\nWebinar ID does not exist. \n\n**Error Code:** `3001` <br>\nWebinar does not exist: {webinarId}",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/jointoken/local_recording",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"jointoken",
										"local_recording"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "99289110036",
											"description": "(Required) The webinar's ID."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "workspaces",
			"item": [
				{
					"name": "{workspace Id}/reservations",
					"item": [
						{
							"name": "{reservation Id}",
							"item": [
								{
									"name": "Delete a reservation",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/workspaces/:workspaceId/reservations/:reservationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workspaces",
												":workspaceId",
												"reservations",
												":reservationId"
											],
											"variable": [
												{
													"key": "workspaceId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) The workspace's ID."
												},
												{
													"key": "reservationId",
													"value": "ebrg2b87a6uu9c678qhvsiahsc",
													"description": "(Required) The reservation's ID."
												}
											]
										},
										"description": "Use this API to delete a reservation. \n\n **Scopes:** `workspace:write`, `workspace:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `202` <br>\n Accepted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workspaces/:workspaceId/reservations/:reservationId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workspaces",
														":workspaceId",
														"reservations",
														":reservationId"
													],
													"variable": [
														{
															"key": "workspaceId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The workspace's ID."
														},
														{
															"key": "reservationId",
															"value": "ebrg2b87a6uu9c678qhvsiahsc",
															"description": "(Required) The reservation's ID."
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `2` \n* ZR core service is disabled. Try again later. \n* ZR core system error. Try again later.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workspaces/:workspaceId/reservations/:reservationId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workspaces",
														":workspaceId",
														"reservations",
														":reservationId"
													],
													"variable": [
														{
															"key": "workspaceId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The workspace's ID."
														},
														{
															"key": "reservationId",
															"value": "ebrg2b87a6uu9c678qhvsiahsc",
															"description": "(Required) The reservation's ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a reservation",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"start_time\": \"2021-03-18T05:41:36Z\",\n  \"end_time\": \"2021-03-18T05:41:36Z\",\n  \"topic\": \"My Personal Meeting Room\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/workspaces/:workspaceId/reservations/:reservationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workspaces",
												":workspaceId",
												"reservations",
												":reservationId"
											],
											"variable": [
												{
													"key": "workspaceId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) The workspace's ID."
												},
												{
													"key": "reservationId",
													"value": "ebrg2b87a6uu9c678qhvsiahsc",
													"description": "(Required) The reservation's ID."
												}
											]
										},
										"description": "Use this API to update a reservation. \n\n **Scopes:** `workspace:write`, `workspace:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `202` <br>\n Accepted.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"start_time\": \"2021-03-18T05:41:36Z\",\n  \"end_time\": \"2021-03-18T05:41:36Z\",\n  \"topic\": \"My Personal Meeting Room\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/workspaces/:workspaceId/reservations/:reservationId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workspaces",
														":workspaceId",
														"reservations",
														":reservationId"
													],
													"variable": [
														{
															"key": "workspaceId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The workspace's ID."
														},
														{
															"key": "reservationId",
															"value": "ebrg2b87a6uu9c678qhvsiahsc",
															"description": "(Required) The reservation's ID."
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `2` \n* ZR core service is disabled. Try again later. \n* ZR core system error. Try again later. \n\n **Error Code:** `300` <br>\n Invalid date and time range.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"start_time\": \"2021-03-18T05:41:36Z\",\n  \"end_time\": \"2021-03-18T05:41:36Z\",\n  \"topic\": \"My Personal Meeting Room\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/workspaces/:workspaceId/reservations/:reservationId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workspaces",
														":workspaceId",
														"reservations",
														":reservationId"
													],
													"variable": [
														{
															"key": "workspaceId",
															"value": "qMOLddnySIGGVycz8aX_JQ",
															"description": "(Required) The workspace's ID."
														},
														{
															"key": "reservationId",
															"value": "ebrg2b87a6uu9c678qhvsiahsc",
															"description": "(Required) The reservation's ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Create a reservation",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"start_time\": \"2021-03-18T05:41:36Z\",\n  \"end_time\": \"2021-03-18T05:41:36Z\",\n  \"topic\": \"My Personal Meeting Room\",\n  \"meeting\": {\n    \"end_to_end_encrypted\": true,\n    \"password\": \"9832583261\",\n    \"waiting_room\": true\n  },\n  \"reserve_for\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/workspaces/:workspaceId/reservations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workspaces",
										":workspaceId",
										"reservations"
									],
									"variable": [
										{
											"key": "workspaceId",
											"value": "qMOLddnySIGGVycz8aX_JQ",
											"description": "(Required) The workspace's ID."
										}
									]
								},
								"description": "Use this API to create a workspace reservation. \n\n **Scopes:** `workspace:write`, `workspace:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `201` <br>\n reservation created.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"start_time\": \"2021-03-18T05:41:36Z\",\n  \"end_time\": \"2021-03-18T05:41:36Z\",\n  \"topic\": \"My Personal Meeting Room\",\n  \"meeting\": {\n    \"end_to_end_encrypted\": true,\n    \"password\": \"9832583261\",\n    \"waiting_room\": true\n  },\n  \"reserve_for\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/workspaces/:workspaceId/reservations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workspaces",
												":workspaceId",
												"reservations"
											],
											"variable": [
												{
													"key": "workspaceId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) The workspace's ID."
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"reservation_id \": \"ebrg2b87a6uu9c678qhvsiahsc\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `2` \n* ZR core service is disabled. Try again later. \n* ZR core system error. Try again later. \n\n **Error Code:** `300` <br>\n Invalid date and time range.\n\n **Error Code:** `8201` <br>\n Fail",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"start_time\": \"2021-03-18T05:41:36Z\",\n  \"end_time\": \"2021-03-18T05:41:36Z\",\n  \"topic\": \"My Personal Meeting Room\",\n  \"meeting\": {\n    \"end_to_end_encrypted\": true,\n    \"password\": \"9832583261\",\n    \"waiting_room\": true\n  },\n  \"reserve_for\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/workspaces/:workspaceId/reservations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workspaces",
												":workspaceId",
												"reservations"
											],
											"variable": [
												{
													"key": "workspaceId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) The workspace's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1001` <br>\n* User does not exist: {userId}.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"start_time\": \"2021-03-18T05:41:36Z\",\n  \"end_time\": \"2021-03-18T05:41:36Z\",\n  \"topic\": \"My Personal Meeting Room\",\n  \"meeting\": {\n    \"end_to_end_encrypted\": true,\n    \"password\": \"9832583261\",\n    \"waiting_room\": true\n  },\n  \"reserve_for\": \"KDcuGIm1QgePTO8WbOqwIQ\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/workspaces/:workspaceId/reservations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workspaces",
												":workspaceId",
												"reservations"
											],
											"variable": [
												{
													"key": "workspaceId",
													"value": "qMOLddnySIGGVycz8aX_JQ",
													"description": "(Required) The workspace's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List workspaces",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/workspaces?location_id=49D7a0xPQvGQ2DCMZgSe7w&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"workspaces"
							],
							"query": [
								{
									"key": "location_id",
									"value": "49D7a0xPQvGQ2DCMZgSe7w",
									"description": "(Required) The location's ID."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "Use this API to list a location's workspaces. \n\n **Scopes:** `workspace:read`, `workspace:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200` <br>\n Workspace list returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workspaces?location_id=49D7a0xPQvGQ2DCMZgSe7w&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workspaces"
									],
									"query": [
										{
											"key": "location_id",
											"value": "49D7a0xPQvGQ2DCMZgSe7w"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"next_page_token\": \"At6eWnFZ1FB3arCXnRxqHLXKhbDW18yz2i2\",\n  \"page_size\": 30,\n  \"total_records\": 20,\n  \"workspaces\": [\n    {\n      \"id\": \"qMOLddnySIGGVycz8aX_JQ\",\n      \"workspace_name\": \"My Room\",\n      \"workspace_type\": \"desk\"\n    },\n    {\n      \"id\": \"qMOLddnySIGGVycz8aX_JQ\",\n      \"workspace_name\": \"My Room\",\n      \"workspace_type\": \"desk\"\n    }\n  ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `2` <br>\n* ZR core service is disabled. Try again later. \n* ZR core system error. Try again later.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workspaces?location_id=49D7a0xPQvGQ2DCMZgSe7w&page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workspaces"
									],
									"query": [
										{
											"key": "location_id",
											"value": "49D7a0xPQvGQ2DCMZgSe7w"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "List archived files",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/archive_files?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&from=2021-03-11T05:41:36Z&to=2021-03-18T05:41:36Z&query_date_type=meeting_start_time",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"archive_files"
					],
					"query": [
						{
							"key": "page_size",
							"value": "30",
							"description": "The number of records returned within a single API call."
						},
						{
							"key": "next_page_token",
							"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
							"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
						},
						{
							"key": "from",
							"value": "2021-03-11T05:41:36Z",
							"description": "The query start date, `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `to` query parameter value cannot exceed seven days."
						},
						{
							"key": "to",
							"value": "2021-03-18T05:41:36Z",
							"description": "The query end date, in `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `from` query parameter value cannot exceed seven days."
						},
						{
							"key": "query_date_type",
							"value": "meeting_start_time",
							"description": "The type of query date: \n* `meeting_start_time` \n* `archive_complete_time` \n\n This value defaults to `meeting_start_time`."
						}
					]
				},
				"description": "Use this API to get an account's archived meeting or webinar files. \n\n Zoom's [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) allows account administrators to set up an automated mechanism to record, collect, and archive meeting data to a 3rd-party platform of their choice to satisfy FINRA and/or other compliance requirements. \n\n **Scopes:** `recording:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n **Prerequisites:** \n* The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003)."
			},
			"response": [
				{
					"name": "**HTTP Status Code:** `200` <br>\n Archived files returned.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/archive_files?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&from=2021-03-11T05:41:36Z&to=2021-03-18T05:41:36Z&query_date_type=meeting_start_time",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"archive_files"
							],
							"query": [
								{
									"key": "page_size",
									"value": "30"
								},
								{
									"key": "next_page_token",
									"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
								},
								{
									"key": "from",
									"value": "2021-03-11T05:41:36Z"
								},
								{
									"key": "to",
									"value": "2021-03-18T05:41:36Z"
								},
								{
									"key": "query_date_type",
									"value": "meeting_start_time"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"from\": \"2021-03-12T02:12:27Z\",\n  \"meetings\": [\n    {\n      \"uuid\": \"yO3dfhh3t467UkQ==\",\n      \"id\": 553068284,\n      \"host_id\": \"Dhjdfgdkg8w\",\n      \"topic\": \"My Personal Meeting Room\",\n      \"type\": 1,\n      \"start_time\": \"2021-04-26T05:23:18Z\",\n      \"timezone\": \"Asia/Shanghai\",\n      \"duration\": 1,\n      \"total_size\": 364463,\n      \"recording_count\": 2,\n      \"meeting_type\": \"internal\",\n      \"account_name\": \"account_01\",\n      \"complete_time\": {},\n      \"is_breakout_room\": false,\n      \"archive_files\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"status\": \"completed\",\n      \"duration_in_second\": 1800,\n      \"parent_meeting_id\": \"atsXxhSEQWit9t+U02HXNQ==\"\n    },\n    {\n      \"uuid\": \"yO3dfhh3t467UkQ==\",\n      \"id\": 553068284,\n      \"host_id\": \"Dhjdfgdkg8w\",\n      \"topic\": \"My Personal Meeting Room\",\n      \"type\": 1,\n      \"start_time\": \"2021-04-26T05:23:18Z\",\n      \"timezone\": \"Asia/Shanghai\",\n      \"duration\": 1,\n      \"total_size\": 364463,\n      \"recording_count\": 2,\n      \"meeting_type\": \"internal\",\n      \"account_name\": \"account_01\",\n      \"complete_time\": {},\n      \"is_breakout_room\": false,\n      \"archive_files\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"status\": \"completed\",\n      \"duration_in_second\": 1800,\n      \"parent_meeting_id\": \"atsXxhSEQWit9t+U02HXNQ==\"\n    }\n  ],\n  \"next_page_token\": \"At6eWnFZ1FB3arCXnRxqHLXKhbDW18yz2i2\",\n  \"page_size\": 20,\n  \"to\": \"2021-03-12T02:12:27Z\",\n  \"total_records\": 20\n}"
				},
				{
					"name": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `2001` <br>\n Account does not exist: {accountId}",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/archive_files?page_size=30&next_page_token=IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2&from=2021-03-11T05:41:36Z&to=2021-03-18T05:41:36Z&query_date_type=meeting_start_time",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"archive_files"
							],
							"query": [
								{
									"key": "page_size",
									"value": "30"
								},
								{
									"key": "next_page_token",
									"value": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
								},
								{
									"key": "from",
									"value": "2021-03-11T05:41:36Z"
								},
								{
									"key": "to",
									"value": "2021-03-18T05:41:36Z"
								},
								{
									"key": "query_date_type",
									"value": "meeting_start_time"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Use in-meeting cloud recording controls",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"method\": \"recording.start\",\n  \"params\": {\n    \"contacts\": [\n      {\n        \"email\": \"jchill@example.com\",\n        \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\"\n      },\n      {\n        \"email\": \"jchill@example.com\",\n        \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\"\n      }\n    ]\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/live_meetings/:meetingId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"live_meetings",
						":meetingId",
						"events"
					],
					"variable": [
						{
							"key": "meetingId",
							"value": "93398114182",
							"description": "(Required) The live meeting's ID."
						}
					]
				},
				"description": "Use this API to control [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) cloud recording features. In-meeting controls include starting and stopping a recording, pausing and resuming a recording, and inviting participants. \n\n**Note:** This API only works for cloud recordings. It does **not** work for local recordings. \n\n**Scopes:** `meeting:write`, `meeting:write:admin`, `meeting:master` \n\n**Prerequisites:**\n* The meeting **must** be a live meeting. \n* [Cloud recording](https://support.zoom.us/hc/en-us/articles/360060231472-Enabling-cloud-recording) must be enabled on the account. \n* The user calling this API must be the host or an alternative meeting host.\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
			},
			"response": [
				{
					"name": "**HTTP Status:** `202` **Accepted**\nRequest processed successfully.",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"method\": \"recording.start\",\n  \"params\": {\n    \"contacts\": [\n      {\n        \"email\": \"jchill@example.com\",\n        \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\"\n      },\n      {\n        \"email\": \"jchill@example.com\",\n        \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\"\n      }\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/live_meetings/:meetingId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"live_meetings",
								":meetingId",
								"events"
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "93398114182",
									"description": "(Required) The live meeting's ID."
								}
							]
						}
					},
					"status": "Accepted",
					"code": 202,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "**HTTP Status:** `400` **Bad Request** <br><br>\n**Error Code:** `300`<br>\n* Meeting id does not exist.<br>\n* Invalid meeting id.<br>\n* Meeting does not exist.<br>\n* No permission.\n",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"method\": \"recording.start\",\n  \"params\": {\n    \"contacts\": [\n      {\n        \"email\": \"jchill@example.com\",\n        \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\"\n      },\n      {\n        \"email\": \"jchill@example.com\",\n        \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\"\n      }\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/live_meetings/:meetingId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"live_meetings",
								":meetingId",
								"events"
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "93398114182",
									"description": "(Required) The live meeting's ID."
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001` <br> Meeting {meetingId} is not found or has expired.",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"method\": \"recording.start\",\n  \"params\": {\n    \"contacts\": [\n      {\n        \"email\": \"jchill@example.com\",\n        \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\"\n      },\n      {\n        \"email\": \"jchill@example.com\",\n        \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\"\n      }\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/live_meetings/:meetingId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"live_meetings",
								":meetingId",
								"events"
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "93398114182",
									"description": "(Required) The live meeting's ID."
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "**HTTP Status Code:** `429` <br>\nYou have exceeded the rate limit \"{0}\" of requests for this meeting. You can resume these API requests after 5 seconds.<br>\n* You have exceeded the rate limit \"{0}\" of requests for this meeting and this phone number. You m",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"method\": \"recording.start\",\n  \"params\": {\n    \"contacts\": [\n      {\n        \"email\": \"jchill@example.com\",\n        \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\"\n      },\n      {\n        \"email\": \"jchill@example.com\",\n        \"id\": \"30R7kT7bTIKSNUFEuH_Qlg\"\n      }\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/live_meetings/:meetingId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"live_meetings",
								":meetingId",
								"events"
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "93398114182",
									"description": "(Required) The live meeting's ID."
								}
							]
						}
					},
					"status": "Too Many Requests",
					"code": 429,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"auth": {
		"type": "oauth2"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.zoom.us/v2",
			"type": "string"
		}
	]
}